(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["vendor"],{

/***/ "../node_modules/css-loader/lib/css-base.js":
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media " + item[2] + "{" + content + "}";
      } else {
        return content;
      }
    }).join("");
  }; // import a list of modules into the list


  list.i = function (modules, mediaQuery) {
    if (typeof modules === "string") modules = [[null, modules, ""]];
    var alreadyImportedModules = {};

    for (var i = 0; i < this.length; i++) {
      var id = this[i][0];
      if (typeof id === "number") alreadyImportedModules[id] = true;
    }

    for (i = 0; i < modules.length; i++) {
      var item = modules[i]; // skip already imported module
      // this implementation is not 100% perfect for weird media query combinations
      //  when a module is imported multiple times with different media queries.
      //  I hope this will never occur (Hey this way we have smaller bundles)

      if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
        if (mediaQuery && !item[2]) {
          item[2] = mediaQuery;
        } else if (mediaQuery) {
          item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
        }

        list.push(item);
      }
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || '';
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
  return '/*# ' + data + ' */';
}

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/css2json-loader.js?useForImports!../node_modules/nativescript-theme-core/css/core.light.css":
/***/ (function(module, exports) {

module.exports = {"type":"stylesheet","stylesheet":{"rules":[{"type":"comment","comment":"!\r\n * NativeScript Theme v1.0.6 (https://nativescript.org)\r\n * Copyright 2016-2016 The Theme Authors\r\n * Copyright 2016-2016 Telerik\r\n * Licensed under MIT (https://github.com/NativeScript/theme/blob/master/LICENSE)\r\n "},{"type":"rule","selectors":[".c-white"],"declarations":[{"type":"declaration","property":"color","value":"#fff"}]},{"type":"rule","selectors":[".c-bg-white"],"declarations":[{"type":"declaration","property":"background-color","value":"#fff"}]},{"type":"rule","selectors":[".c-black"],"declarations":[{"type":"declaration","property":"color","value":"#000"}]},{"type":"rule","selectors":[".c-bg-black"],"declarations":[{"type":"declaration","property":"background-color","value":"#000"}]},{"type":"rule","selectors":[".c-aqua"],"declarations":[{"type":"declaration","property":"color","value":"#00caab"}]},{"type":"rule","selectors":[".c-bg-aqua"],"declarations":[{"type":"declaration","property":"background-color","value":"#00caab"}]},{"type":"rule","selectors":[".c-blue"],"declarations":[{"type":"declaration","property":"color","value":"#3d5afe"}]},{"type":"rule","selectors":[".c-bg-blue"],"declarations":[{"type":"declaration","property":"background-color","value":"#3d5afe"}]},{"type":"rule","selectors":[".c-charcoal"],"declarations":[{"type":"declaration","property":"color","value":"#303030"}]},{"type":"rule","selectors":[".c-bg-charcoal"],"declarations":[{"type":"declaration","property":"background-color","value":"#303030"}]},{"type":"rule","selectors":[".c-brown"],"declarations":[{"type":"declaration","property":"color","value":"#795548"}]},{"type":"rule","selectors":[".c-bg-brown"],"declarations":[{"type":"declaration","property":"background-color","value":"#795548"}]},{"type":"rule","selectors":[".c-forest"],"declarations":[{"type":"declaration","property":"color","value":"#006968"}]},{"type":"rule","selectors":[".c-bg-forest"],"declarations":[{"type":"declaration","property":"background-color","value":"#006968"}]},{"type":"rule","selectors":[".c-grey"],"declarations":[{"type":"declaration","property":"color","value":"#e0e0e0"}]},{"type":"rule","selectors":[".c-bg-grey"],"declarations":[{"type":"declaration","property":"background-color","value":"#e0e0e0"}]},{"type":"rule","selectors":[".c-grey-light"],"declarations":[{"type":"declaration","property":"color","value":"#bababa"}]},{"type":"rule","selectors":[".c-bg-grey-light"],"declarations":[{"type":"declaration","property":"background-color","value":"#bababa"}]},{"type":"rule","selectors":[".c-grey-dark"],"declarations":[{"type":"declaration","property":"color","value":"#5c687c"}]},{"type":"rule","selectors":[".c-bg-grey-dark"],"declarations":[{"type":"declaration","property":"background-color","value":"#5c687c"}]},{"type":"rule","selectors":[".c-purple"],"declarations":[{"type":"declaration","property":"color","value":"#8130ff"}]},{"type":"rule","selectors":[".c-bg-purple"],"declarations":[{"type":"declaration","property":"background-color","value":"#8130ff"}]},{"type":"rule","selectors":[".c-lemon"],"declarations":[{"type":"declaration","property":"color","value":"#ffea00"}]},{"type":"rule","selectors":[".c-bg-lemon"],"declarations":[{"type":"declaration","property":"background-color","value":"#ffea00"}]},{"type":"rule","selectors":[".c-lime"],"declarations":[{"type":"declaration","property":"color","value":"#aee406"}]},{"type":"rule","selectors":[".c-bg-lime"],"declarations":[{"type":"declaration","property":"background-color","value":"#aee406"}]},{"type":"rule","selectors":[".c-orange"],"declarations":[{"type":"declaration","property":"color","value":"#f57c00"}]},{"type":"rule","selectors":[".c-bg-orange"],"declarations":[{"type":"declaration","property":"background-color","value":"#f57c00"}]},{"type":"rule","selectors":[".c-ruby"],"declarations":[{"type":"declaration","property":"color","value":"#ff1744"}]},{"type":"rule","selectors":[".c-bg-ruby"],"declarations":[{"type":"declaration","property":"background-color","value":"#ff1744"}]},{"type":"rule","selectors":[".c-sky"],"declarations":[{"type":"declaration","property":"color","value":"#30bcff"}]},{"type":"rule","selectors":[".c-bg-sky"],"declarations":[{"type":"declaration","property":"background-color","value":"#30bcff"}]},{"type":"rule","selectors":[".w-full"],"declarations":[{"type":"declaration","property":"width","value":"100%"}]},{"type":"rule","selectors":[".w-100"],"declarations":[{"type":"declaration","property":"width","value":"100"}]},{"type":"rule","selectors":[".h-full"],"declarations":[{"type":"declaration","property":"height","value":"100%"}]},{"type":"rule","selectors":[".h-100"],"declarations":[{"type":"declaration","property":"height","value":"100"}]},{"type":"rule","selectors":[".m-0"],"declarations":[{"type":"declaration","property":"margin","value":"0"}]},{"type":"rule","selectors":[".m-t-0"],"declarations":[{"type":"declaration","property":"margin-top","value":"0"}]},{"type":"rule","selectors":[".m-r-0"],"declarations":[{"type":"declaration","property":"margin-right","value":"0"}]},{"type":"rule","selectors":[".m-b-0"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"0"}]},{"type":"rule","selectors":[".m-l-0"],"declarations":[{"type":"declaration","property":"margin-left","value":"0"}]},{"type":"rule","selectors":[".m-x-0"],"declarations":[{"type":"declaration","property":"margin-right","value":"0"},{"type":"declaration","property":"margin-left","value":"0"}]},{"type":"rule","selectors":[".m-y-0"],"declarations":[{"type":"declaration","property":"margin-top","value":"0"},{"type":"declaration","property":"margin-bottom","value":"0"}]},{"type":"rule","selectors":[".m-2"],"declarations":[{"type":"declaration","property":"margin","value":"2"}]},{"type":"rule","selectors":[".m-t-2"],"declarations":[{"type":"declaration","property":"margin-top","value":"2"}]},{"type":"rule","selectors":[".m-r-2"],"declarations":[{"type":"declaration","property":"margin-right","value":"2"}]},{"type":"rule","selectors":[".m-b-2"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"2"}]},{"type":"rule","selectors":[".m-l-2"],"declarations":[{"type":"declaration","property":"margin-left","value":"2"}]},{"type":"rule","selectors":[".m-x-2"],"declarations":[{"type":"declaration","property":"margin-right","value":"2"},{"type":"declaration","property":"margin-left","value":"2"}]},{"type":"rule","selectors":[".m-y-2"],"declarations":[{"type":"declaration","property":"margin-top","value":"2"},{"type":"declaration","property":"margin-bottom","value":"2"}]},{"type":"rule","selectors":[".m-4"],"declarations":[{"type":"declaration","property":"margin","value":"4"}]},{"type":"rule","selectors":[".m-t-4"],"declarations":[{"type":"declaration","property":"margin-top","value":"4"}]},{"type":"rule","selectors":[".m-r-4"],"declarations":[{"type":"declaration","property":"margin-right","value":"4"}]},{"type":"rule","selectors":[".m-b-4"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"4"}]},{"type":"rule","selectors":[".m-l-4"],"declarations":[{"type":"declaration","property":"margin-left","value":"4"}]},{"type":"rule","selectors":[".m-x-4"],"declarations":[{"type":"declaration","property":"margin-right","value":"4"},{"type":"declaration","property":"margin-left","value":"4"}]},{"type":"rule","selectors":[".m-y-4"],"declarations":[{"type":"declaration","property":"margin-top","value":"4"},{"type":"declaration","property":"margin-bottom","value":"4"}]},{"type":"rule","selectors":[".m-5"],"declarations":[{"type":"declaration","property":"margin","value":"5"}]},{"type":"rule","selectors":[".m-t-5"],"declarations":[{"type":"declaration","property":"margin-top","value":"5"}]},{"type":"rule","selectors":[".m-r-5"],"declarations":[{"type":"declaration","property":"margin-right","value":"5"}]},{"type":"rule","selectors":[".m-b-5"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"5"}]},{"type":"rule","selectors":[".m-l-5"],"declarations":[{"type":"declaration","property":"margin-left","value":"5"}]},{"type":"rule","selectors":[".m-x-5"],"declarations":[{"type":"declaration","property":"margin-right","value":"5"},{"type":"declaration","property":"margin-left","value":"5"}]},{"type":"rule","selectors":[".m-y-5"],"declarations":[{"type":"declaration","property":"margin-top","value":"5"},{"type":"declaration","property":"margin-bottom","value":"5"}]},{"type":"rule","selectors":[".m-8"],"declarations":[{"type":"declaration","property":"margin","value":"8"}]},{"type":"rule","selectors":[".m-t-8"],"declarations":[{"type":"declaration","property":"margin-top","value":"8"}]},{"type":"rule","selectors":[".m-r-8"],"declarations":[{"type":"declaration","property":"margin-right","value":"8"}]},{"type":"rule","selectors":[".m-b-8"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"8"}]},{"type":"rule","selectors":[".m-l-8"],"declarations":[{"type":"declaration","property":"margin-left","value":"8"}]},{"type":"rule","selectors":[".m-x-8"],"declarations":[{"type":"declaration","property":"margin-right","value":"8"},{"type":"declaration","property":"margin-left","value":"8"}]},{"type":"rule","selectors":[".m-y-8"],"declarations":[{"type":"declaration","property":"margin-top","value":"8"},{"type":"declaration","property":"margin-bottom","value":"8"}]},{"type":"rule","selectors":[".m-10"],"declarations":[{"type":"declaration","property":"margin","value":"10"}]},{"type":"rule","selectors":[".m-t-10"],"declarations":[{"type":"declaration","property":"margin-top","value":"10"}]},{"type":"rule","selectors":[".m-r-10"],"declarations":[{"type":"declaration","property":"margin-right","value":"10"}]},{"type":"rule","selectors":[".m-b-10"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"10"}]},{"type":"rule","selectors":[".m-l-10"],"declarations":[{"type":"declaration","property":"margin-left","value":"10"}]},{"type":"rule","selectors":[".m-x-10"],"declarations":[{"type":"declaration","property":"margin-right","value":"10"},{"type":"declaration","property":"margin-left","value":"10"}]},{"type":"rule","selectors":[".m-y-10"],"declarations":[{"type":"declaration","property":"margin-top","value":"10"},{"type":"declaration","property":"margin-bottom","value":"10"}]},{"type":"rule","selectors":[".m-12"],"declarations":[{"type":"declaration","property":"margin","value":"12"}]},{"type":"rule","selectors":[".m-t-12"],"declarations":[{"type":"declaration","property":"margin-top","value":"12"}]},{"type":"rule","selectors":[".m-r-12"],"declarations":[{"type":"declaration","property":"margin-right","value":"12"}]},{"type":"rule","selectors":[".m-b-12"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"12"}]},{"type":"rule","selectors":[".m-l-12"],"declarations":[{"type":"declaration","property":"margin-left","value":"12"}]},{"type":"rule","selectors":[".m-x-12"],"declarations":[{"type":"declaration","property":"margin-right","value":"12"},{"type":"declaration","property":"margin-left","value":"12"}]},{"type":"rule","selectors":[".m-y-12"],"declarations":[{"type":"declaration","property":"margin-top","value":"12"},{"type":"declaration","property":"margin-bottom","value":"12"}]},{"type":"rule","selectors":[".m-15"],"declarations":[{"type":"declaration","property":"margin","value":"15"}]},{"type":"rule","selectors":[".m-t-15"],"declarations":[{"type":"declaration","property":"margin-top","value":"15"}]},{"type":"rule","selectors":[".m-r-15"],"declarations":[{"type":"declaration","property":"margin-right","value":"15"}]},{"type":"rule","selectors":[".m-b-15"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"15"}]},{"type":"rule","selectors":[".m-l-15"],"declarations":[{"type":"declaration","property":"margin-left","value":"15"}]},{"type":"rule","selectors":[".m-x-15"],"declarations":[{"type":"declaration","property":"margin-right","value":"15"},{"type":"declaration","property":"margin-left","value":"15"}]},{"type":"rule","selectors":[".m-y-15"],"declarations":[{"type":"declaration","property":"margin-top","value":"15"},{"type":"declaration","property":"margin-bottom","value":"15"}]},{"type":"rule","selectors":[".m-16"],"declarations":[{"type":"declaration","property":"margin","value":"16"}]},{"type":"rule","selectors":[".m-t-16"],"declarations":[{"type":"declaration","property":"margin-top","value":"16"}]},{"type":"rule","selectors":[".m-r-16"],"declarations":[{"type":"declaration","property":"margin-right","value":"16"}]},{"type":"rule","selectors":[".m-b-16"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"16"}]},{"type":"rule","selectors":[".m-l-16"],"declarations":[{"type":"declaration","property":"margin-left","value":"16"}]},{"type":"rule","selectors":[".m-x-16"],"declarations":[{"type":"declaration","property":"margin-right","value":"16"},{"type":"declaration","property":"margin-left","value":"16"}]},{"type":"rule","selectors":[".m-y-16"],"declarations":[{"type":"declaration","property":"margin-top","value":"16"},{"type":"declaration","property":"margin-bottom","value":"16"}]},{"type":"rule","selectors":[".m-20"],"declarations":[{"type":"declaration","property":"margin","value":"20"}]},{"type":"rule","selectors":[".m-t-20"],"declarations":[{"type":"declaration","property":"margin-top","value":"20"}]},{"type":"rule","selectors":[".m-r-20"],"declarations":[{"type":"declaration","property":"margin-right","value":"20"}]},{"type":"rule","selectors":[".m-b-20"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"20"}]},{"type":"rule","selectors":[".m-l-20"],"declarations":[{"type":"declaration","property":"margin-left","value":"20"}]},{"type":"rule","selectors":[".m-x-20"],"declarations":[{"type":"declaration","property":"margin-right","value":"20"},{"type":"declaration","property":"margin-left","value":"20"}]},{"type":"rule","selectors":[".m-y-20"],"declarations":[{"type":"declaration","property":"margin-top","value":"20"},{"type":"declaration","property":"margin-bottom","value":"20"}]},{"type":"rule","selectors":[".m-24"],"declarations":[{"type":"declaration","property":"margin","value":"24"}]},{"type":"rule","selectors":[".m-t-24"],"declarations":[{"type":"declaration","property":"margin-top","value":"24"}]},{"type":"rule","selectors":[".m-r-24"],"declarations":[{"type":"declaration","property":"margin-right","value":"24"}]},{"type":"rule","selectors":[".m-b-24"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"24"}]},{"type":"rule","selectors":[".m-l-24"],"declarations":[{"type":"declaration","property":"margin-left","value":"24"}]},{"type":"rule","selectors":[".m-x-24"],"declarations":[{"type":"declaration","property":"margin-right","value":"24"},{"type":"declaration","property":"margin-left","value":"24"}]},{"type":"rule","selectors":[".m-y-24"],"declarations":[{"type":"declaration","property":"margin-top","value":"24"},{"type":"declaration","property":"margin-bottom","value":"24"}]},{"type":"rule","selectors":[".m-25"],"declarations":[{"type":"declaration","property":"margin","value":"25"}]},{"type":"rule","selectors":[".m-t-25"],"declarations":[{"type":"declaration","property":"margin-top","value":"25"}]},{"type":"rule","selectors":[".m-r-25"],"declarations":[{"type":"declaration","property":"margin-right","value":"25"}]},{"type":"rule","selectors":[".m-b-25"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"25"}]},{"type":"rule","selectors":[".m-l-25"],"declarations":[{"type":"declaration","property":"margin-left","value":"25"}]},{"type":"rule","selectors":[".m-x-25"],"declarations":[{"type":"declaration","property":"margin-right","value":"25"},{"type":"declaration","property":"margin-left","value":"25"}]},{"type":"rule","selectors":[".m-y-25"],"declarations":[{"type":"declaration","property":"margin-top","value":"25"},{"type":"declaration","property":"margin-bottom","value":"25"}]},{"type":"rule","selectors":[".m-28"],"declarations":[{"type":"declaration","property":"margin","value":"28"}]},{"type":"rule","selectors":[".m-t-28"],"declarations":[{"type":"declaration","property":"margin-top","value":"28"}]},{"type":"rule","selectors":[".m-r-28"],"declarations":[{"type":"declaration","property":"margin-right","value":"28"}]},{"type":"rule","selectors":[".m-b-28"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"28"}]},{"type":"rule","selectors":[".m-l-28"],"declarations":[{"type":"declaration","property":"margin-left","value":"28"}]},{"type":"rule","selectors":[".m-x-28"],"declarations":[{"type":"declaration","property":"margin-right","value":"28"},{"type":"declaration","property":"margin-left","value":"28"}]},{"type":"rule","selectors":[".m-y-28"],"declarations":[{"type":"declaration","property":"margin-top","value":"28"},{"type":"declaration","property":"margin-bottom","value":"28"}]},{"type":"rule","selectors":[".m-30"],"declarations":[{"type":"declaration","property":"margin","value":"30"}]},{"type":"rule","selectors":[".m-t-30"],"declarations":[{"type":"declaration","property":"margin-top","value":"30"}]},{"type":"rule","selectors":[".m-r-30"],"declarations":[{"type":"declaration","property":"margin-right","value":"30"}]},{"type":"rule","selectors":[".m-b-30"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"30"}]},{"type":"rule","selectors":[".m-l-30"],"declarations":[{"type":"declaration","property":"margin-left","value":"30"}]},{"type":"rule","selectors":[".m-x-30"],"declarations":[{"type":"declaration","property":"margin-right","value":"30"},{"type":"declaration","property":"margin-left","value":"30"}]},{"type":"rule","selectors":[".m-y-30"],"declarations":[{"type":"declaration","property":"margin-top","value":"30"},{"type":"declaration","property":"margin-bottom","value":"30"}]},{"type":"rule","selectors":[".p-0"],"declarations":[{"type":"declaration","property":"padding","value":"0"}]},{"type":"rule","selectors":[".p-t-0"],"declarations":[{"type":"declaration","property":"padding-top","value":"0"}]},{"type":"rule","selectors":[".p-r-0"],"declarations":[{"type":"declaration","property":"padding-right","value":"0"}]},{"type":"rule","selectors":[".p-b-0"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"0"}]},{"type":"rule","selectors":[".p-l-0"],"declarations":[{"type":"declaration","property":"padding-left","value":"0"}]},{"type":"rule","selectors":[".p-x-0"],"declarations":[{"type":"declaration","property":"padding-right","value":"0"},{"type":"declaration","property":"padding-left","value":"0"}]},{"type":"rule","selectors":[".p-y-0"],"declarations":[{"type":"declaration","property":"padding-top","value":"0"},{"type":"declaration","property":"padding-bottom","value":"0"}]},{"type":"rule","selectors":[".p-2"],"declarations":[{"type":"declaration","property":"padding","value":"2"}]},{"type":"rule","selectors":[".p-t-2"],"declarations":[{"type":"declaration","property":"padding-top","value":"2"}]},{"type":"rule","selectors":[".p-r-2"],"declarations":[{"type":"declaration","property":"padding-right","value":"2"}]},{"type":"rule","selectors":[".p-b-2"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"2"}]},{"type":"rule","selectors":[".p-l-2"],"declarations":[{"type":"declaration","property":"padding-left","value":"2"}]},{"type":"rule","selectors":[".p-x-2"],"declarations":[{"type":"declaration","property":"padding-right","value":"2"},{"type":"declaration","property":"padding-left","value":"2"}]},{"type":"rule","selectors":[".p-y-2"],"declarations":[{"type":"declaration","property":"padding-top","value":"2"},{"type":"declaration","property":"padding-bottom","value":"2"}]},{"type":"rule","selectors":[".p-4"],"declarations":[{"type":"declaration","property":"padding","value":"4"}]},{"type":"rule","selectors":[".p-t-4"],"declarations":[{"type":"declaration","property":"padding-top","value":"4"}]},{"type":"rule","selectors":[".p-r-4"],"declarations":[{"type":"declaration","property":"padding-right","value":"4"}]},{"type":"rule","selectors":[".p-b-4"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"4"}]},{"type":"rule","selectors":[".p-l-4"],"declarations":[{"type":"declaration","property":"padding-left","value":"4"}]},{"type":"rule","selectors":[".p-x-4"],"declarations":[{"type":"declaration","property":"padding-right","value":"4"},{"type":"declaration","property":"padding-left","value":"4"}]},{"type":"rule","selectors":[".p-y-4"],"declarations":[{"type":"declaration","property":"padding-top","value":"4"},{"type":"declaration","property":"padding-bottom","value":"4"}]},{"type":"rule","selectors":[".p-5"],"declarations":[{"type":"declaration","property":"padding","value":"5"}]},{"type":"rule","selectors":[".p-t-5"],"declarations":[{"type":"declaration","property":"padding-top","value":"5"}]},{"type":"rule","selectors":[".p-r-5"],"declarations":[{"type":"declaration","property":"padding-right","value":"5"}]},{"type":"rule","selectors":[".p-b-5"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"5"}]},{"type":"rule","selectors":[".p-l-5"],"declarations":[{"type":"declaration","property":"padding-left","value":"5"}]},{"type":"rule","selectors":[".p-x-5"],"declarations":[{"type":"declaration","property":"padding-right","value":"5"},{"type":"declaration","property":"padding-left","value":"5"}]},{"type":"rule","selectors":[".p-y-5"],"declarations":[{"type":"declaration","property":"padding-top","value":"5"},{"type":"declaration","property":"padding-bottom","value":"5"}]},{"type":"rule","selectors":[".p-8"],"declarations":[{"type":"declaration","property":"padding","value":"8"}]},{"type":"rule","selectors":[".p-t-8"],"declarations":[{"type":"declaration","property":"padding-top","value":"8"}]},{"type":"rule","selectors":[".p-r-8"],"declarations":[{"type":"declaration","property":"padding-right","value":"8"}]},{"type":"rule","selectors":[".p-b-8"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"8"}]},{"type":"rule","selectors":[".p-l-8"],"declarations":[{"type":"declaration","property":"padding-left","value":"8"}]},{"type":"rule","selectors":[".p-x-8"],"declarations":[{"type":"declaration","property":"padding-right","value":"8"},{"type":"declaration","property":"padding-left","value":"8"}]},{"type":"rule","selectors":[".p-y-8"],"declarations":[{"type":"declaration","property":"padding-top","value":"8"},{"type":"declaration","property":"padding-bottom","value":"8"}]},{"type":"rule","selectors":[".p-10"],"declarations":[{"type":"declaration","property":"padding","value":"10"}]},{"type":"rule","selectors":[".p-t-10"],"declarations":[{"type":"declaration","property":"padding-top","value":"10"}]},{"type":"rule","selectors":[".p-r-10"],"declarations":[{"type":"declaration","property":"padding-right","value":"10"}]},{"type":"rule","selectors":[".p-b-10"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"10"}]},{"type":"rule","selectors":[".p-l-10"],"declarations":[{"type":"declaration","property":"padding-left","value":"10"}]},{"type":"rule","selectors":[".p-x-10"],"declarations":[{"type":"declaration","property":"padding-right","value":"10"},{"type":"declaration","property":"padding-left","value":"10"}]},{"type":"rule","selectors":[".p-y-10"],"declarations":[{"type":"declaration","property":"padding-top","value":"10"},{"type":"declaration","property":"padding-bottom","value":"10"}]},{"type":"rule","selectors":[".p-12"],"declarations":[{"type":"declaration","property":"padding","value":"12"}]},{"type":"rule","selectors":[".p-t-12"],"declarations":[{"type":"declaration","property":"padding-top","value":"12"}]},{"type":"rule","selectors":[".p-r-12"],"declarations":[{"type":"declaration","property":"padding-right","value":"12"}]},{"type":"rule","selectors":[".p-b-12"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"12"}]},{"type":"rule","selectors":[".p-l-12"],"declarations":[{"type":"declaration","property":"padding-left","value":"12"}]},{"type":"rule","selectors":[".p-x-12"],"declarations":[{"type":"declaration","property":"padding-right","value":"12"},{"type":"declaration","property":"padding-left","value":"12"}]},{"type":"rule","selectors":[".p-y-12"],"declarations":[{"type":"declaration","property":"padding-top","value":"12"},{"type":"declaration","property":"padding-bottom","value":"12"}]},{"type":"rule","selectors":[".p-15"],"declarations":[{"type":"declaration","property":"padding","value":"15"}]},{"type":"rule","selectors":[".p-t-15"],"declarations":[{"type":"declaration","property":"padding-top","value":"15"}]},{"type":"rule","selectors":[".p-r-15"],"declarations":[{"type":"declaration","property":"padding-right","value":"15"}]},{"type":"rule","selectors":[".p-b-15"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"15"}]},{"type":"rule","selectors":[".p-l-15"],"declarations":[{"type":"declaration","property":"padding-left","value":"15"}]},{"type":"rule","selectors":[".p-x-15"],"declarations":[{"type":"declaration","property":"padding-right","value":"15"},{"type":"declaration","property":"padding-left","value":"15"}]},{"type":"rule","selectors":[".p-y-15"],"declarations":[{"type":"declaration","property":"padding-top","value":"15"},{"type":"declaration","property":"padding-bottom","value":"15"}]},{"type":"rule","selectors":[".p-16"],"declarations":[{"type":"declaration","property":"padding","value":"16"}]},{"type":"rule","selectors":[".p-t-16"],"declarations":[{"type":"declaration","property":"padding-top","value":"16"}]},{"type":"rule","selectors":[".p-r-16"],"declarations":[{"type":"declaration","property":"padding-right","value":"16"}]},{"type":"rule","selectors":[".p-b-16"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"16"}]},{"type":"rule","selectors":[".p-l-16"],"declarations":[{"type":"declaration","property":"padding-left","value":"16"}]},{"type":"rule","selectors":[".p-x-16"],"declarations":[{"type":"declaration","property":"padding-right","value":"16"},{"type":"declaration","property":"padding-left","value":"16"}]},{"type":"rule","selectors":[".p-y-16"],"declarations":[{"type":"declaration","property":"padding-top","value":"16"},{"type":"declaration","property":"padding-bottom","value":"16"}]},{"type":"rule","selectors":[".p-20"],"declarations":[{"type":"declaration","property":"padding","value":"20"}]},{"type":"rule","selectors":[".p-t-20"],"declarations":[{"type":"declaration","property":"padding-top","value":"20"}]},{"type":"rule","selectors":[".p-r-20"],"declarations":[{"type":"declaration","property":"padding-right","value":"20"}]},{"type":"rule","selectors":[".p-b-20"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"20"}]},{"type":"rule","selectors":[".p-l-20"],"declarations":[{"type":"declaration","property":"padding-left","value":"20"}]},{"type":"rule","selectors":[".p-x-20"],"declarations":[{"type":"declaration","property":"padding-right","value":"20"},{"type":"declaration","property":"padding-left","value":"20"}]},{"type":"rule","selectors":[".p-y-20"],"declarations":[{"type":"declaration","property":"padding-top","value":"20"},{"type":"declaration","property":"padding-bottom","value":"20"}]},{"type":"rule","selectors":[".p-24"],"declarations":[{"type":"declaration","property":"padding","value":"24"}]},{"type":"rule","selectors":[".p-t-24"],"declarations":[{"type":"declaration","property":"padding-top","value":"24"}]},{"type":"rule","selectors":[".p-r-24"],"declarations":[{"type":"declaration","property":"padding-right","value":"24"}]},{"type":"rule","selectors":[".p-b-24"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"24"}]},{"type":"rule","selectors":[".p-l-24"],"declarations":[{"type":"declaration","property":"padding-left","value":"24"}]},{"type":"rule","selectors":[".p-x-24"],"declarations":[{"type":"declaration","property":"padding-right","value":"24"},{"type":"declaration","property":"padding-left","value":"24"}]},{"type":"rule","selectors":[".p-y-24"],"declarations":[{"type":"declaration","property":"padding-top","value":"24"},{"type":"declaration","property":"padding-bottom","value":"24"}]},{"type":"rule","selectors":[".p-25"],"declarations":[{"type":"declaration","property":"padding","value":"25"}]},{"type":"rule","selectors":[".p-t-25"],"declarations":[{"type":"declaration","property":"padding-top","value":"25"}]},{"type":"rule","selectors":[".p-r-25"],"declarations":[{"type":"declaration","property":"padding-right","value":"25"}]},{"type":"rule","selectors":[".p-b-25"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"25"}]},{"type":"rule","selectors":[".p-l-25"],"declarations":[{"type":"declaration","property":"padding-left","value":"25"}]},{"type":"rule","selectors":[".p-x-25"],"declarations":[{"type":"declaration","property":"padding-right","value":"25"},{"type":"declaration","property":"padding-left","value":"25"}]},{"type":"rule","selectors":[".p-y-25"],"declarations":[{"type":"declaration","property":"padding-top","value":"25"},{"type":"declaration","property":"padding-bottom","value":"25"}]},{"type":"rule","selectors":[".p-28"],"declarations":[{"type":"declaration","property":"padding","value":"28"}]},{"type":"rule","selectors":[".p-t-28"],"declarations":[{"type":"declaration","property":"padding-top","value":"28"}]},{"type":"rule","selectors":[".p-r-28"],"declarations":[{"type":"declaration","property":"padding-right","value":"28"}]},{"type":"rule","selectors":[".p-b-28"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"28"}]},{"type":"rule","selectors":[".p-l-28"],"declarations":[{"type":"declaration","property":"padding-left","value":"28"}]},{"type":"rule","selectors":[".p-x-28"],"declarations":[{"type":"declaration","property":"padding-right","value":"28"},{"type":"declaration","property":"padding-left","value":"28"}]},{"type":"rule","selectors":[".p-y-28"],"declarations":[{"type":"declaration","property":"padding-top","value":"28"},{"type":"declaration","property":"padding-bottom","value":"28"}]},{"type":"rule","selectors":[".p-30"],"declarations":[{"type":"declaration","property":"padding","value":"30"}]},{"type":"rule","selectors":[".p-t-30"],"declarations":[{"type":"declaration","property":"padding-top","value":"30"}]},{"type":"rule","selectors":[".p-r-30"],"declarations":[{"type":"declaration","property":"padding-right","value":"30"}]},{"type":"rule","selectors":[".p-b-30"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"30"}]},{"type":"rule","selectors":[".p-l-30"],"declarations":[{"type":"declaration","property":"padding-left","value":"30"}]},{"type":"rule","selectors":[".p-x-30"],"declarations":[{"type":"declaration","property":"padding-right","value":"30"},{"type":"declaration","property":"padding-left","value":"30"}]},{"type":"rule","selectors":[".p-y-30"],"declarations":[{"type":"declaration","property":"padding-top","value":"30"},{"type":"declaration","property":"padding-bottom","value":"30"}]},{"type":"rule","selectors":[".hr-light"],"declarations":[{"type":"declaration","property":"height","value":"1"},{"type":"declaration","property":"background-color","value":"#e0e0e0"},{"type":"declaration","property":"width","value":"100%"}]},{"type":"rule","selectors":[".hr-dark"],"declarations":[{"type":"declaration","property":"height","value":"1"},{"type":"declaration","property":"background-color","value":"#303030"},{"type":"declaration","property":"width","value":"100%"}]},{"type":"rule","selectors":[".text-left"],"declarations":[{"type":"declaration","property":"text-align","value":"left"}]},{"type":"rule","selectors":[".text-right"],"declarations":[{"type":"declaration","property":"text-align","value":"right"}]},{"type":"rule","selectors":[".text-center"],"declarations":[{"type":"declaration","property":"text-align","value":"center"}]},{"type":"rule","selectors":[".text-lowercase"],"declarations":[{"type":"declaration","property":"text-transform","value":"lowercase"}]},{"type":"rule","selectors":[".text-uppercase"],"declarations":[{"type":"declaration","property":"text-transform","value":"uppercase"}]},{"type":"rule","selectors":[".text-capitalize"],"declarations":[{"type":"declaration","property":"text-transform","value":"capitalize"}]},{"type":"rule","selectors":[".font-weight-normal"],"declarations":[{"type":"declaration","property":"font-weight","value":"normal"}]},{"type":"rule","selectors":[".font-weight-bold"],"declarations":[{"type":"declaration","property":"font-weight","value":"bold"}]},{"type":"rule","selectors":[".font-italic"],"declarations":[{"type":"declaration","property":"font-style","value":"italic"}]},{"type":"rule","selectors":[".t-10"],"declarations":[{"type":"declaration","property":"font-size","value":"10"}]},{"type":"rule","selectors":[".t-12"],"declarations":[{"type":"declaration","property":"font-size","value":"12"}]},{"type":"rule","selectors":[".t-14"],"declarations":[{"type":"declaration","property":"font-size","value":"14"}]},{"type":"rule","selectors":[".t-15"],"declarations":[{"type":"declaration","property":"font-size","value":"15"}]},{"type":"rule","selectors":[".t-16"],"declarations":[{"type":"declaration","property":"font-size","value":"16"}]},{"type":"rule","selectors":[".t-17"],"declarations":[{"type":"declaration","property":"font-size","value":"17"}]},{"type":"rule","selectors":[".t-18"],"declarations":[{"type":"declaration","property":"font-size","value":"18"}]},{"type":"rule","selectors":[".t-19"],"declarations":[{"type":"declaration","property":"font-size","value":"19"}]},{"type":"rule","selectors":[".t-20"],"declarations":[{"type":"declaration","property":"font-size","value":"20"}]},{"type":"rule","selectors":[".t-25"],"declarations":[{"type":"declaration","property":"font-size","value":"25"}]},{"type":"rule","selectors":[".t-30"],"declarations":[{"type":"declaration","property":"font-size","value":"30"}]},{"type":"rule","selectors":[".img-rounded"],"declarations":[{"type":"declaration","property":"border-radius","value":"5"}]},{"type":"rule","selectors":[".img-circle"],"declarations":[{"type":"declaration","property":"border-radius","value":"20"}]},{"type":"rule","selectors":[".img-thumbnail"],"declarations":[{"type":"declaration","property":"border-radius","value":"0"}]},{"type":"rule","selectors":[".invisible"],"declarations":[{"type":"declaration","property":"visibility","value":"collapse"}]},{"type":"rule","selectors":[".pull-left"],"declarations":[{"type":"declaration","property":"horizontal-align","value":"left"}]},{"type":"rule","selectors":[".pull-right"],"declarations":[{"type":"declaration","property":"horizontal-align","value":"right"}]},{"type":"rule","selectors":[".m-x-auto"],"declarations":[{"type":"declaration","property":"horizontal-align","value":"center"}]},{"type":"rule","selectors":[".m-y-auto"],"declarations":[{"type":"declaration","property":"vertical-align","value":"center"}]},{"type":"rule","selectors":[".text-primary"],"declarations":[{"type":"declaration","property":"color","value":"#30bcff"}]},{"type":"rule","selectors":[".text-danger"],"declarations":[{"type":"declaration","property":"color","value":"#d50000"}]},{"type":"rule","selectors":[".text-muted"],"declarations":[{"type":"declaration","property":"color","value":"#9e9e9e"}]},{"type":"rule","selectors":[".bg-primary"],"declarations":[{"type":"declaration","property":"background-color","value":"#30bcff"},{"type":"declaration","property":"color","value":"#fff"}]},{"type":"rule","selectors":[".bg-danger"],"declarations":[{"type":"declaration","property":"background-color","value":"#d50000"},{"type":"declaration","property":"color","value":"#fff"}]},{"type":"rule","selectors":[".action-bar"],"declarations":[{"type":"declaration","property":"background-color","value":"#F8F8F8"},{"type":"declaration","property":"color","value":"#212121"}]},{"type":"rule","selectors":[".action-bar .action-bar-title"],"declarations":[{"type":"declaration","property":"font-weight","value":"bold"},{"type":"declaration","property":"font-size","value":"17"},{"type":"declaration","property":"vertical-align","value":"center"}]},{"type":"rule","selectors":[".action-bar .action-item"],"declarations":[{"type":"declaration","property":"font-weight","value":"normal"}]},{"type":"rule","selectors":[".activity-indicator"],"declarations":[{"type":"declaration","property":"color","value":"#30bcff"},{"type":"declaration","property":"width","value":"30"},{"type":"declaration","property":"height","value":"30"}]},{"type":"rule","selectors":[".btn"],"declarations":[{"type":"declaration","property":"color","value":"#30bcff"},{"type":"declaration","property":"background-color","value":"transparent"},{"type":"declaration","property":"min-height","value":"36"},{"type":"declaration","property":"min-width","value":"64"},{"type":"declaration","property":"padding","value":"10 10 10 10"},{"type":"declaration","property":"font-size","value":"18"},{"type":"declaration","property":"margin","value":"8 16 8 16"}]},{"type":"rule","selectors":[".btn.btn-active:highlighted"],"declarations":[{"type":"declaration","property":"color","value":"#fff"},{"type":"declaration","property":"background-color","value":"#c0ebff"}]},{"type":"rule","selectors":[".btn-primary"],"declarations":[{"type":"declaration","property":"background-color","value":"#30bcff"},{"type":"declaration","property":"border-color","value":"#30bcff"},{"type":"declaration","property":"color","value":"#fff"}]},{"type":"rule","selectors":[".btn-primary.btn-active:highlighted"],"declarations":[{"type":"declaration","property":"background-color","value":"#01a0ec"},{"type":"declaration","property":"border-color","value":"#01a0ec"}]},{"type":"rule","selectors":[".btn-primary.btn-aqua"],"declarations":[{"type":"declaration","property":"background-color","value":"#00caab"}]},{"type":"rule","selectors":[".btn-primary.btn-blue"],"declarations":[{"type":"declaration","property":"background-color","value":"#3d5afe"}]},{"type":"rule","selectors":[".btn-primary.btn-brown"],"declarations":[{"type":"declaration","property":"background-color","value":"#795548"}]},{"type":"rule","selectors":[".btn-primary.btn-forest"],"declarations":[{"type":"declaration","property":"background-color","value":"#006968"}]},{"type":"rule","selectors":[".btn-primary.btn-grey"],"declarations":[{"type":"declaration","property":"background-color","value":"#5c687c"}]},{"type":"rule","selectors":[".btn-primary.btn-lemon"],"declarations":[{"type":"declaration","property":"background-color","value":"#ffea00"},{"type":"declaration","property":"color","value":"#000"}]},{"type":"rule","selectors":[".btn-primary.btn-lime"],"declarations":[{"type":"declaration","property":"background-color","value":"#aee406"},{"type":"declaration","property":"color","value":"#000"}]},{"type":"rule","selectors":[".btn-primary.btn-orange"],"declarations":[{"type":"declaration","property":"background-color","value":"#f57c00"}]},{"type":"rule","selectors":[".btn-primary.btn-purple"],"declarations":[{"type":"declaration","property":"background-color","value":"#8130ff"}]},{"type":"rule","selectors":[".btn-primary.btn-ruby"],"declarations":[{"type":"declaration","property":"background-color","value":"#ff1744"}]},{"type":"rule","selectors":[".btn-primary.btn-sky"],"declarations":[{"type":"declaration","property":"background-color","value":"#30bcff"}]},{"type":"rule","selectors":[".btn-outline"],"declarations":[{"type":"declaration","property":"background-color","value":"transparent"},{"type":"declaration","property":"border-color","value":"#30bcff"},{"type":"declaration","property":"color","value":"#30bcff"}]},{"type":"rule","selectors":[".btn-outline.btn-active:highlighted"],"declarations":[{"type":"declaration","property":"background-color","value":"#c0ebff"}]},{"type":"rule","selectors":[".btn[isEnabled=false]"],"declarations":[{"type":"declaration","property":"color","value":"#a4a4a4"},{"type":"declaration","property":"background-color","value":"#e0e0e0"},{"type":"declaration","property":"border-color","value":"#e0e0e0"}]},{"type":"rule","selectors":[".fa"],"declarations":[{"type":"declaration","property":"font-family","value":"FontAwesome, fontawesome-webfont"}]},{"type":"rule","selectors":[".form .input"],"declarations":[{"type":"declaration","property":"padding","value":"16 8 16 8"},{"type":"declaration","property":"background-color","value":"transparent"}]},{"type":"rule","selectors":[".form .input.input-border"],"declarations":[{"type":"declaration","property":"border-width","value":"1"},{"type":"declaration","property":"border-color","value":"#e0e0e0"},{"type":"declaration","property":"border-radius","value":"2"},{"type":"declaration","property":"padding","value":"16"}]},{"type":"rule","selectors":[".form .input.input-rounded"],"declarations":[{"type":"declaration","property":"border-width","value":"1"},{"type":"declaration","property":"border-color","value":"#e0e0e0"},{"type":"declaration","property":"border-radius","value":"28"},{"type":"declaration","property":"padding","value":"16"}]},{"type":"rule","selectors":[".form .input[isEnabled='false']"],"declarations":[{"type":"declaration","property":"background-color","value":"#fafafa"}]},{"type":"rule","selectors":[".form .input-field"],"declarations":[{"type":"declaration","property":"margin","value":"8"}]},{"type":"rule","selectors":[".form .input-field .label"],"declarations":[{"type":"declaration","property":"font-size","value":"12"},{"type":"declaration","property":"color","value":"#bababa"}]},{"type":"rule","selectors":[".form .input-field .input"],"declarations":[{"type":"declaration","property":"padding","value":"0"},{"type":"declaration","property":"margin","value":"0 0 8 0"}]},{"type":"rule","selectors":[".form .input-field .hr-light.active",".form .input-field .hr-dark.active"],"declarations":[{"type":"declaration","property":"background-color","value":"#30bcff"}]},{"type":"rule","selectors":[".form .input-field.input-sides .label"],"declarations":[{"type":"declaration","property":"font-size","value":"18"},{"type":"declaration","property":"margin","value":"0 0 8 0"}]},{"type":"rule","selectors":[".h1",".h2",".h3",".h4",".h5",".h6"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"4"},{"type":"declaration","property":"font-weight","value":"normal"},{"type":"declaration","property":"color","value":"#212121"}]},{"type":"rule","selectors":[".body",".body2",".footnote"],"declarations":[{"type":"declaration","property":"font-weight","value":"normal"},{"type":"declaration","property":"color","value":"#757575"}]},{"type":"rule","selectors":[".h1"],"declarations":[{"type":"declaration","property":"font-size","value":"32"}]},{"type":"rule","selectors":[".h2"],"declarations":[{"type":"declaration","property":"font-size","value":"22"}]},{"type":"rule","selectors":[".h3"],"declarations":[{"type":"declaration","property":"font-size","value":"15"}]},{"type":"rule","selectors":[".h4"],"declarations":[{"type":"declaration","property":"font-size","value":"12"}]},{"type":"rule","selectors":[".h5"],"declarations":[{"type":"declaration","property":"font-size","value":"11"}]},{"type":"rule","selectors":[".h6"],"declarations":[{"type":"declaration","property":"font-size","value":"10"}]},{"type":"rule","selectors":[".body"],"declarations":[{"type":"declaration","property":"font-size","value":"14"}]},{"type":"rule","selectors":[".body2"],"declarations":[{"type":"declaration","property":"font-size","value":"17"}]},{"type":"rule","selectors":[".footnote"],"declarations":[{"type":"declaration","property":"font-size","value":"13"}]},{"type":"rule","selectors":[".list-group .list-group-item"],"declarations":[{"type":"declaration","property":"color","value":"#212121"},{"type":"declaration","property":"font-size","value":"16"},{"type":"declaration","property":"margin","value":"0"},{"type":"declaration","property":"padding","value":"16"}]},{"type":"rule","selectors":[".list-group .list-group-item Label"],"declarations":[{"type":"declaration","property":"vertical-align","value":"center"}]},{"type":"rule","selectors":[".list-group .list-group-item .thumb"],"declarations":[{"type":"declaration","property":"stretch","value":"fill"},{"type":"declaration","property":"width","value":"40"},{"type":"declaration","property":"height","value":"40"},{"type":"declaration","property":"margin-right","value":"16"}]},{"type":"rule","selectors":[".list-group .list-group-item.active"],"declarations":[{"type":"declaration","property":"background-color","value":"#e0e0e0"}]},{"type":"rule","selectors":[".list-group .list-group-item .list-group-item-text"],"declarations":[{"type":"declaration","property":"color","value":"#757575"},{"type":"declaration","property":"font-size","value":"14"}]},{"type":"rule","selectors":[".page"],"declarations":[{"type":"declaration","property":"background-color","value":"#fff"}]},{"type":"rule","selectors":[".progress"],"declarations":[{"type":"declaration","property":"color","value":"#30bcff"},{"type":"declaration","property":"background-color","value":"#bababa"}]},{"type":"rule","selectors":[".segmented-bar"],"declarations":[{"type":"declaration","property":"font-size","value":"13"},{"type":"declaration","property":"background-color","value":"#fff"},{"type":"declaration","property":"color","value":"#212121"},{"type":"declaration","property":"selected-background-color","value":"#30bcff"}]},{"type":"rule","selectors":[".sidedrawer-left",".sidedrawer-center"],"declarations":[{"type":"declaration","property":"background-color","value":"#fafafa"}]},{"type":"rule","selectors":[".sidedrawer-header"],"declarations":[{"type":"declaration","property":"background-color","value":"#fafafa"},{"type":"declaration","property":"height","value":"148"},{"type":"declaration","property":"width","value":"100%"}]},{"type":"rule","selectors":[".sidedrawer-left .sidedrawer-header"],"declarations":[{"type":"declaration","property":"padding","value":"16 16 0 16"}]},{"type":"rule","selectors":[".sidedrawer-center .sidedrawer-header"],"declarations":[{"type":"declaration","property":"padding","value":"20 15 0 15"}]},{"type":"rule","selectors":[".sidedrawer-header-image"],"declarations":[{"type":"declaration","property":"background-color","value":"#e0e0e0"}]},{"type":"rule","selectors":[".sidedrawer-left .sidedrawer-header-image"],"declarations":[{"type":"declaration","property":"height","value":"64"},{"type":"declaration","property":"width","value":"64"},{"type":"declaration","property":"border-radius","value":"32"},{"type":"declaration","property":"horizontal-align","value":"left"},{"type":"declaration","property":"margin-bottom","value":"36"}]},{"type":"rule","selectors":[".sidedrawer-center .sidedrawer-header-image"],"declarations":[{"type":"declaration","property":"height","value":"74"},{"type":"declaration","property":"width","value":"74"},{"type":"declaration","property":"border-radius","value":"37"},{"type":"declaration","property":"horizontal-align","value":"center"},{"type":"declaration","property":"margin-bottom","value":"24"}]},{"type":"rule","selectors":[".sidedrawer-header-brand"],"declarations":[{"type":"declaration","property":"color","value":"#737373"}]},{"type":"rule","selectors":[".sidedrawer-left .sidedrawer-header-brand"],"declarations":[{"type":"declaration","property":"horizontal-align","value":"left"},{"type":"declaration","property":"font-size","value":"14"}]},{"type":"rule","selectors":[".sidedrawer-center .sidedrawer-header-brand"],"declarations":[{"type":"declaration","property":"horizontal-align","value":"center"},{"type":"declaration","property":"font-size","value":"15"}]},{"type":"rule","selectors":[".sidedrawer-list-item"],"declarations":[{"type":"declaration","property":"height","value":"48"},{"type":"declaration","property":"horizontal-align","value":"left"},{"type":"declaration","property":"width","value":"100%"},{"type":"declaration","property":"orientation","value":"horizontal"}]},{"type":"rule","selectors":[".sidedrawer-list-item .sidedrawer-list-item-icon"],"declarations":[{"type":"declaration","property":"width","value":"24"},{"type":"declaration","property":"text-align","value":"center"},{"type":"declaration","property":"font-size","value":"20"},{"type":"declaration","property":"height","value":"48"},{"type":"declaration","property":"vertical-align","value":"center"}]},{"type":"rule","selectors":[".sidedrawer-list-item.active"],"declarations":[{"type":"declaration","property":"color","value":"#fff"},{"type":"declaration","property":"background-color","value":"#30bcff"}]},{"type":"rule","selectors":[".sidedrawer-list-item.active .sidedrawer-list-item-icon"],"declarations":[{"type":"declaration","property":"color","value":"#fff"}]},{"type":"rule","selectors":[".sidedrawer-left .sidedrawer-list-item-icon"],"declarations":[{"type":"declaration","property":"margin","value":"0 16 0 16"}]},{"type":"rule","selectors":[".sidedrawer-center .sidedrawer-list-item-icon"],"declarations":[{"type":"declaration","property":"margin","value":"0 0 0 15"}]},{"type":"rule","selectors":[".sidedrawer-list-item-text"],"declarations":[{"type":"declaration","property":"horizontal-align","value":"left"},{"type":"declaration","property":"text-align","value":"left"},{"type":"declaration","property":"font-size","value":"15"},{"type":"declaration","property":"background-color","value":"transparent"},{"type":"declaration","property":"border-width","value":"0.1"},{"type":"declaration","property":"width","value":"80%"},{"type":"declaration","property":"vertical-align","value":"center"}]},{"type":"rule","selectors":[".sidedrawer-left .sidedrawer-list-item-text"],"declarations":[{"type":"declaration","property":"padding-left","value":"16"}]},{"type":"rule","selectors":[".sidedrawer-center .sidedrawer-list-item-text"],"declarations":[{"type":"declaration","property":"padding-left","value":"15"}]},{"type":"rule","selectors":[".slider"],"declarations":[{"type":"declaration","property":"background-color","value":"#30bcff"}]},{"type":"rule","selectors":[".slider[isEnabled=false]"],"declarations":[{"type":"declaration","property":"background-color","value":"#e0e0e0"},{"type":"declaration","property":"color","value":"#e0e0e0"}]},{"type":"rule","selectors":[".switch[checked=true]"],"declarations":[{"type":"declaration","property":"background-color","value":"#30bcff"},{"type":"declaration","property":"color","value":"#30bcff"}]},{"type":"rule","selectors":[".switch[checked=true][isEnabled=false]"],"declarations":[{"type":"declaration","property":"background-color","value":"#e0e0e0"},{"type":"declaration","property":"color","value":"#fff"}]},{"type":"rule","selectors":[".switch[isEnabled=false]"],"declarations":[{"type":"declaration","property":"background-color","value":"#e0e0e0"},{"type":"declaration","property":"color","value":"#e0e0e0"}]},{"type":"rule","selectors":[".tab-view"],"declarations":[{"type":"declaration","property":"selected-color","value":"#30bcff"},{"type":"declaration","property":"tabs-background-color","value":"#fff"}]},{"type":"rule","selectors":[".tab-view .tab-view-item"],"declarations":[{"type":"declaration","property":"background-color","value":"#fff"},{"type":"declaration","property":"tabs-background-color","value":"#fff"}]},{"type":"rule","selectors":["#login-background"],"declarations":[{"type":"declaration","property":"margin-top","value":"-20"},{"type":"declaration","property":"background-size","value":"cover"},{"type":"declaration","property":"background-position","value":"center"}]},{"type":"rule","selectors":[".login-wrap"],"declarations":[{"type":"declaration","property":"padding","value":"0 40"}]},{"type":"rule","selectors":[".logo-wrap"],"declarations":[{"type":"declaration","property":"margin","value":"60 0 10 0"},{"type":"declaration","property":"padding","value":"20 0"}]},{"type":"rule","selectors":[".logo-wrap .login-logo"],"declarations":[{"type":"declaration","property":"text-align","value":"center"},{"type":"declaration","property":"font-size","value":"30"},{"type":"declaration","property":"font-weight","value":"bold"},{"type":"declaration","property":"margin-bottom","value":"10"},{"type":"declaration","property":"opacity","value":"1"},{"type":"declaration","property":"color","value":"#212121"},{"type":"declaration","property":"opacity","value":".9"}]},{"type":"rule","selectors":[".logo-wrap .login-logo-sub"],"declarations":[{"type":"declaration","property":"color","value":"#212121"},{"type":"declaration","property":"opacity","value":".8"},{"type":"declaration","property":"text-align","value":"center"}]},{"type":"rule","selectors":[".login-wrapper"],"declarations":[{"type":"declaration","property":"padding","value":"20"},{"type":"declaration","property":"background-color","value":"#fff"},{"type":"declaration","property":"border-radius","value":"3"}]},{"type":"rule","selectors":[".login-wrapper TextField"],"declarations":[{"type":"declaration","property":"padding","value":"10 10"},{"type":"declaration","property":"margin","value":"10 0 0 0"}]},{"type":"rule","selectors":[".go-back"],"declarations":[{"type":"declaration","property":"font-size","value":"14"},{"type":"declaration","property":"text-align","value":"center"},{"type":"declaration","property":"color","value":"#212121"},{"type":"declaration","property":"margin-top","value":"10"}]},{"type":"rule","selectors":[".action-bar .action-bar-title"],"declarations":[{"type":"declaration","property":"font-weight","value":"500"},{"type":"declaration","property":"font-size","value":"20"}]},{"type":"rule","selectors":[".action-bar .action-item"],"declarations":[{"type":"declaration","property":"android-elevation","value":"0"},{"type":"declaration","property":"background-color","value":"rgba(255,0,0,0)"},{"type":"declaration","property":"border-color","value":"rgba(255,0,0,0)"},{"type":"declaration","property":"border-width","value":"1"}]},{"type":"rule","selectors":[".btn"],"declarations":[{"type":"declaration","property":"font-family","value":"'Roboto Medium'"},{"type":"declaration","property":"font-size","value":"14"}]},{"type":"rule","selectors":[".btn-primary"],"declarations":[{"type":"declaration","property":"border-color","value":"rgba(255,0,0,0)"}]},{"type":"rule","selectors":[".btn-outline"],"declarations":[{"type":"declaration","property":"android-elevation","value":"0"},{"type":"declaration","property":"background-color","value":"rgba(255,0,0,0)"},{"type":"declaration","property":"border-width","value":"1"},{"type":"declaration","property":"border-color","value":"#30bcff"},{"type":"declaration","property":"height","value":"36"},{"type":"declaration","property":"padding","value":"0"}]},{"type":"rule","selectors":[".btn-rounded-sm"],"declarations":[{"type":"declaration","property":"border-radius","value":"2"},{"type":"declaration","property":"height","value":"36"},{"type":"declaration","property":"padding","value":"0"}]},{"type":"rule","selectors":[".btn-rounded-lg"],"declarations":[{"type":"declaration","property":"border-radius","value":"40"},{"type":"declaration","property":"height","value":"36"},{"type":"declaration","property":"padding","value":"0"}]},{"type":"rule","selectors":[".form"],"declarations":[{"type":"declaration","property":"font-family","value":"'Roboto Regular'"}]},{"type":"rule","selectors":[".form .input"],"declarations":[{"type":"declaration","property":"font-size","value":"16"}]},{"type":"rule","selectors":[".h1"],"declarations":[{"type":"declaration","property":"font-size","value":"34"}]},{"type":"rule","selectors":[".h2"],"declarations":[{"type":"declaration","property":"font-size","value":"24"}]},{"type":"rule","selectors":[".h3"],"declarations":[{"type":"declaration","property":"font-size","value":"16"}]},{"type":"rule","selectors":[".h5"],"declarations":[{"type":"declaration","property":"font-size","value":"11"},{"type":"declaration","property":"font-weight","value":"bold"}]},{"type":"rule","selectors":[".body2"],"declarations":[{"type":"declaration","property":"font-size","value":"14"},{"type":"declaration","property":"font-weight","value":"500"}]},{"type":"rule","selectors":[".sidedrawer-list-item-icon"],"declarations":[{"type":"declaration","property":"margin","value":"0 16 0 16"},{"type":"declaration","property":"padding-top","value":"14"}]},{"type":"rule","selectors":[".sidedrawer-list-item-icon",".sidedrawer-list-item"],"declarations":[{"type":"declaration","property":"color","value":"#737373"}]},{"type":"rule","selectors":[".sidedrawer-list-item"],"declarations":[{"type":"declaration","property":"font-family","value":"'Roboto Medium'"},{"type":"declaration","property":"font-size","value":"14"}]},{"type":"rule","selectors":[".slider"],"declarations":[{"type":"declaration","property":"color","value":"#30bcff"},{"type":"declaration","property":"margin","value":"20 16"}]},{"type":"rule","selectors":[".switch"],"declarations":[{"type":"declaration","property":"margin","value":"14 16"},{"type":"declaration","property":"color","value":"#e0e0e0"},{"type":"declaration","property":"background-color","value":"#e0e0e0"}]},{"type":"rule","selectors":[".switch[checked=true]"],"declarations":[{"type":"declaration","property":"color","value":"#30bcff"}]}],"parsingErrors":[]}};

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/hmr/hmr-update.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var hot = __webpack_require__("../node_modules/nativescript-dev-webpack/hot.js");

var file_system_1 = __webpack_require__("tns-core-modules/file-system");

function hmrUpdate() {
  var currentAppFolder = file_system_1.knownFolders.currentApp();

  var latestHash = __webpack_require__["h"]();

  return hot(latestHash, filename => {
    var fullFilePath = file_system_1.path.join(currentAppFolder.path, filename);
    return file_system_1.File.exists(fullFilePath) ? currentAppFolder.getFile(filename) : null;
  });
}

exports.hmrUpdate = hmrUpdate;

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/hmr/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var hmr_update_1 = __webpack_require__("../node_modules/nativescript-dev-webpack/hmr/hmr-update.js");

exports.hmrUpdate = hmr_update_1.hmrUpdate;

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/hot.js":
/***/ (function(module, exports, __webpack_require__) {

var hmrPrefix = 'HMR:';
var log = {
  info: message => console.info("".concat(hmrPrefix, " ").concat(message)),
  warn: message => console.warn("".concat(hmrPrefix, " ").concat(message)),
  error: message => console.error("".concat(hmrPrefix, " ").concat(message))
};
var refresh = 'Application needs to be restarted in order to apply the changes.';
var hotOptions = {
  ignoreUnaccepted: false,
  ignoreDeclined: false,
  ignoreErrored: false,

  onUnaccepted(data) {
    var chain = [].concat(data.chain);
    var last = chain[chain.length - 1];

    if (last === 0) {
      chain.pop();
    }

    log.warn("Ignored an update to unaccepted module: ");
    chain.forEach(mod => log.warn("         \u27AD ".concat(mod)));
  },

  onDeclined(data) {
    log.warn("Ignored an update to declined module:");
    data.chain.forEach(mod => log.warn("         \u27AD ".concat(mod)));
  },

  onErrored(data) {
    log.warn("Ignored an error while updating module ".concat(data.moduleId, " <").concat(data.type, ">"));
    log.warn(data.error);
  }

};
var nextHash;
var currentHash;

function upToDate() {
  return nextHash.indexOf(__webpack_require__.h()) >= 0;
}

function result(modules, appliedModules) {
  var unaccepted = modules.filter(moduleId => appliedModules && appliedModules.indexOf(moduleId) < 0);

  if (unaccepted.length > 0) {
    log.warn('The following modules could not be updated:');

    for (var moduleId of unaccepted) {
      log.warn("          \u29BB ".concat(moduleId));
    }
  }

  if (!(appliedModules || []).length) {
    log.info('No Modules Updated.');
  } else {
    log.info('The following modules were updated:');

    for (var _moduleId of appliedModules) {
      log.info("         \u21BB ".concat(_moduleId));
    }

    var numberIds = appliedModules.every(moduleId => typeof moduleId === 'number');

    if (numberIds) {
      log.info('Please consider using the NamedModulesPlugin for module names.');
    }
  }
}

function check(options) {
  return module.hot.check().then(modules => {
    if (!modules) {
      log.warn("Cannot find update. ".concat(refresh));
      return null;
    }

    return module.hot.apply(hotOptions).then(appliedModules => {
      var nextCheck;

      if (!upToDate()) {
        nextCheck = check(options);
      }

      result(modules, appliedModules);

      if (upToDate()) {
        // Do not modify message - CLI depends on this exact content to determine hmr operation status.
        log.info("Successfully applied update with hmr hash ".concat(currentHash, ". App is up to date."));
      }

      return nextCheck || null;
    }).catch(err => {
      var status = module.hot.status();

      if (['abort', 'fail'].indexOf(status) >= 0) {
        // Do not modify message - CLI depends on this exact content to determine hmr operation status.
        log.error("Cannot apply update with hmr hash ".concat(currentHash, "."));
        log.error(err.message || err.stack);
      } else {
        log.error("Update failed: ".concat(err.message || err.stack));
      }
    });
  }).catch(err => {
    var status = module.hot.status();

    if (['abort', 'fail'].indexOf(status) >= 0) {
      log.error("Cannot check for update. ".concat(refresh));
      log.error(err.message || err.stack);
    } else {
      log.error("Update check failed: ".concat(err.message || err.stack));
    }
  });
}

if (true) {
  log.info('Hot Module Replacement Enabled. Waiting for signal.');
} else {}

function update(latestHash, options) {
  nextHash = latestHash;

  if (!upToDate()) {
    var status = module.hot.status();

    if (status === 'idle') {
      //Do not modify message - CLI depends on this exact content to determine hmr operation status.
      log.info("Checking for updates to the bundle with hmr hash ".concat(currentHash, "."));
      return check(options);
    } else if (['abort', 'fail'].indexOf(status) >= 0) {
      log.warn("Cannot apply update. A previous update ".concat(status, "ed. ").concat(refresh));
    }
  }
}

;

function getNextHash(hash, getFileContent) {
  var file = getFileContent("".concat(hash, ".hot-update.json"));

  if (!file) {
    return Promise.resolve(hash);
  }

  return file.readText().then(hotUpdateContent => {
    if (hotUpdateContent) {
      var manifest = JSON.parse(hotUpdateContent);
      var newHash = manifest.h;
      return getNextHash(newHash, getFileContent);
    } else {
      return Promise.resolve(hash);
    }
  }).catch(error => Promise.reject(error));
}

module.exports = function checkState(initialHash, getFileContent) {
  currentHash = initialHash;
  return getNextHash(initialHash, getFileContent).then(nextHash => {
    if (nextHash != initialHash) {
      return update(nextHash, {});
    }
  });
};

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/load-application-css-regular.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var loadCss = __webpack_require__("../node_modules/nativescript-dev-webpack/load-application-css.js");

module.exports = function () {
  loadCss(function () {
    var appCssContext = __webpack_require__("./ sync ^\\.\\/app\\.(css|scss|less|sass)$");

    global.registerWebpackModules(appCssContext);
  });
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/load-application-css.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = function (loadModuleFn) {
  var application = __webpack_require__("tns-core-modules/application");

  __webpack_require__("tns-core-modules/ui/styling/style-scope");

  loadModuleFn();
  application.loadAppCss();
};

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js":
/***/ (function(module, exports) {

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "../node_modules/nativescript-vue/dist/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * NativeScript-Vue v2.4.0
 * (Using Vue v2.6.10)
 * (c) 2017-2019 rigor789
 * Released under the MIT license.
 */


global.process = global.process || {};
global.process.env = global.process.env || {};

var application = __webpack_require__("tns-core-modules/application");

__webpack_require__("tns-core-modules/ui/frame");

var arrayMap = function arrayMap(xs, f) {
  if (xs.map) {
    return xs.map(f);
  }

  var res = [];

  for (var i = 0; i < xs.length; i++) {
    var x = xs[i];

    if (hasOwn.call(xs, i)) {
      res.push(f(x, i, xs));
    }
  }

  return res;
};

var hasOwn = Object.prototype.hasOwnProperty;
var indexOf = [].indexOf;

var indexof = function indexof(arr, obj) {
  if (indexOf) {
    return arr.indexOf(obj);
  }

  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) {
      return i;
    }
  }

  return -1;
};

var isarray = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

var hasOwn$1 = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

var foreach = function forEach(obj, fn, ctx) {
  if (toString.call(fn) !== '[object Function]') {
    throw new TypeError('iterator must be a function');
  }

  var l = obj.length;

  if (l === +l) {
    for (var i = 0; i < l; i++) {
      fn.call(ctx, obj[i], i, obj);
    }
  } else {
    for (var k in obj) {
      if (hasOwn$1.call(obj, k)) {
        fn.call(ctx, obj[k], k, obj);
      }
    }
  }
};

var hasOwn$2 = Object.prototype.hasOwnProperty;

var arrayReduce = function arrayReduce(xs, f, acc) {
  var hasAcc = arguments.length >= 3;

  if (hasAcc && xs.reduce) {
    return xs.reduce(f, acc);
  }

  if (xs.reduce) {
    return xs.reduce(f);
  }

  for (var i = 0; i < xs.length; i++) {
    if (!hasOwn$2.call(xs, i)) {
      continue;
    }

    if (!hasAcc) {
      acc = xs[i];
      hasAcc = true;
      continue;
    }

    acc = f(acc, xs[i], i);
  }

  return acc;
};

var hasOwn$3 = Object.prototype.hasOwnProperty;
var toString$1 = Object.prototype.toString;

var isFunction = function isFunction(fn) {
  return typeof fn === 'function' && !(fn instanceof RegExp) || toString$1.call(fn) === '[object Function]';
};

var foreach$1 = function forEach(obj, fn) {
  if (!isFunction(fn)) {
    throw new TypeError('iterator must be a function');
  }

  var i,
      k,
      isString = typeof obj === 'string',
      l = obj.length,
      context = arguments.length > 2 ? arguments[2] : null;

  if (l === +l) {
    for (i = 0; i < l; i++) {
      if (context === null) {
        fn(isString ? obj.charAt(i) : obj[i], i, obj);
      } else {
        fn.call(context, isString ? obj.charAt(i) : obj[i], i, obj);
      }
    }
  } else {
    for (k in obj) {
      if (hasOwn$3.call(obj, k)) {
        if (context === null) {
          fn(obj[k], k, obj);
        } else {
          fn.call(context, obj[k], k, obj);
        }
      }
    }
  }
};

var toString$2 = Object.prototype.toString;

var isArguments = function isArguments(value) {
  var str = toString$2.call(value);
  var isArguments = str === '[object Arguments]';

  if (!isArguments) {
    isArguments = str !== '[object Array]' && value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && toString$2.call(value.callee) === '[object Function]';
  }

  return isArguments;
}; // modified from https://github.com/es-shims/es5-shim


var has = Object.prototype.hasOwnProperty,
    toString$3 = Object.prototype.toString,
    hasDontEnumBug = !{
  'toString': null
}.propertyIsEnumerable('toString'),
    hasProtoEnumBug = function () {}.propertyIsEnumerable('prototype'),
    dontEnums = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"];

var keysShim = function keys(object) {
  var isObject = object !== null && typeof object === 'object',
      isFunction = toString$3.call(object) === '[object Function]',
      isArguments$1 = isArguments(object),
      theKeys = [];

  if (!isObject && !isFunction && !isArguments$1) {
    throw new TypeError("Object.keys called on a non-object");
  }

  if (isArguments$1) {
    foreach$1(object, function (value, index) {
      theKeys.push(index);
    });
  } else {
    var name,
        skipProto = hasProtoEnumBug && isFunction;

    for (name in object) {
      if (!(skipProto && name === 'prototype') && has.call(object, name)) {
        theKeys.push(name);
      }
    }
  }

  if (hasDontEnumBug) {
    var ctor = object.constructor,
        skipConstructor = ctor && ctor.prototype === object;
    foreach$1(dontEnums, function (dontEnum) {
      if (!(skipConstructor && dontEnum === 'constructor') && has.call(object, dontEnum)) {
        theKeys.push(dontEnum);
      }
    });
  }

  return theKeys;
};

keysShim.shim = function shimObjectKeys() {
  if (!Object.keys) {
    Object.keys = keysShim;
  }

  return Object.keys || keysShim;
};

var objectKeys = keysShim;
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
  return module = {
    exports: {}
  }, fn(module, module.exports), module.exports;
}

var json3 = createCommonjsModule(function (module, exports) {
  (function (root) {
    // Detect the `define` function exposed by asynchronous module loaders. The
    // strict `define` check is necessary for compatibility with `r.js`.
    var isLoader =  false && false; // Use the `global` object exposed by Node (including Browserify via
    // `insert-module-globals`), Narwhal, and Ringo as the default context.
    // Rhino exports a `global` function instead.

    var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal;

    if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal)) {
      root = freeGlobal;
    } // Public: Initializes JSON 3 using the given `context` object, attaching the
    // `stringify` and `parse` functions to the specified `exports` object.


    function runInContext(context, exports) {
      context || (context = root["Object"]());
      exports || (exports = root["Object"]()); // Native constructor aliases.

      var Number = context["Number"] || root["Number"],
          String = context["String"] || root["String"],
          Object = context["Object"] || root["Object"],
          Date = context["Date"] || root["Date"],
          SyntaxError = context["SyntaxError"] || root["SyntaxError"],
          TypeError = context["TypeError"] || root["TypeError"],
          Math = context["Math"] || root["Math"],
          nativeJSON = context["JSON"] || root["JSON"]; // Delegate to the native `stringify` and `parse` implementations.

      if (typeof nativeJSON == "object" && nativeJSON) {
        exports.stringify = nativeJSON.stringify;
        exports.parse = nativeJSON.parse;
      } // Convenience aliases.


      var objectProto = Object.prototype,
          getClass = objectProto.toString,
          _isProperty,
          _forEach,
          undef; // Test the `Date#getUTC*` methods. Based on work by @Yaffle.


      var isExtended = new Date(-3509827334573292);

      try {
        // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
        // results for certain dates in Opera >= 10.53.
        isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 && // Safari < 2.0.2 stores the internal millisecond time value correctly,
        // but clips the values returned by the date methods to the range of
        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
      } catch (exception) {} // Internal: Determines whether the native `JSON.stringify` and `parse`
      // implementations are spec-compliant. Based on work by Ken Snyder.


      function has(name) {
        if (has[name] !== undef) {
          // Return cached feature test result.
          return has[name];
        }

        var isSupported;

        if (name == "bug-string-char-index") {
          // IE <= 7 doesn't support accessing string characters using square
          // bracket notation. IE 8 only supports this for primitives.
          isSupported = "a"[0] != "a";
        } else if (name == "json") {
          // Indicates whether both `JSON.stringify` and `JSON.parse` are
          // supported.
          isSupported = has("json-stringify") && has("json-parse");
        } else {
          var value,
              serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}'; // Test `JSON.stringify`.

          if (name == "json-stringify") {
            var stringify = exports.stringify,
                stringifySupported = typeof stringify == "function" && isExtended;

            if (stringifySupported) {
              // A test function object with a custom `toJSON` method.
              (value = function value() {
                return 1;
              }).toJSON = value;

              try {
                stringifySupported = // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" && // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" && stringify(new String()) == '""' && // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undef && // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undef) === undef && // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undef && // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" && stringify([value]) == "[1]" && // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undef]) == "[null]" && // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" && // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undef, getClass, null]) == "[null,null,null]" && // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({
                  "a": [value, true, false, null, "\x00\b\n\f\r\t"]
                }) == serialized && // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" && stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" && // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' && // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' && // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' && // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
              } catch (exception) {
                stringifySupported = false;
              }
            }

            isSupported = stringifySupported;
          } // Test `JSON.parse`.


          if (name == "json-parse") {
            var parse = exports.parse;

            if (typeof parse == "function") {
              try {
                // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
                // Conforming implementations should also coerce the initial argument to
                // a string prior to parsing.
                if (parse("0") === 0 && !parse(false)) {
                  // Simple parsing test.
                  value = parse(serialized);
                  var parseSupported = value["a"].length == 5 && value["a"][0] === 1;

                  if (parseSupported) {
                    try {
                      // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                      parseSupported = !parse('"\t"');
                    } catch (exception) {}

                    if (parseSupported) {
                      try {
                        // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                        // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                        // certain octal literals.
                        parseSupported = parse("01") !== 1;
                      } catch (exception) {}
                    }

                    if (parseSupported) {
                      try {
                        // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                        // points. These environments, along with FF 3.1b1 and 2,
                        // also allow trailing commas in JSON objects and arrays.
                        parseSupported = parse("1.") !== 1;
                      } catch (exception) {}
                    }
                  }
                }
              } catch (exception) {
                parseSupported = false;
              }
            }

            isSupported = parseSupported;
          }
        }

        return has[name] = !!isSupported;
      }

      if (!has("json")) {
        // Common `[[Class]]` name aliases.
        var functionClass = "[object Function]",
            dateClass = "[object Date]",
            numberClass = "[object Number]",
            stringClass = "[object String]",
            arrayClass = "[object Array]",
            booleanClass = "[object Boolean]"; // Detect incomplete support for accessing string characters by index.

        var charIndexBuggy = has("bug-string-char-index"); // Define additional utility methods if the `Date` methods are buggy.

        if (!isExtended) {
          var floor = Math.floor; // A mapping between the months of the year and the number of days between
          // January 1st and the first of the respective month.

          var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]; // Internal: Calculates the number of days between the Unix epoch and the
          // first day of the given month.

          var getDay = function getDay(year, month) {
            return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
          };
        } // Internal: Determines if a property is a direct property of the given
        // object. Delegates to the native `Object#hasOwnProperty` method.


        if (!(_isProperty = objectProto.hasOwnProperty)) {
          _isProperty = function isProperty(property) {
            var members = {},
                constructor;

            if ((members.__proto__ = null, members.__proto__ = {
              // The *proto* property cannot be set multiple times in recent
              // versions of Firefox and SeaMonkey.
              "toString": 1
            }, members).toString != getClass) {
              // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
              // supports the mutable *proto* property.
              _isProperty = function isProperty(property) {
                // Capture and break the objectgs prototype chain (see section 8.6.2
                // of the ES 5.1 spec). The parenthesized expression prevents an
                // unsafe transformation by the Closure Compiler.
                var original = this.__proto__,
                    result = property in (this.__proto__ = null, this); // Restore the original prototype chain.

                this.__proto__ = original;
                return result;
              };
            } else {
              // Capture a reference to the top-level `Object` constructor.
              constructor = members.constructor; // Use the `constructor` property to simulate `Object#hasOwnProperty` in
              // other environments.

              _isProperty = function isProperty(property) {
                var parent = (this.constructor || constructor).prototype;
                return property in this && !(property in parent && this[property] === parent[property]);
              };
            }

            members = null;
            return _isProperty.call(this, property);
          };
        } // Internal: A set of primitive types used by `isHostType`.


        var PrimitiveTypes = {
          "boolean": 1,
          "number": 1,
          "string": 1,
          "undefined": 1
        }; // Internal: Determines if the given object `property` value is a
        // non-primitive.

        var isHostType = function isHostType(object, property) {
          var type = typeof object[property];
          return type == "object" ? !!object[property] : !PrimitiveTypes[type];
        }; // Internal: Normalizes the `for...in` iteration algorithm across
        // environments. Each enumerated key is yielded to a `callback` function.


        _forEach = function forEach(object, callback) {
          var size = 0,
              Properties,
              members,
              property; // Tests for bugs in the current environment's `for...in` algorithm. The
          // `valueOf` property inherits the non-enumerable flag from
          // `Object.prototype` in older versions of IE, Netscape, and Mozilla.

          (Properties = function Properties() {
            this.valueOf = 0;
          }).prototype.valueOf = 0; // Iterate over a new instance of the `Properties` class.

          members = new Properties();

          for (property in members) {
            // Ignore all properties inherited from `Object.prototype`.
            if (_isProperty.call(members, property)) {
              size++;
            }
          }

          Properties = members = null; // Normalize the iteration algorithm.

          if (!size) {
            // A list of non-enumerable properties inherited from `Object.prototype`.
            members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"]; // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
            // properties.

            _forEach = function forEach(object, callback) {
              var isFunction = getClass.call(object) == functionClass,
                  property,
                  length;
              var hasProperty = !isFunction && typeof object.constructor != "function" && isHostType(object, "hasOwnProperty") ? object.hasOwnProperty : _isProperty;

              for (property in object) {
                // Gecko <= 1.0 enumerates the `prototype` property of functions under
                // certain conditions; IE does not.
                if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                  callback(property);
                }
              } // Manually invoke the callback for each non-enumerable property.


              for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property)) {}
            };
          } else if (size == 2) {
            // Safari <= 2.0.4 enumerates shadowed properties twice.
            _forEach = function forEach(object, callback) {
              // Create a set of iterated properties.
              var members = {},
                  isFunction = getClass.call(object) == functionClass,
                  property;

              for (property in object) {
                // Store each property name to prevent double enumeration. The
                // `prototype` property of functions is not enumerated due to cross-
                // environment inconsistencies.
                if (!(isFunction && property == "prototype") && !_isProperty.call(members, property) && (members[property] = 1) && _isProperty.call(object, property)) {
                  callback(property);
                }
              }
            };
          } else {
            // No bugs detected; use the standard `for...in` algorithm.
            _forEach = function forEach(object, callback) {
              var isFunction = getClass.call(object) == functionClass,
                  property,
                  isConstructor;

              for (property in object) {
                if (!(isFunction && property == "prototype") && _isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                  callback(property);
                }
              } // Manually invoke the callback for the `constructor` property due to
              // cross-environment inconsistencies.


              if (isConstructor || _isProperty.call(object, property = "constructor")) {
                callback(property);
              }
            };
          }

          return _forEach(object, callback);
        }; // Public: Serializes a JavaScript `value` as a JSON string. The optional
        // `filter` argument may specify either a function that alters how object and
        // array members are serialized, or an array of strings and numbers that
        // indicates which properties should be serialized. The optional `width`
        // argument may be either a string or number that specifies the indentation
        // level of the output.


        if (!has("json-stringify")) {
          // Internal: A map of control characters and their escaped equivalents.
          var Escapes = {
            92: "\\\\",
            34: '\\"',
            8: "\\b",
            12: "\\f",
            10: "\\n",
            13: "\\r",
            9: "\\t"
          }; // Internal: Converts `value` into a zero-padded string such that its
          // length is at least equal to `width`. The `width` must be <= 6.

          var leadingZeroes = "000000";

          var toPaddedString = function toPaddedString(width, value) {
            // The `|| 0` expression is necessary to work around a bug in
            // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
            return (leadingZeroes + (value || 0)).slice(-width);
          }; // Internal: Double-quotes a string `value`, replacing all ASCII control
          // characters (characters with code unit values between 0 and 31) with
          // their escaped equivalents. This is an implementation of the
          // `Quote(value)` operation defined in ES 5.1 section 15.12.3.


          var unicodePrefix = "\\u00";

          var quote = function quote(value) {
            var result = '"',
                index = 0,
                length = value.length,
                useCharIndex = !charIndexBuggy || length > 10;
            var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);

            for (; index < length; index++) {
              var charCode = value.charCodeAt(index); // If the character is a control character, append its Unicode or
              // shorthand escape sequence; otherwise, append the character as-is.

              switch (charCode) {
                case 8:
                case 9:
                case 10:
                case 12:
                case 13:
                case 34:
                case 92:
                  result += Escapes[charCode];
                  break;

                default:
                  if (charCode < 32) {
                    result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                    break;
                  }

                  result += useCharIndex ? symbols[index] : value.charAt(index);
              }
            }

            return result + '"';
          }; // Internal: Recursively serializes an object. Implements the
          // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.


          var serialize = function serialize(property, object, callback, properties, whitespace, indentation, stack) {
            var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;

            try {
              // Necessary for host object support.
              value = object[property];
            } catch (exception) {}

            if (typeof value == "object" && value) {
              className = getClass.call(value);

              if (className == dateClass && !_isProperty.call(value, "toJSON")) {
                if (value > -1 / 0 && value < 1 / 0) {
                  // Dates are serialized according to the `Date#toJSON` method
                  // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                  // for the ISO 8601 date time string format.
                  if (getDay) {
                    // Manually compute the year, month, date, hours, minutes,
                    // seconds, and milliseconds if the `getUTC*` methods are
                    // buggy. Adapted from @Yaffle's `date-shim` project.
                    date = floor(value / 864e5);

                    for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++) {}

                    for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++) {}

                    date = 1 + date - getDay(year, month); // The `time` value specifies the time within the day (see ES
                    // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                    // to compute `A modulo B`, as the `%` operator does not
                    // correspond to the `modulo` operation for negative numbers.

                    time = (value % 864e5 + 864e5) % 864e5; // The hours, minutes, seconds, and milliseconds are obtained by
                    // decomposing the time within the day. See section 15.9.1.10.

                    hours = floor(time / 36e5) % 24;
                    minutes = floor(time / 6e4) % 60;
                    seconds = floor(time / 1e3) % 60;
                    milliseconds = time % 1e3;
                  } else {
                    year = value.getUTCFullYear();
                    month = value.getUTCMonth();
                    date = value.getUTCDate();
                    hours = value.getUTCHours();
                    minutes = value.getUTCMinutes();
                    seconds = value.getUTCSeconds();
                    milliseconds = value.getUTCMilliseconds();
                  } // Serialize extended years correctly.


                  value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) + // Months, dates, hours, minutes, and seconds should have two
                  // digits; milliseconds should have three.
                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) + // Milliseconds are optional in ES 5.0, but required in 5.1.
                  "." + toPaddedString(3, milliseconds) + "Z";
                } else {
                  value = null;
                }
              } else if (typeof value.toJSON == "function" && (className != numberClass && className != stringClass && className != arrayClass || _isProperty.call(value, "toJSON"))) {
                // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
                // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
                // ignores all `toJSON` methods on these objects unless they are
                // defined directly on an instance.
                value = value.toJSON(property);
              }
            }

            if (callback) {
              // If a replacement function was provided, call it to obtain the value
              // for serialization.
              value = callback.call(object, property, value);
            }

            if (value === null) {
              return "null";
            }

            className = getClass.call(value);

            if (className == booleanClass) {
              // Booleans are represented literally.
              return "" + value;
            } else if (className == numberClass) {
              // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
              // `"null"`.
              return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
            } else if (className == stringClass) {
              // Strings are double-quoted and escaped.
              return quote("" + value);
            } // Recursively serialize objects and arrays.


            if (typeof value == "object") {
              // Check for cyclic structures. This is a linear search; performance
              // is inversely proportional to the number of unique nested objects.
              for (length = stack.length; length--;) {
                if (stack[length] === value) {
                  // Cyclic structures cannot be serialized by `JSON.stringify`.
                  throw TypeError();
                }
              } // Add the object to the stack of traversed objects.


              stack.push(value);
              results = []; // Save the current indentation level and indent one additional level.

              prefix = indentation;
              indentation += whitespace;

              if (className == arrayClass) {
                // Recursively serialize array elements.
                for (index = 0, length = value.length; index < length; index++) {
                  element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                  results.push(element === undef ? "null" : element);
                }

                result = results.length ? whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : "[" + results.join(",") + "]" : "[]";
              } else {
                // Recursively serialize object members. Members are selected from
                // either a user-specified list of property names, or the object
                // itself.
                _forEach(properties || value, function (property) {
                  var element = serialize(property, value, callback, properties, whitespace, indentation, stack);

                  if (element !== undef) {
                    // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                    // is not the empty string, let `member` {quote(property) + ":"}
                    // be the concatenation of `member` and the `space` character."
                    // The "`space` character" refers to the literal space
                    // character, not the `space` {width} argument provided to
                    // `JSON.stringify`.
                    results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                  }
                });

                result = results.length ? whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : "{" + results.join(",") + "}" : "{}";
              } // Remove the object from the traversed object stack.


              stack.pop();
              return result;
            }
          }; // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.


          exports.stringify = function (source, filter, width) {
            var whitespace, callback, properties, className;

            if (typeof filter == "function" || typeof filter == "object" && filter) {
              if ((className = getClass.call(filter)) == functionClass) {
                callback = filter;
              } else if (className == arrayClass) {
                // Convert the property names array into a makeshift set.
                properties = {};

                for (var index = 0, length = filter.length, value; index < length; value = filter[index++], (className = getClass.call(value), className == stringClass || className == numberClass) && (properties[value] = 1)) {}
              }
            }

            if (width) {
              if ((className = getClass.call(width)) == numberClass) {
                // Convert the `width` to an integer and create a string containing
                // `width` number of space characters.
                if ((width -= width % 1) > 0) {
                  for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ") {}
                }
              } else if (className == stringClass) {
                whitespace = width.length <= 10 ? width : width.slice(0, 10);
              }
            } // Opera <= 7.54u2 discards the values associated with empty string keys
            // (`""`) only if they are used directly within an object member list
            // (e.g., `!("" in { "": 1})`).


            return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
          };
        } // Public: Parses a JSON source string.


        if (!has("json-parse")) {
          var fromCharCode = String.fromCharCode; // Internal: A map of escaped control characters and their unescaped
          // equivalents.

          var Unescapes = {
            92: "\\",
            34: '"',
            47: "/",
            98: "\b",
            116: "\t",
            110: "\n",
            102: "\f",
            114: "\r"
          }; // Internal: Stores the parser state.

          var Index, Source; // Internal: Resets the parser state and throws a `SyntaxError`.

          var abort = function abort() {
            Index = Source = null;
            throw SyntaxError();
          }; // Internal: Returns the next token, or `"$"` if the parser has reached
          // the end of the source string. A token may be a string, number, `null`
          // literal, or Boolean literal.


          var lex = function lex() {
            var source = Source,
                length = source.length,
                value,
                begin,
                position,
                isSigned,
                charCode;

            while (Index < length) {
              charCode = source.charCodeAt(Index);

              switch (charCode) {
                case 9:
                case 10:
                case 13:
                case 32:
                  // Skip whitespace tokens, including tabs, carriage returns, line
                  // feeds, and space characters.
                  Index++;
                  break;

                case 123:
                case 125:
                case 91:
                case 93:
                case 58:
                case 44:
                  // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                  // the current position.
                  value = charIndexBuggy ? source.charAt(Index) : source[Index];
                  Index++;
                  return value;

                case 34:
                  // `"` delimits a JSON string; advance to the next character and
                  // begin parsing the string. String tokens are prefixed with the
                  // sentinel `@` character to distinguish them from punctuators and
                  // end-of-string tokens.
                  for (value = "@", Index++; Index < length;) {
                    charCode = source.charCodeAt(Index);

                    if (charCode < 32) {
                      // Unescaped ASCII control characters (those with a code unit
                      // less than the space character) are not permitted.
                      abort();
                    } else if (charCode == 92) {
                      // A reverse solidus (`\`) marks the beginning of an escaped
                      // control character (including `"`, `\`, and `/`) or Unicode
                      // escape sequence.
                      charCode = source.charCodeAt(++Index);

                      switch (charCode) {
                        case 92:
                        case 34:
                        case 47:
                        case 98:
                        case 116:
                        case 110:
                        case 102:
                        case 114:
                          // Revive escaped control characters.
                          value += Unescapes[charCode];
                          Index++;
                          break;

                        case 117:
                          // `\u` marks the beginning of a Unicode escape sequence.
                          // Advance to the first character and validate the
                          // four-digit code point.
                          begin = ++Index;

                          for (position = Index + 4; Index < position; Index++) {
                            charCode = source.charCodeAt(Index); // A valid sequence comprises four hexdigits (case-
                            // insensitive) that form a single hexadecimal value.

                            if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                              // Invalid Unicode escape sequence.
                              abort();
                            }
                          } // Revive the escaped character.


                          value += fromCharCode("0x" + source.slice(begin, Index));
                          break;

                        default:
                          // Invalid escape sequence.
                          abort();
                      }
                    } else {
                      if (charCode == 34) {
                        // An unescaped double-quote character marks the end of the
                        // string.
                        break;
                      }

                      charCode = source.charCodeAt(Index);
                      begin = Index; // Optimize for the common case where a string is valid.

                      while (charCode >= 32 && charCode != 92 && charCode != 34) {
                        charCode = source.charCodeAt(++Index);
                      } // Append the string as-is.


                      value += source.slice(begin, Index);
                    }
                  }

                  if (source.charCodeAt(Index) == 34) {
                    // Advance to the next character and return the revived string.
                    Index++;
                    return value;
                  } // Unterminated string.


                  abort();

                default:
                  // Parse numbers and literals.
                  begin = Index; // Advance past the negative sign, if one is specified.

                  if (charCode == 45) {
                    isSigned = true;
                    charCode = source.charCodeAt(++Index);
                  } // Parse an integer or floating-point value.


                  if (charCode >= 48 && charCode <= 57) {
                    // Leading zeroes are interpreted as octal literals.
                    if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {
                      // Illegal octal literal.
                      abort();
                    }

                    isSigned = false; // Parse the integer component.

                    for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++) {} // Floats cannot contain a leading decimal point; however, this
                    // case is already accounted for by the parser.


                    if (source.charCodeAt(Index) == 46) {
                      position = ++Index; // Parse the decimal component.

                      for (; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) {}

                      if (position == Index) {
                        // Illegal trailing decimal.
                        abort();
                      }

                      Index = position;
                    } // Parse exponents. The `e` denoting the exponent is
                    // case-insensitive.


                    charCode = source.charCodeAt(Index);

                    if (charCode == 101 || charCode == 69) {
                      charCode = source.charCodeAt(++Index); // Skip past the sign following the exponent, if one is
                      // specified.

                      if (charCode == 43 || charCode == 45) {
                        Index++;
                      } // Parse the exponential component.


                      for (position = Index; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) {}

                      if (position == Index) {
                        // Illegal empty exponent.
                        abort();
                      }

                      Index = position;
                    } // Coerce the parsed value to a JavaScript number.


                    return +source.slice(begin, Index);
                  } // A negative sign may only precede numbers.


                  if (isSigned) {
                    abort();
                  } // `true`, `false`, and `null` literals.


                  if (source.slice(Index, Index + 4) == "true") {
                    Index += 4;
                    return true;
                  } else if (source.slice(Index, Index + 5) == "false") {
                    Index += 5;
                    return false;
                  } else if (source.slice(Index, Index + 4) == "null") {
                    Index += 4;
                    return null;
                  } // Unrecognized token.


                  abort();
              }
            } // Return the sentinel `$` character if the parser has reached the end
            // of the source string.


            return "$";
          }; // Internal: Parses a JSON `value` token.


          var get = function get(value) {
            var results, hasMembers;

            if (value == "$") {
              // Unexpected end of input.
              abort();
            }

            if (typeof value == "string") {
              if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
                // Remove the sentinel `@` character.
                return value.slice(1);
              } // Parse object and array literals.


              if (value == "[") {
                // Parses a JSON array, returning a new JavaScript array.
                results = [];

                for (;; hasMembers || (hasMembers = true)) {
                  value = lex(); // A closing square bracket marks the end of the array literal.

                  if (value == "]") {
                    break;
                  } // If the array literal contains elements, the current token
                  // should be a comma separating the previous element from the
                  // next.


                  if (hasMembers) {
                    if (value == ",") {
                      value = lex();

                      if (value == "]") {
                        // Unexpected trailing `,` in array literal.
                        abort();
                      }
                    } else {
                      // A `,` must separate each array element.
                      abort();
                    }
                  } // Elisions and leading commas are not permitted.


                  if (value == ",") {
                    abort();
                  }

                  results.push(get(value));
                }

                return results;
              } else if (value == "{") {
                // Parses a JSON object, returning a new JavaScript object.
                results = {};

                for (;; hasMembers || (hasMembers = true)) {
                  value = lex(); // A closing curly brace marks the end of the object literal.

                  if (value == "}") {
                    break;
                  } // If the object literal contains members, the current token
                  // should be a comma separator.


                  if (hasMembers) {
                    if (value == ",") {
                      value = lex();

                      if (value == "}") {
                        // Unexpected trailing `,` in object literal.
                        abort();
                      }
                    } else {
                      // A `,` must separate each object member.
                      abort();
                    }
                  } // Leading commas are not permitted, object property names must be
                  // double-quoted strings, and a `:` must separate each property
                  // name and value.


                  if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                    abort();
                  }

                  results[value.slice(1)] = get(lex());
                }

                return results;
              } // Unexpected token encountered.


              abort();
            }

            return value;
          }; // Internal: Updates a traversed object member.


          var update = function update(source, property, callback) {
            var element = walk(source, property, callback);

            if (element === undef) {
              delete source[property];
            } else {
              source[property] = element;
            }
          }; // Internal: Recursively traverses a parsed JSON object, invoking the
          // `callback` function for each value. This is an implementation of the
          // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.


          var walk = function walk(source, property, callback) {
            var value = source[property],
                length;

            if (typeof value == "object" && value) {
              // `forEach` can't be used to traverse an array in Opera <= 8.54
              // because its `Object#hasOwnProperty` implementation returns `false`
              // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
              if (getClass.call(value) == arrayClass) {
                for (length = value.length; length--;) {
                  update(value, length, callback);
                }
              } else {
                _forEach(value, function (property) {
                  update(value, property, callback);
                });
              }
            }

            return callback.call(source, property, value);
          }; // Public: `JSON.parse`. See ES 5.1 section 15.12.2.


          exports.parse = function (source, callback) {
            var result, value;
            Index = 0;
            Source = "" + source;
            result = get(lex()); // If a JSON string contains multiple tokens, it is invalid.

            if (lex() != "$") {
              abort();
            } // Reset the parser state.


            Index = Source = null;
            return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
          };
        }
      }

      exports["runInContext"] = runInContext;
      return exports;
    }

    if (exports && !exports.nodeType && !isLoader) {
      // Export for CommonJS environments.
      runInContext(root, exports);
    } else {
      // Export for web browsers and JavaScript engines.
      var nativeJSON = root.JSON;
      var JSON3 = runInContext(root, root["JSON3"] = {
        // Public: Restores the original value of the global `JSON` object and
        // returns a reference to the `JSON3` object.
        "noConflict": function noConflict() {
          root.JSON = nativeJSON;
          return JSON3;
        }
      });
      root.JSON = {
        "parse": JSON3.parse,
        "stringify": JSON3.stringify
      };
    }
  })(commonjsGlobal);
});
/**
 * Module dependencies.
 */

/**
 * Make sure `Object.keys` work for `undefined`
 * values that are still there, like `document.all`.
 * http://lists.w3.org/Archives/Public/public-html/2009Jun/0546.html
 *
 * @api private
 */

function objectKeys$1(val) {
  if (Object.keys) {
    return Object.keys(val);
  }

  return objectKeys(val);
}
/**
 * Module exports.
 */


var utilInspect = inspect;
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 * @license MIT (© Joyent)
 */

/* legacy: obj, showHidden, depth, colors*/

function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  }; // legacy...

  if (arguments.length >= 3) {
    ctx.depth = arguments[2];
  }

  if (arguments.length >= 4) {
    ctx.colors = arguments[3];
  }

  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    _extend(ctx, opts);
  } // set default options


  if (isUndefined(ctx.showHidden)) {
    ctx.showHidden = false;
  }

  if (isUndefined(ctx.depth)) {
    ctx.depth = 2;
  }

  if (isUndefined(ctx.colors)) {
    ctx.colors = false;
  }

  if (isUndefined(ctx.customInspect)) {
    ctx.customInspect = true;
  }

  if (ctx.colors) {
    ctx.stylize = stylizeWithColor;
  }

  return formatValue(ctx, obj, ctx.depth);
} // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics


inspect.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
}; // Don't use 'blue' not visible on cmd.exe

inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};

function stylizeNoColor(str, styleType) {
  return str;
}

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

function isUndefined(arg) {
  return arg === void 0;
}

function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}

function isFunction$1(arg) {
  return typeof arg === 'function';
}

function isString(arg) {
  return typeof arg === 'string';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isNull(arg) {
  return arg === null;
}

function hasOwn$4(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isError(e) {
  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

function arrayToHash(array) {
  var hash = {};
  foreach(array, function (val, idx) {
    hash[val] = true;
  });
  return hash;
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];

  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwn$4(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }

  foreach(keys, function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction$1(value.inspect) && // Filter out the util module, it's inspect function is special
  value.inspect !== inspect && // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);

    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }

    return ret;
  } // Primitive types cannot have properties


  var primitive = formatPrimitive(ctx, value);

  if (primitive) {
    return primitive;
  } // Look up the keys of the object.


  var keys = objectKeys$1(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden && Object.getOwnPropertyNames) {
    keys = Object.getOwnPropertyNames(value);
  } // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


  if (isError(value) && (indexof(keys, 'message') >= 0 || indexof(keys, 'description') >= 0)) {
    return formatError(value);
  } // Some type of object without properties can be shortcutted.


  if (keys.length === 0) {
    if (isFunction$1(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }

    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }

    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }

    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '',
      array = false,
      braces = ['{', '}']; // Make Array say that they are Array

  if (isarray(value)) {
    array = true;
    braces = ['[', ']'];
  } // Make functions say that they are functions


  if (isFunction$1(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  } // Make RegExps say that they are RegExps


  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  } // Make dates with properties first say the date


  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  } // Make error with message first say the error


  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);
  var output;

  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = arrayMap(keys, function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = {
    value: value[key]
  };

  if (Object.getOwnPropertyDescriptor) {
    desc = Object.getOwnPropertyDescriptor(value, key) || desc;
  }

  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }

  if (!hasOwn$4(visibleKeys, key)) {
    name = '[' + key + ']';
  }

  if (!str) {
    if (indexof(ctx.seen, desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }

      if (str.indexOf('\n') > -1) {
        if (array) {
          str = arrayMap(str.split('\n'), function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + arrayMap(str.split('\n'), function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }

  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }

    name = json3.stringify('' + key);

    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}

function formatPrimitive(ctx, value) {
  if (isUndefined(value)) {
    return ctx.stylize('undefined', 'undefined');
  }

  if (isString(value)) {
    var simple = '\'' + json3.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }

  if (isNumber(value)) {
    return ctx.stylize('' + value, 'number');
  }

  if (isBoolean(value)) {
    return ctx.stylize('' + value, 'boolean');
  } // For some reason typeof null is "object", so special case here.


  if (isNull(value)) {
    return ctx.stylize('null', 'null');
  }
}

function reduceToSingleString(output, base, braces) {
  var length = arrayReduce(output, function (prev, cur) {
    if (cur.indexOf('\n') >= 0) ;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

function _extend(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) {
    return origin;
  }

  var keys = objectKeys$1(add);
  var i = keys.length;

  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }

  return origin;
}
/*  */


var emptyObject = Object.freeze({}); // These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.

function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}
/**
 * Check if value is primitive.
 */


function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
  typeof value === 'symbol' || typeof value === 'boolean';
}
/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */


function isObject$1(obj) {
  return obj !== null && typeof obj === 'object';
}
/**
 * Get the raw type string of a value, e.g., [object Object].
 */


var _toString = Object.prototype.toString;

function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */


function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp$1(v) {
  return _toString.call(v) === '[object RegExp]';
}
/**
 * Check if val is a valid array index.
 */


function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}

function isPromise(val) {
  return isDef(val) && typeof val.then === 'function' && typeof val.catch === 'function';
}
/**
 * Convert a value to a string that is actually rendered.
 */


function toString$4(val) {
  return val == null ? '' : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
}
/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */


function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */


function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}
/**
 * Check if a tag is a built-in tag.
 */


var isBuiltInTag = makeMap('slot,component', true);
/**
 * Check if an attribute is a reserved attribute.
 */

var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
/**
 * Remove an item from an array.
 */

function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);

    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}
/**
 * Check whether an object has the property.
 */


var hasOwnProperty = Object.prototype.hasOwnProperty;

function hasOwn$5(obj, key) {
  return hasOwnProperty.call(obj, key);
}
/**
 * Create a cached version of a pure function.
 */


function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
/**
 * Camelize a hyphen-delimited string.
 */


var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});
/**
 * Capitalize a string.
 */

var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
/**
 * Hyphenate a camelCase string.
 */

var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase();
});
/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */

function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }

  boundFn._length = fn.length;
  return boundFn;
}

function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}

var bind = Function.prototype.bind ? nativeBind : polyfillBind;
/**
 * Convert an Array-like object to a real Array.
 */

function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);

  while (i--) {
    ret[i] = list[i + start];
  }

  return ret;
}
/**
 * Mix properties into target object.
 */


function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }

  return to;
}
/**
 * Merge an Array of Objects into a single Object.
 */


function toObject(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}
/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */


function noop(a, b, c) {}
/**
 * Always return false.
 */


var no = function no(a, b, c) {
  return false;
};
/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */


var identity = function identity(_) {
  return _;
};
/**
 * Generate a string containing static keys from compiler modules.
 */


function genStaticKeys(modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || []);
  }, []).join(',');
}
/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */


function looseEqual(a, b) {
  if (a === b) {
    return true;
  }

  var isObjectA = isObject$1(a);
  var isObjectB = isObject$1(b);

  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);

      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */


function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }

  return -1;
}
/**
 * Ensure a function is called only once.
 */


function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}
/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */


var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
/**
 * Check if a string starts with $ or _
 */

function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}
/**
 * Define a property.
 */


function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
/**
 * Parse simple path.
 */


var bailRE = new RegExp("[^" + unicodeRegExp.source + ".$_\\d]");

function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }

  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }

      obj = obj[segments[i]];
    }

    return obj;
  };
}
/*  */
// can we use __proto__?


var hasProto = '__proto__' in {}; // Browser environment sniffing

var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/); // Firefox has a "watch" function on Object.prototype...

var nativeWatch = {}.watch;

if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {}
    }); // https://github.com/facebook/flow/issues/285

    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
} // this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV


var _isServer = false;

var isServerRendering = function isServerRendering() {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }

  return _isServer;
}; // detect devtools


var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
/* istanbul ignore next */

function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */
// $flow-disable-line


if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set =
  /*@__PURE__*/
  function () {
    function Set() {
      this.set = Object.create(null);
    }

    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };

    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };

    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}

var SSR_ATTR = 'data-server-rendered';
var ASSET_TYPES = ['component', 'directive', 'filter'];
var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured', 'serverPrefetch'];
/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};
/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = noop; // work around flow check

var formatComponentName = noop;

if (true) {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;

  var classify = function classify(str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function warn(msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function tip(msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function formatComponentName(vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }

    var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;

    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function repeat(str, n) {
    var res = '';

    while (n) {
      if (n % 2 === 1) {
        res += str;
      }

      if (n > 1) {
        str += str;
      }

      n >>= 1;
    }

    return res;
  };

  generateComponentTrace = function generateComponentTrace(vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;

      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];

          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }

        tree.push(vm);
        vm = vm.$parent;
      }

      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}
/*  */


var uid = 0;
/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */

var Dep = function Dep() {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();

  if ( true && !config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) {
      return a.id - b.id;
    });
  }

  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
}; // The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.


Dep.target = null;
var targetStack = [];

function pushTarget(target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
/*  */


var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = {
  child: {
    configurable: true
  }
}; // DEPRECATED: alias for componentInstance for backwards compat.

/* istanbul ignore next */

prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function createEmptyVNode(text) {
  if (text === void 0) text = '';
  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
} // optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.


function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, // #7975
  // clone children array to avoid mutating original in case of cloning
  // a child.
  vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */


var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);
var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
/**
 * Intercept mutating methods and emit events
 */

methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;

    while (len--) {
      args[len] = arguments[len];
    }

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;

    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;

      case 'splice':
        inserted = args.slice(2);
        break;
    }

    if (inserted) {
      ob.observeArray(inserted);
    } // notify change


    ob.dep.notify();
    return result;
  });
});
/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */

var shouldObserve = true;

function toggleObserving(value) {
  shouldObserve = value;
}
/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */


var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);

  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }

    this.observeArray(value);
  } else {
    this.walk(value);
  }
};
/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */


Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    defineReactive(obj, keys[i]);
  }
};
/**
 * Observe a list of Array items.
 */


Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
}; // helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */


function protoAugment(target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}
/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */

/* istanbul ignore next */


function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}
/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */


function observe(value, asRootData) {
  if (!isObject$1(value) || value instanceof VNode) {
    return;
  }

  var ob;

  if (hasOwn$5(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }

  if (asRootData && ob) {
    ob.vmCount++;
  }

  return ob;
}
/**
 * Define a reactive property on an Object.
 */


function defineReactive(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);

  if (property && property.configurable === false) {
    return;
  } // cater for pre-defined getter/setters


  var getter = property && property.get;
  var setter = property && property.set;

  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;

      if (Dep.target) {
        dep.depend();

        if (childOb) {
          childOb.dep.depend();

          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }

      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */

      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */


      if ( true && customSetter) {
        customSetter();
      } // #7981: for accessor properties without setter


      if (getter && !setter) {
        return;
      }

      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }

      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */


function set(target, key, val) {
  if ( true && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }

  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
     true && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }

  if (!ob) {
    target[key] = val;
    return val;
  }

  defineReactive(ob.value, key, val);
  ob.dep.notify();
  return val;
}
/**
 * Delete a property and trigger change if necessary.
 */


function del(target, key) {
  if ( true && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
     true && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }

  if (!hasOwn$5(target, key)) {
    return;
  }

  delete target[key];

  if (!ob) {
    return;
  }

  ob.dep.notify();
}
/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */


function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();

    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */


var strats = config.optionMergeStrategies;
/**
 * Options with restrictions
 */

if (true) {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }

    return defaultStrat(parent, child);
  };
}
/**
 * Helper that recursively merges two data objects together.
 */


function mergeData(to, from) {
  if (!from) {
    return to;
  }

  var key, toVal, fromVal;
  var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i]; // in case the object is already observed...

    if (key === '__ob__') {
      continue;
    }

    toVal = to[key];
    fromVal = from[key];

    if (!hasOwn$5(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }

  return to;
}
/**
 * Data
 */


function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }

    if (!parentVal) {
      return childVal;
    } // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.


    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;

      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
       true && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return parentVal;
    }

    return mergeDataOrFn(parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};
/**
 * Hooks and props are merged as arrays.
 */


function mergeHook(parentVal, childVal) {
  var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}

function dedupeHooks(hooks) {
  var res = [];

  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }

  return res;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});
/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);

  if (childVal) {
     true && assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});
/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

strats.watch = function (parentVal, childVal, vm, key) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }

  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */


  if (!childVal) {
    return Object.create(parentVal || null);
  }

  if (true) {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = {};
  extend(ret, parentVal);

  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];

    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }

    ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }

  return ret;
};
/**
 * Other object hashes.
 */


strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = Object.create(null);
  extend(ret, parentVal);

  if (childVal) {
    extend(ret, childVal);
  }

  return ret;
};

strats.provide = mergeDataOrFn;
/**
 * Default strategy.
 */

var defaultStrat = function defaultStrat(parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};
/**
 * Validate component names
 */


function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName(name) {
  if (!new RegExp("^[a-zA-Z][\\-\\.0-9_" + unicodeRegExp.source + "]*$").test(name)) {
    warn('Invalid component name: "' + name + '". Component names ' + 'should conform to valid custom element name in html5 specification.');
  }

  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
  }
}
/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */


function normalizeProps(options, vm) {
  var props = options.props;

  if (!props) {
    return;
  }

  var res = {};
  var i, val, name;

  if (Array.isArray(props)) {
    i = props.length;

    while (i--) {
      val = props[i];

      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = {
          type: null
        };
      } else if (true) {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : {
        type: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
  }

  options.props = res;
}
/**
 * Normalize all injections into Object-based format
 */


function normalizeInject(options, vm) {
  var inject = options.inject;

  if (!inject) {
    return;
  }

  var normalized = options.inject = {};

  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = {
        from: inject[i]
      };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({
        from: key
      }, val) : {
        from: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
  }
}
/**
 * Normalize raw function directives into object format.
 */


function normalizeDirectives(options) {
  var dirs = options.directives;

  if (dirs) {
    for (var key in dirs) {
      var def = dirs[key];

      if (typeof def === 'function') {
        dirs[key] = {
          bind: def,
          update: def
        };
      }
    }
  }
}

function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
  }
}
/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */


function mergeOptions(parent, child, vm) {
  if (true) {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child); // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.

  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }

    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;

  for (key in parent) {
    mergeField(key);
  }

  for (key in child) {
    if (!hasOwn$5(parent, key)) {
      mergeField(key);
    }
  }

  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }

  return options;
}
/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */


function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }

  var assets = options[type]; // check local registration variations first

  if (hasOwn$5(assets, id)) {
    return assets[id];
  }

  var camelizedId = camelize(id);

  if (hasOwn$5(assets, camelizedId)) {
    return assets[camelizedId];
  }

  var PascalCaseId = capitalize(camelizedId);

  if (hasOwn$5(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  } // fallback to prototype chain


  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];

  if ( true && warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }

  return res;
}
/*  */


function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn$5(propsData, key);
  var value = propsData[key]; // boolean casting

  var booleanIndex = getTypeIndex(Boolean, prop.type);

  if (booleanIndex > -1) {
    if (absent && !hasOwn$5(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);

      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  } // check default value


  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy,
    // make sure to observe it.

    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }

  if (true) {
    assertProp(prop, key, value, vm, absent);
  }

  return value;
}
/**
 * Get the default value of a prop.
 */


function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn$5(prop, 'default')) {
    return undefined;
  }

  var def = prop.default; // warn against non-factory defaults for Object & Array

  if ( true && isObject$1(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  } // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger


  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  } // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context


  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}
/**
 * Assert whether a prop is valid.
 */


function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }

  if (value == null && !prop.required) {
    return;
  }

  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];

  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }

    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
    return;
  }

  var validator = prop.validator;

  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType(value, type) {
  var valid;
  var expectedType = getType(type);

  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase(); // for primitive wrapper objects

    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }

  return {
    valid: valid,
    expectedType: expectedType
  };
}
/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */


function getType(fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : '';
}

function isSameType(a, b) {
  return getType(a) === getType(b);
}

function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }

  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }

  return -1;
}

function getInvalidTypeMessage(name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ');
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType); // check if we need to specify expected value

  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean$1(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }

  message += ", got " + receivedType + " "; // check if we need to specify received value

  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }

  return message;
}

function styleValue(value, type) {
  if (type === 'String') {
    return "\"" + value + "\"";
  } else if (type === 'Number') {
    return "" + Number(value);
  } else {
    return "" + value;
  }
}

function isExplicable(value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) {
    return value.toLowerCase() === elem;
  });
}

function isBoolean$1() {
  var args = [],
      len = arguments.length;

  while (len--) {
    args[len] = arguments[len];
  }

  return args.some(function (elem) {
    return elem.toLowerCase() === 'boolean';
  });
}
/*  */


function handleError(err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();

  try {
    if (vm) {
      var cur = vm;

      while (cur = cur.$parent) {
        var hooks = cur.$options.errorCaptured;

        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;

              if (capture) {
                return;
              }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }

    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling(handler, context, args, vm, info) {
  var res;

  try {
    res = args ? handler.apply(context, args) : handler.call(context);

    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) {
        return handleError(e, vm, info + " (Promise/async)");
      }); // issue #9511
      // avoid catch triggering multiple times when nested calls

      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }

  return res;
}

function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }

  logError(err, vm, info);
}

function logError(err, vm, info) {
  if (true) {
    warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
  }
  /* istanbul ignore else */


  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err;
  }
}
/*  */


var callbacks = [];
var pending = false;

function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;

  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
} // Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).


var timerFunc; // The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:

/* istanbul ignore next, $flow-disable-line */

if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();

  timerFunc = function timerFunc() {
    p.then(flushCallbacks); // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.

    if (isIOS) {
      setTimeout(noop);
    }
  };
} else if (!isIE && typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) || // PhantomJS and iOS 7.x
MutationObserver.toString() === '[object MutationObserverConstructor]')) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });

  timerFunc = function timerFunc() {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Techinically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function timerFunc() {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function timerFunc() {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick(cb, ctx) {
  var _resolve;

  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });

  if (!pending) {
    pending = true;
    timerFunc();
  } // $flow-disable-line


  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    });
  }
}
/*  */

/*  */


var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;

  if (!isDef(key)) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;

  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}
/*  */


var seenObjects = new _Set();
/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */

function traverse(val) {
  _traverse(val, seenObjects);

  seenObjects.clear();
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);

  if (!isA && !isObject$1(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }

  if (val.__ob__) {
    var depId = val.__ob__.dep.id;

    if (seen.has(depId)) {
      return;
    }

    seen.add(depId);
  }

  if (isA) {
    i = val.length;

    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;

    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}
/*  */


var MAX_UPDATE_COUNT = 100;
var queue = [];
var activatedChildren = [];
var has$1 = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;
/**
 * Reset the scheduler's state.
 */

function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has$1 = {};

  if (true) {
    circular = {};
  }

  waiting = flushing = false;
} // Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.


var currentFlushTimestamp = 0; // Async edge case fix requires storing an event listener's attach timestamp.

var getNow = Date.now; // Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)

if (inBrowser && !isIE) {
  var performance = window.performance;

  if (performance && typeof performance.now === 'function' && getNow() > document.createEvent('Event').timeStamp) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function getNow() {
      return performance.now();
    };
  }
}
/**
 * Flush both queues and run the watchers.
 */


function flushSchedulerQueue() {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id; // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.

  queue.sort(function (a, b) {
    return a.id - b.id;
  }); // do not cache length because more watchers might be pushed
  // as we run existing watchers

  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];

    if (watcher.before) {
      watcher.before();
    }

    id = watcher.id;
    has$1[id] = null;
    watcher.run(); // in dev build, check and stop circular updates.

    if ( true && has$1[id] != null) {
      circular[id] = (circular[id] || 0) + 1;

      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  } // keep copies of post queues before resetting state


  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState(); // call component updated and activated hooks

  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue); // devtool hook

  /* istanbul ignore if */

  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;

  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;

    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}
/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */


function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true
    /* true */
    );
  }
}
/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */


function queueWatcher(watcher) {
  var id = watcher.id;

  if (has$1[id] == null) {
    has$1[id] = true;

    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;

      while (i > index && queue[i].id > watcher.id) {
        i--;
      }

      queue.splice(i + 1, 0, watcher);
    } // queue the flush


    if (!waiting) {
      waiting = true;

      if ( true && !config.async) {
        flushSchedulerQueue();
        return;
      }

      nextTick(flushSchedulerQueue);
    }
  }
}
/*  */


var uid$1 = 0;
/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */

var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
  this.vm = vm;

  if (isRenderWatcher) {
    vm._watcher = this;
  }

  vm._watchers.push(this); // options


  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }

  this.cb = cb;
  this.id = ++uid$1; // uid for batching

  this.active = true;
  this.dirty = this.lazy; // for lazy watchers

  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  true ? expOrFn.toString() : undefined; // parse expression for getter

  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);

    if (!this.getter) {
      this.getter = noop;
       true && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }

  this.value = this.lazy ? undefined : this.get();
};
/**
 * Evaluate the getter, and re-collect dependencies.
 */


Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;

  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }

    popTarget();
    this.cleanupDeps();
  }

  return value;
};
/**
 * Add a dependency to this directive.
 */


Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;

  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);

    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};
/**
 * Clean up for dependency collection.
 */


Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var i = this.deps.length;

  while (i--) {
    var dep = this.deps[i];

    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }

  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};
/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */


Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};
/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */


Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();

    if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject$1(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;

      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};
/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */


Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};
/**
 * Depend on all deps collected by this watcher.
 */


Watcher.prototype.depend = function depend() {
  var i = this.deps.length;

  while (i--) {
    this.deps[i].depend();
  }
};
/**
 * Remove self from all dependencies' subscriber list.
 */


Watcher.prototype.teardown = function teardown() {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }

    var i = this.deps.length;

    while (i--) {
      this.deps[i].removeSub(this);
    }

    this.active = false;
  }
};

var mark;
var measure;

if (true) {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */

  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
    mark = function mark(tag) {
      return perf.mark(tag);
    };

    measure = function measure(name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag); // perf.clearMeasures(name)
    };
  }
}
/*  */


var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once = name.charAt(0) === '~'; // Prefixed last, checked first

  name = once ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns, vm) {
  function invoker() {
    var arguments$1 = arguments;
    var fns = invoker.fns;

    if (Array.isArray(fns)) {
      var cloned = fns.slice();

      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler");
    }
  }

  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove, createOnceHandler, vm) {
  var name, def, cur, old, event;

  for (name in on) {
    def = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);

    if (isUndef(cur)) {
       true && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }

      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }

      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }

  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove(event.name, oldOn[name], event.capture);
    }
  }
}
/*  */


function mergeVNodeHook(def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }

  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once
    // and prevent memory leak

    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}
/*  */


function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;

  if (isUndef(propOptions)) {
    return;
  }

  var res = {};
  var attrs = data.attrs;
  var props = data.props;

  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);

      if (true) {
        var keyInLowerCase = key.toLowerCase();

        if (key !== keyInLowerCase && attrs && hasOwn$5(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }

      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }

  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn$5(hash, key)) {
      res[key] = hash[key];

      if (!preserve) {
        delete hash[key];
      }

      return true;
    } else if (hasOwn$5(hash, altKey)) {
      res[key] = hash[altKey];

      if (!preserve) {
        delete hash[altKey];
      }

      return true;
    }
  }

  return false;
}
/*  */
// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.


function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }

  return children;
} // 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.


function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;

  for (i = 0; i < children.length; i++) {
    c = children[i];

    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }

    lastIndex = res.length - 1;
    last = res[lastIndex]; //  nested

    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i); // merge adjacent text nodes

        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }

        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }

        res.push(c);
      }
    }
  }

  return res;
}
/* not type checking this file because flow doesn't play well with Proxy */


var initProxy;

if (true) {
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function warnNonPresent(target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
  };

  var warnReservedPrefix = function warnReservedPrefix(target, key) {
    warn("Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " + 'properties starting with "$" or "_" are not proxied in the Vue instance to ' + 'prevent conflicts with Vue internals' + 'See: https://vuejs.org/v2/api/#data', target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data);

      if (!has && !isAllowed) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return has || !isAllowed;
    }
  };
  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}
/*  */


var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };

  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;

  if (opts.props) {
    initProps(vm, opts.props);
  }

  if (opts.methods) {
    initMethods(vm, opts.methods);
  }

  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true
    /* asRootData */
    );
  }

  if (opts.computed) {
    initComputed(vm, opts.computed);
  }

  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {}; // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.

  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent; // root instance props should be converted

  if (!isRoot) {
    toggleObserving(false);
  }

  var loop = function loop(key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */

    if (true) {
      var hyphenatedKey = hyphenate(key);

      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }

      defineReactive(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } else {} // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.


    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) {
    loop(key);
  }

  toggleObserving(true);
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};

  if (!isPlainObject(data)) {
    data = {};
     true && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  } // proxy data on instance


  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;

  while (i--) {
    var key = keys[i];

    if (true) {
      if (methods && hasOwn$5(methods, key)) {
        warn("Method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }

    if (props && hasOwn$5(props, key)) {
       true && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  } // observe data


  observe(data, true
  /* asRootData */
  );
}

function getData(data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();

  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = {
  lazy: true
};

function initComputed(vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null); // computed properties are just getters during SSR

  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;

    if ( true && getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    } // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.


    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (true) {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  var shouldCache = !isServerRendering();

  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }

  if ( true && sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];

    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }

      if (Dep.target) {
        watcher.depend();
      }

      return watcher.value;
    }
  };
}

function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}

function initMethods(vm, methods) {
  var props = vm.$options.props;

  for (var key in methods) {
    if (true) {
      if (typeof methods[key] !== 'function') {
        warn("Method \"" + key + "\" has type \"" + typeof methods[key] + "\" in the component definition. " + "Did you reference the function correctly?", vm);
      }

      if (props && hasOwn$5(props, key)) {
        warn("Method \"" + key + "\" has already been defined as a prop.", vm);
      }

      if (key in vm && isReserved(key)) {
        warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
      }
    }

    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];

    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }

  if (typeof handler === 'string') {
    handler = vm[handler];
  }

  return vm.$watch(expOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};

  dataDef.get = function () {
    return this._data;
  };

  var propsDef = {};

  propsDef.get = function () {
    return this._props;
  };

  if (true) {
    dataDef.set = function () {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };

    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }

  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);
  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;

    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }

    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);

    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, "callback for immediate watcher \"" + watcher.expression + "\"");
      }
    }

    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
/*  */


function initProvide(vm) {
  var provide = vm.$options.provide;

  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);

  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (true) {
        defineReactive(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      } else {}
    });
    toggleObserving(true);
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i]; // #6574 in case the inject object is observed...

      if (key === '__ob__') {
        continue;
      }

      var provideKey = inject[key].from;
      var source = vm;

      while (source) {
        if (source._provided && hasOwn$5(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }

        source = source.$parent;
      }

      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
        } else if (true) {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
    }

    return result;
  }
}
/*  */


var uid$2 = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this; // a uid

    vm._uid = uid$2++;
    var startTag, endTag;
    /* istanbul ignore if */

    if ( true && config.performance && mark) {
      startTag = "vue-perf-start:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    } // a flag to avoid this being observed


    vm._isVue = true; // merge options

    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */


    if (true) {
      initProxy(vm);
    } else {} // expose real self


    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props

    initState(vm);
    initProvide(vm); // resolve provide after data/props

    callHook(vm, 'created');
    /* istanbul ignore if */

    if ( true && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure("vue " + vm._name + " init", startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options); // doing this because it's faster than dynamic enumeration.

  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;

  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;

    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976)

      var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options

      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }

      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);

      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }

  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;

  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }

      modified[key] = latest[key];
    }
  }

  return modified;
}
/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */


function resolveSlots(children, context) {
  if (!children || !children.length) {
    return {};
  }

  var slots = {};

  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node

    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    } // named slots should only be respected if the vnode was rendered in the
    // same context.


    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);

      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  } // ignore slots that contains only whitespace


  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }

  return slots;
}

function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === ' ';
}
/*  */


function normalizeScopedSlots(slots, normalSlots, prevSlots) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;

  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized;
  } else if (isStable && prevSlots && prevSlots !== emptyObject && key === prevSlots.$key && !hasNormalSlots && !prevSlots.$hasNormal) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots;
  } else {
    res = {};

    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  } // expose normal slots on scopedSlots


  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  } // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error


  if (slots && Object.isExtensible(slots)) {
    slots._normalized = res;
  }

  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res;
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function normalized() {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res) ? [res] // single vnode
    : normalizeChildren(res);
    return res && (res.length === 0 || res.length === 1 && res[0].isComment // #9658
    ) ? undefined : res;
  }; // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.


  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }

  return normalized;
}

function proxyNormalSlot(slots, key) {
  return function () {
    return slots[key];
  };
}
/*  */

/**
 * Runtime helper for rendering v-for lists.
 */


function renderList(val, render) {
  var ret, i, l, keys, key;

  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);

    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);

    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject$1(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();

      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);

      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }

  if (!isDef(ret)) {
    ret = [];
  }

  ret._isVList = true;
  return ret;
}
/*  */

/**
 * Runtime helper for rendering <slot>
 */


function renderSlot(name, fallback, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;

  if (scopedSlotFn) {
    // scoped slot
    props = props || {};

    if (bindObject) {
      if ( true && !isObject$1(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }

      props = extend(extend({}, bindObject), props);
    }

    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;

  if (target) {
    return this.$createElement('template', {
      slot: target
    }, nodes);
  } else {
    return nodes;
  }
}
/*  */

/**
 * Runtime helper for resolving filters
 */


function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}
/*  */


function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */


function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;

  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
}
/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */


function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject$1(value)) {
       true && warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }

      var hash;

      var loop = function loop(key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }

        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);

        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});

            on["update:" + key] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) {
        loop(key);
      }
    }
  }

  return data;
}
/*  */

/**
 * Runtime helper for rendering static trees.
 */


function renderStatic(index, isInFor) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index]; // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.

  if (tree && !isInFor) {
    return tree;
  } // otherwise, render a fresh tree.


  tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
  );
  markStatic(tree, "__static__" + index, false);
  return tree;
}
/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */


function markOnce(tree, index, key) {
  markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
/*  */


function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
       true && warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};

      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }

  return data;
}
/*  */


function resolveScopedSlots(fns, // see flow/vnode
res, // the following are added in 2.6
hasDynamicKeys, contentHashKey) {
  res = res || {
    $stable: !hasDynamicKeys
  };

  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];

    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }

      res[slot.key] = slot.fn;
    }
  }

  if (contentHashKey) {
    res.$key = contentHashKey;
  }

  return res;
}
/*  */


function bindDynamicKeys(baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];

    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if ( true && key !== '' && key !== null) {
      // null is a speical value for explicitly removing a binding
      warn("Invalid value for dynamic directive argument (expected string or null): " + key, this);
    }
  }

  return baseObj;
} // helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.


function prependModifier(value, symbol) {
  return typeof value === 'string' ? symbol + value : value;
}
/*  */


function installRenderHelpers(target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString$4;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}
/*  */


function FunctionalRenderContext(data, props, children, parent, Ctor) {
  var this$1 = this;
  var options = Ctor.options; // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check

  var contextVm;

  if (hasOwn$5(parent, '_uid')) {
    contextVm = Object.create(parent); // $flow-disable-line

    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent; // $flow-disable-line

    parent = parent._original;
  }

  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);

  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(data.scopedSlots, this$1.$slots = resolveSlots(children, parent));
    }

    return this$1.$slots;
  };

  Object.defineProperty(this, 'scopedSlots', {
    enumerable: true,
    get: function get() {
      return normalizeScopedSlots(data.scopedSlots, this.slots());
    }
  }); // support for compiled functional template

  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options; // pre-resolve slots for renderSlot()

    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);

      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }

      return vnode;
    };
  } else {
    this._c = function (a, b, c, d) {
      return createElement(contextVm, a, b, c, d, needNormalization);
    };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;

  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }

    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }

  var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);

    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }

    return res;
  }
}

function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;

  if (true) {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }

  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }

  return clone;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
/*  */
// inline hooks to be invoked on component VNodes during patch


var componentVNodeHooks = {
  init: function init(vnode, hydrating) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow

      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },
  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },
  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }

    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  },
  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  }
};
var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base; // plain options object: turn it into a constructor

  if (isObject$1(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  } // if at this stage it's not a constructor or an async component factory,
  // reject.


  if (typeof Ctor !== 'function') {
    if (true) {
      warn("Invalid Component definition: " + String(Ctor), context);
    }

    return;
  } // async component


  var asyncFactory;

  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);

    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {}; // resolve constructor options in case global mixins are applied after
  // component constructor creation

  resolveConstructorOptions(Ctor); // transform component v-model data into props & events

  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  } // extract props


  var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component

  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  } // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners


  var listeners = data.on; // replace with listeners with .native modifier
  // so it gets processed during parent component patch.

  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot
    // work around flow
    var slot = data.slot;
    data = {};

    if (slot) {
      data.slot = slot;
    }
  } // install component management hooks onto the placeholder node


  installComponentHooks(data); // return a placeholder vnode

  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, {
    Ctor: Ctor,
    propsData: propsData,
    listeners: listeners,
    tag: tag,
    children: children
  }, asyncFactory);
  return vnode;
}

function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  }; // check inline-template render functions

  var inlineTemplate = vnode.data.inlineTemplate;

  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }

  return new vnode.componentOptions.Ctor(options);
}

function installComponentHooks(data) {
  var hooks = data.hook || (data.hook = {});

  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];

    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1(f1, f2) {
  var merged = function merged(a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };

  merged._merged = true;
  return merged;
} // transform component v-model info (value and callback) into
// prop and event handler respectively.


function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';
  (data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;

  if (isDef(existing)) {
    if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}
/*  */


var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface
// without getting yelled at by flow

function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }

  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }

  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
     true && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  } // object syntax in v-bind


  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }

  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  } // warn against non-primitive key


  if ( true && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
  } // support single function children as default scoped slot


  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = {
      default: children[0]
    };
    children.length = 0;
  }

  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }

  var vnode, ns;

  if (typeof tag === 'string') {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);

    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }

  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }

    if (isDef(data)) {
      registerDeepBindings(data);
    }

    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns, force) {
  vnode.ns = ns;

  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }

  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];

      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
        applyNS(child, ns, force);
      }
    }
  }
} // ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes


function registerDeepBindings(data) {
  if (isObject$1(data.style)) {
    traverse(data.style);
  }

  if (isObject$1(data.class)) {
    traverse(data.class);
  }
}
/*  */


function initRender(vm) {
  vm._vnode = null; // the root of the child tree

  vm._staticTrees = null; // v-once cached trees

  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree

  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject; // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates

  vm._c = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  }; // normalization is always applied for the public version, used in
  // user-written render functions.


  vm.$createElement = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  }; // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated


  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */

  if (true) {
    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {}
}

var currentRenderingInstance = null;

function renderMixin(Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
    } // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.


    vm.$vnode = _parentVnode; // render self

    var vnode;

    try {
      // There's no need to maintain a stack becaues all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render"); // return error render result,
      // or previous vnode to prevent render error causing blank component

      /* istanbul ignore else */

      if ( true && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    } // if the returned array contains only a single node, allow it


    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    } // return empty vnode in case the render function errored out


    if (!(vnode instanceof VNode)) {
      if ( true && Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }

      vnode = createEmptyVNode();
    } // set parent


    vnode.parent = _parentVnode;
    return vnode;
  };
}
/*  */


function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
    comp = comp.default;
  }

  return isObject$1(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = {
    data: data,
    context: context,
    children: children,
    tag: tag
  };
  return node;
}

function resolveAsyncComponent(factory, baseCtor) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  var owner = currentRenderingInstance;

  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null;
    owner.$on('hook:destroyed', function () {
      return remove(owners, owner);
    });

    var forceRender = function forceRender(renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        owners[i].$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;

        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }

        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)

      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });
    var reject = once(function (reason) {
       true && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));

      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });
    var res = factory(resolve, reject);

    if (isObject$1(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);

          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;

              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;

            if (isUndef(factory.resolved)) {
              reject( true ? "timeout (" + res.timeout + "ms)" : undefined);
            }
          }, res.timeout);
        }
      }
    }

    sync = false; // return in case resolved synchronously

    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
/*  */


function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
/*  */


function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];

      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
/*  */

/*  */


function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false; // init parent attached events

  var listeners = vm.$options._parentListeners;

  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn) {
  target.$on(event, fn);
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function createOnceHandler(event, fn) {
  var _target = target;
  return function onceHandler() {
    var res = fn.apply(null, arguments);

    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  };
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;

  Vue.prototype.$on = function (event, fn) {
    var vm = this;

    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup

      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }

    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;

    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }

    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this; // all

    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    } // array of events


    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }

      return vm;
    } // specific event


    var cbs = vm._events[event];

    if (!cbs) {
      return vm;
    }

    if (!fn) {
      vm._events[event] = null;
      return vm;
    } // specific handler


    var cb;
    var i = cbs.length;

    while (i--) {
      cb = cbs[i];

      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }

    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;

    if (true) {
      var lowerCaseEvent = event.toLowerCase();

      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }

    var cbs = vm._events[event];

    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";

      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }

    return vm;
  };
}
/*  */


var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  };
}

function initLifecycle(vm) {
  var options = vm.$options; // locate first non-abstract parent

  var parent = options.parent;

  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }

    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.

    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false
      /* removeOnly */
      );
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }

    restoreActiveInstance(); // update __vue__ reference

    if (prevEl) {
      prevEl.__vue__ = null;
    }

    if (vm.$el) {
      vm.$el.__vue__ = vm;
    } // if parent is an HOC, update its $el as well


    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    } // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.

  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;

    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;

    if (vm._isBeingDestroyed) {
      return;
    }

    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true; // remove self from parent

    var parent = vm.$parent;

    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    } // teardown watchers


    if (vm._watcher) {
      vm._watcher.teardown();
    }

    var i = vm._watchers.length;

    while (i--) {
      vm._watchers[i].teardown();
    } // remove reference from data ob
    // frozen object may not have observer.


    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    } // call the last hook...


    vm._isDestroyed = true; // invoke destroy hooks on current rendered tree

    vm.__patch__(vm._vnode, null); // fire destroyed hook


    callHook(vm, 'destroyed'); // turn off all instance listeners.

    vm.$off(); // remove __vue__ reference

    if (vm.$el) {
      vm.$el.__vue__ = null;
    } // release circular reference (#6759)


    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;

  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;

    if (true) {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }

  callHook(vm, 'beforeMount');
  var updateComponent;
  /* istanbul ignore if */

  if ( true && config.performance && mark) {
    updateComponent = function updateComponent() {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;
      mark(startTag);

      var vnode = vm._render();

      mark(endTag);
      measure("vue " + name + " render", startTag, endTag);
      mark(startTag);

      vm._update(vnode, hydrating);

      mark(endTag);
      measure("vue " + name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function updateComponent() {
      vm._update(vm._render(), hydrating);
    };
  } // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined


  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true
  /* isRenderWatcher */
  );
  hydrating = false; // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook

  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }

  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if (true) {
    isUpdatingChildComponent = true;
  } // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.
  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.


  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key); // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.

  var needsForceUpdate = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  hasDynamicScopedSlot);
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }

  vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render

  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject; // update props

  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];

    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?

      props[key] = validateProp(key, propOptions, propsData, vm);
    }

    toggleObserving(true); // keep a copy of raw propsData

    vm.$options.propsData = propsData;
  } // update listeners


  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners); // resolve slots + force update if has children

  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (true) {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }

  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;

    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }

  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;

    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;

    if (isInInactiveTree(vm)) {
      return;
    }
  }

  if (!vm._inactive) {
    vm._inactive = true;

    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";

  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }

  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }

  popTarget();
}
/*  */


var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may
// contain child elements.

var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);
var isTextInputType = makeMap('text,number,password,search,email,tel,url');
/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);
var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}

function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }

  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};

  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;

    if (isDef(key)) {
      map[key] = i;
    }
  }

  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];

    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove() {
      if (--remove.listeners === 0) {
        removeNode(childElm);
      }
    }

    remove.listeners = listeners;
    return remove;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el); // element may have already been removed due to v-html / v-text

    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {
      return isRegExp$1(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }

  var creatingElmInVPre = 0;

  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check

    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;

    if (isDef(tag)) {
      if (true) {
        if (data && data.pre) {
          creatingElmInVPre++;
        }

        if (isUnknownElement(vnode, creatingElmInVPre)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }

      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);
      /* istanbul ignore if */

      {
        createChildren(vnode, children, insertedVnodeQueue);

        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }

        insert(parentElm, vnode.elm, refElm);
      }

      if ( true && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;

    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;

      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false
        /* hydrating */
        );
      } // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.


      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);

        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }

        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }

    vnode.elm = vnode.componentInstance.$el;

    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode); // make sure to invoke the insert hook

      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i; // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.

    var innerNode = vnode;

    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;

      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }

        insertedVnodeQueue.push(innerNode);
        break;
      }
    } // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself


    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref) {
    if (isDef(parent)) {
      if (isDef(ref)) {
        if (nodeOps.parentNode(ref) === parent) {
          nodeOps.insertBefore(parent, elm, ref);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (true) {
        checkDuplicateKeys(children);
      }

      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }

    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }

    i = vnode.data.hook; // Reuse variable

    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }

      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  } // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.


  function setScope(vnode) {
    var i;

    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;

      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }

        ancestor = ancestor.parent;
      }
    } // for slot content they should also get the scopeId from the host instance.


    if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }

      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }

    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];

      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;

      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      } // recursively invoke hooks on child component root node


      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }

      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }

      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions

    var canMove = !removeOnly;

    if (true) {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }

        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);

        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];

          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }

        newStartVnode = newCh[++newStartIdx];
      }
    }

    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys(children) {
    var seenKeys = {};

    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;

      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld(node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];

      if (isDef(c) && sameVnode(node, c)) {
        return i;
      }
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }

      return;
    } // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.


    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;

    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;

    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }

      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }

    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if (true) {
          checkDuplicateKeys(ch);
        }

        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }

        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false; // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).

  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key'); // Note: this is a browser-only function so we can assume elms are DOM nodes.

  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    } // assert node match


    if (true) {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true
        /* hydrating */
        );
      }

      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }

    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }

              return false;
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;

            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }

              childNode = childNode.nextSibling;
            } // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.


            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }

              return false;
            }
          }
        }
      }

      if (isDef(data)) {
        var fullInvoke = false;

        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }

        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }

    return true;
  }

  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }

      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);

      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }

          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if (true) {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          } // either not server-rendered, or hydration failed.
          // create an empty node and replace it


          oldVnode = emptyNodeAt(oldVnode);
        } // replacing existing element


        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm); // create new node

        createElm(vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm)); // update parent placeholder node element, recursively

        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);

          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }

            ancestor.elm = vnode.elm;

            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              } // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.


              var insert = ancestor.data.hook.insert;

              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }

            ancestor = ancestor.parent;
          }
        } // destroy old node


        if (isDef(parentElm)) {
          removeVnodes(parentElm, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
/*  */


var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;

  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];

    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);

      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);

      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function callInsert() {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };

    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);

  if (!dirs) {
    // $flow-disable-line
    return res;
  }

  var i, dir;

  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];

    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }

    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  } // $flow-disable-line


  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];

  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];

function updateAttrs(oldVnode, vnode) {
  if (!oldVnode.data.attrs && !vnode.data.attrs) {
    return;
  }

  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {}; // clone observed objects, as the user probably wants to mutate it

  if (attrs.__ob__) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];

    if (old !== cur) {
      elm.setAttribute(key, cur);
    }
  }

  for (key in oldAttrs) {
    if (attrs[key] == null) {
      elm.setAttribute(key);
    }
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};
/*  */
// these are reserved for web because they are directly compiled away
// during template compilation

var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding

var acceptValue = makeMap('input,textarea,option,select,progress');
var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');
var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');
/*  */

function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;

  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;

    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }

  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }

  return renderClass(data.staticClass, data.class);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */


  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }

  if (isObject$1(value)) {
    return stringifyObject(value);
  }

  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */


  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;

  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }

      res += stringified;
    }
  }

  return res;
}

function stringifyObject(value) {
  var res = '';

  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }

      res += key;
    }
  }

  return res;
}
/*  */


function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (!data.staticClass && !data.class && (!oldData || !oldData.staticClass && !oldData.class)) {
    return;
  }

  var cls = genClassForVnode(vnode); // handle transition classes

  var transitionClass = el._transitionClasses;

  if (transitionClass) {
    cls = concat(cls, stringifyClass(transitionClass));
  } // set the class


  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var class_ = {
  create: updateClass,
  update: updateClass
};
var target$1;

function add$1(event, handler, once, capture) {
  if (capture) {
    console.log('bubble phase not supported');
    return;
  }

  if (once) {
    var oldHandler = handler;

    handler = function handler() {
      var args = [],
          len = arguments.length;

      while (len--) {
        args[len] = arguments[len];
      }

      var res = oldHandler.call.apply(oldHandler, [null].concat(args));

      if (res !== null) {
        remove$2(event, null, null, target$1);
      }
    };
  }

  target$1.addEventListener(event, handler);
}

function remove$2(event, handler, capture, _target) {
  if (_target === void 0) _target = target$1;

  _target.removeEventListener(event);
}

function updateDOMListeners(oldVnode, vnode) {
  if (!oldVnode.data.on && !vnode.data.on) {
    return;
  }

  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};
var normalize = cached(camelize);

function createStyle(oldVnode, vnode) {
  // console.log(`\t\t ===> createStyle(${oldVnode}, ${vnode})`)
  if (!vnode.data.staticStyle) {
    updateStyle(oldVnode, vnode);
    return;
  }

  var elm = vnode.elm;
  var staticStyle = vnode.data.staticStyle;

  for (var name in staticStyle) {
    if (staticStyle[name]) {
      elm.setStyle(normalize(name), staticStyle[name]);
    }
  }

  updateStyle(oldVnode, vnode);
}

function updateStyle(oldVnode, vnode) {
  if (!oldVnode.data.style && !vnode.data.style) {
    return;
  }

  var cur, name;
  var elm = vnode.elm;
  var oldStyle = oldVnode.data.style || {};
  var style = vnode.data.style || {};
  var needClone = style.__ob__; // handle array syntax

  if (Array.isArray(style)) {
    style = vnode.data.style = toObject$1(style);
  } // clone the style for future updates,
  // in case the user mutates the style object in-place.


  if (needClone) {
    style = vnode.data.style = extend({}, style);
  }

  for (name in oldStyle) {
    if (!style[name]) {
      elm.setStyle(normalize(name), '');
    }
  }

  for (name in style) {
    cur = style[name];
    elm.setStyle(normalize(name), cur);
  }
}

function toObject$1(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}

var style = {
  create: createStyle,
  update: updateStyle
};
/*  */

var whitespaceRE = /\s+/;
/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";

    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}
/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */


function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }

    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';

    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }

    cur = cur.trim();

    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}
/*  */


function resolveTransition(def) {
  if (!def) {
    return;
  }
  /* istanbul ignore else */


  if (typeof def === 'object') {
    var res = {};

    if (def.css !== false) {
      extend(res, autoCssTransition(def.name || 'v'));
    }

    extend(res, def);
    return res;
  } else if (typeof def === 'string') {
    return autoCssTransition(def);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});
var hasTransition = inBrowser && !isIE9;

if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) ;
  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) ;
} // binding to window is necessary to make hot reload work in IE in strict mode


var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout :
/* istanbul ignore next */
function (fn) {
  return fn();
};

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);

  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }

  removeClass(el, cls);
}

function enter(vnode, toggleDisplay) {
  var el = vnode.elm; // call leave callback now

  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;

    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data)) {
    return;
  }
  /* istanbul ignore if */


  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration; // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.

  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;

  while (transitionNode && transitionNode.parent) {
    transitionNode = transitionNode.parent;
    context = transitionNode.context;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber(isObject$1(duration) ? duration.enter : duration);

  if ( true && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }

      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }

    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];

      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }

      enterHook && enterHook(el, cb);
    });
  } // start enter transition


  beforeEnterHook && beforeEnterHook(el);

  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);

      if (!cb.cancelled) {
        addTransitionClass(el, toClass);

        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm; // call enter callback now

  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;

    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  /* istanbul ignore if */


  if (isDef(el._leaveCb)) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;
  var expectsCSS = css !== false;
  var userWantsControl = getHookArgumentsLength(leave);
  var explicitLeaveDuration = toNumber(isObject$1(duration) ? duration.leave : duration);

  if ( true && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }

    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }

      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }

    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    } // record leaving element


    if (!vnode.data.show) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }

    beforeLeave && beforeLeave(el);

    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);

        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);

          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            }
          }
        }
      });
    }

    leave && leave(el, cb);

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
} // only used in dev mode


function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}
/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */


function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }

  var invokerFns = fn.fns;

  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = {
  create: _enter,
  activate: _enter,
  remove: function remove(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
};
var platformModules = [attrs, class_, events, style, transition];
var actionBar = {
  template: "\n    <NativeActionBar ~actionBar v-bind=\"$attrs\" v-on=\"$listeners\">\n      <slot />\n    </NativeActionBar>\n  "
};
var android = {
  functional: true,
  render: function render(h, ref) {
    var children = ref.children;

    if (__webpack_require__("tns-core-modules/platform").isAndroid) {
      return children;
    }
  }
};
var frames = new Map();

function setFrame(id, frame) {
  return frames.set(id, frame);
}

function getFrame(id) {
  return frames.get(id);
}

function deleteFrame(id) {
  return frames.delete(id);
}

var idCounter = 1;
var frame = {
  props: {
    id: {
      default: 'default'
    },
    transition: {
      type: [String, Object],
      required: false,
      default: null
    },
    'ios:transition': {
      type: [String, Object],
      required: false,
      default: null
    },
    'android:transition': {
      type: [String, Object],
      required: false,
      default: null
    },
    clearHistory: {
      type: Boolean,
      required: false,
      default: false
    },
    backstackVisible: {
      type: Boolean,
      required: false,
      default: true
    },
    // injected by the template compiler
    hasRouterView: {
      default: false
    }
  },
  data: function data() {
    return {
      properties: {}
    };
  },
  created: function created() {
    var properties = {};

    if (getFrame(this.$props.id)) {
      properties.id = this.$props.id + idCounter++;
    }

    this.properties = Object.assign({}, this.$attrs, this.$props, properties);
    setFrame(this.properties.id, this);
  },
  destroyed: function destroyed() {
    deleteFrame(this.properties.id);
  },
  render: function render(h) {
    return h('NativeFrame', {
      attrs: this.properties,
      on: this.$listeners
    }, this.$slots.default);
  },
  methods: {
    _getFrame: function _getFrame() {
      return this.$el.nativeView;
    },
    _ensureTransitionObject: function _ensureTransitionObject(transition) {
      if (typeof transition === 'string') {
        return {
          name: transition
        };
      }

      return transition;
    },
    _composeTransition: function _composeTransition(entry) {
      var isAndroid = __webpack_require__("tns-core-modules/platform").isAndroid;

      var platformEntryProp = "transition" + (isAndroid ? 'Android' : 'iOS');
      var entryProp = entry[platformEntryProp] ? platformEntryProp : 'transition';
      var platformProp = (isAndroid ? 'android' : 'ios') + ":transition";
      var prop = this[platformProp] ? platformProp : 'transition';

      if (entry[entryProp]) {
        entry[entryProp] = this._ensureTransitionObject(entry[entryProp]);
      } else if (this[prop]) {
        entry[entryProp] = this._ensureTransitionObject(this[prop]);
      }

      return entry;
    },
    notifyPageMounted: function notifyPageMounted(pageVm) {
      var this$1 = this;
      var options = {
        backstackVisible: this.backstackVisible,
        clearHistory: this.clearHistory,
        create: function create() {
          return pageVm.$el.nativeView;
        }
      };
      this.$nextTick(function () {
        this$1.navigate(options);
      });
    },
    navigate: function navigate(entry, back) {
      var this$1 = this;
      if (back === void 0) back = false;

      var frame = this._getFrame();

      if (back) {
        return frame.goBack(entry);
      } // resolve the page from the entry and attach a navigatedTo listener
      // to fire the frame events


      var page = entry.create();
      page.once('navigatedTo', function () {
        this$1.$emit('navigated', entry);
      });

      var handler = function handler(args) {
        if (args.isBackNavigation) {
          page.off('navigatedFrom', handler);
          this$1.$emit('navigatedBack', entry);
        }
      };

      page.on('navigatedFrom', handler);

      entry.create = function () {
        return page;
      };

      this._composeTransition(entry);

      frame.navigate(entry);
    },
    back: function back(backstackEntry) {
      if (backstackEntry === void 0) backstackEntry = null;
      this.navigate(backstackEntry, true);
    }
  }
};
var ios = {
  functional: true,
  render: function render(h, ref) {
    var children = ref.children;

    if (__webpack_require__("tns-core-modules/platform").isIOS) {
      return children;
    }
  }
};
var VUE_VIEW = '__vueVNodeRef__';
var tid = 0;
var vTemplate = {
  props: {
    name: {
      type: String
    },
    if: {
      type: String
    }
  },
  mounted: function mounted() {
    if (!this.$scopedSlots.default) {
      return;
    }

    this.$templates = this.$el.parentNode.$templates = this.$parent.$templates = this.$parent.$templates || new TemplateBag();
    this.$templates.registerTemplate(this.$props.name || (this.$props.if ? "v-template-" + tid++ : 'default'), this.$props.if, this.$scopedSlots.default);
  },
  render: function render(h) {}
};

var TemplateBag = function TemplateBag() {
  this._templateMap = new Map();
};

var prototypeAccessors$1 = {
  selectorFn: {
    configurable: true
  }
};

TemplateBag.prototype.registerTemplate = function registerTemplate(name, condition, scopedFn) {
  this._templateMap.set(name, {
    scopedFn: scopedFn,
    conditionFn: this.getConditionFn(condition),
    keyedTemplate: new VueKeyedTemplate(name, scopedFn)
  });
};

prototypeAccessors$1.selectorFn.get = function () {
  var self = this;
  return function templateSelectorFn(item) {
    var iterator = self._templateMap.entries();

    var curr;

    while (curr = iterator.next().value) {
      var name = curr[0];
      var conditionFn = curr[1].conditionFn;

      try {
        if (conditionFn(item)) {
          return name;
        }
      } catch (err) {}
    }

    return 'default';
  };
};

TemplateBag.prototype.getConditionFn = function getConditionFn(condition) {
  return new Function('ctx', "with(ctx) { return !!(" + condition + ") }");
};

TemplateBag.prototype.getKeyedTemplate = function getKeyedTemplate(name) {
  return this._templateMap.get(name).keyedTemplate;
};

TemplateBag.prototype.patchTemplate = function patchTemplate(name, context, oldVnode) {
  var vnode = this._templateMap.get(name).scopedFn(context); // in 2.6 scopedFn returns an array!


  if (Array.isArray(vnode)) {
    vnode = vnode[0];
  }

  var nativeView = patch(oldVnode, vnode).nativeView;
  nativeView[VUE_VIEW] = vnode;
  return nativeView;
};

TemplateBag.prototype.getAvailable = function getAvailable() {
  return Array.from(this._templateMap.keys());
};

TemplateBag.prototype.getKeyedTemplates = function getKeyedTemplates() {
  return Array.from(this._templateMap.values()).map(function (ref) {
    var keyedTemplate = ref.keyedTemplate;
    return keyedTemplate;
  });
};

Object.defineProperties(TemplateBag.prototype, prototypeAccessors$1);

var VueKeyedTemplate = function VueKeyedTemplate(key, scopedFn) {
  this._key = key;
  this._scopedFn = scopedFn;
};

var prototypeAccessors$1$1 = {
  key: {
    configurable: true
  }
};

prototypeAccessors$1$1.key.get = function () {
  return this._key;
};

VueKeyedTemplate.prototype.createView = function createView() {
  // we are returning null because we don't have the data here
  // the view will be created in the `patchTemplate` method above.
  // see https://github.com/nativescript-vue/nativescript-vue/issues/229#issuecomment-390330474
  return null;
};

Object.defineProperties(VueKeyedTemplate.prototype, prototypeAccessors$1$1);
var listView = {
  props: {
    items: {
      type: [Array, Object],
      validator: function validator(val) {
        var ObservableArray = __webpack_require__("tns-core-modules/data/observable-array").ObservableArray;

        return Array.isArray(val) || val instanceof ObservableArray;
      },
      required: true
    },
    '+alias': {
      type: String,
      default: 'item'
    },
    '+index': {
      type: String
    }
  },
  template: "\n    <NativeListView\n      ref=\"listView\"\n      :items=\"items\"\n      v-bind=\"$attrs\"\n      v-on=\"listeners\"\n      @itemTap=\"onItemTap\"\n      @itemLoading=\"onItemLoading\"\n    >\n      <slot />\n    </NativeListView>\n  ",
  watch: {
    items: {
      handler: function handler(newVal) {
        this.$refs.listView.setAttribute('items', newVal);
        this.refresh();
      },
      deep: true
    }
  },
  created: function created() {
    // we need to remove the itemTap handler from a clone of the $listeners
    // object because we are emitting the event ourselves with added data.
    var listeners = extend({}, this.$listeners);
    delete listeners.itemTap;
    this.listeners = listeners;
    this.getItemContext = getItemContext.bind(this);
  },
  mounted: function mounted() {
    var this$1 = this;

    if (!this.$templates) {
      return;
    }

    this.$refs.listView.setAttribute('_itemTemplatesInternal', this.$templates.getKeyedTemplates());
    this.$refs.listView.setAttribute('_itemTemplateSelector', function (item, index) {
      return this$1.$templates.selectorFn(this$1.getItemContext(item, index));
    });
  },
  methods: {
    onItemTap: function onItemTap(args) {
      this.$emit('itemTap', extend({
        item: this.getItem(args.index)
      }, args));
    },
    onItemLoading: function onItemLoading(args) {
      if (!this.$templates) {
        return;
      }

      var index = args.index;
      var items = args.object.items;
      var currentItem = this.getItem(index);

      var name = args.object._itemTemplateSelector(currentItem, index, items);

      var context = this.getItemContext(currentItem, index);
      var oldVnode = args.view && args.view[VUE_VIEW];
      args.view = this.$templates.patchTemplate(name, context, oldVnode);
    },
    refresh: function refresh() {
      this.$refs.listView.nativeView.refresh();
    },
    getItem: function getItem(idx) {
      return typeof this.items.getItem === 'function' ? this.items.getItem(idx) : this.items[idx];
    }
  }
};

function getItemContext(item, index, alias, index_alias) {
  var obj;
  if (alias === void 0) alias = this.$props['+alias'];
  if (index_alias === void 0) index_alias = this.$props['+index'];
  return obj = {}, obj[alias] = item, obj[index_alias || '$index'] = index, obj.$even = index % 2 === 0, obj.$odd = index % 2 !== 0, obj;
}

var PAGE_REF = '__vuePageRef__';
var page = {
  render: function render(h) {
    return h('NativePage', {
      attrs: this.$attrs,
      on: this.$listeners
    }, this.$slots.default);
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$el.nativeView[PAGE_REF] = this;

    var frame = this._findParentFrame();

    if (frame) {
      frame.notifyPageMounted(this);
    }

    var handler = function handler(e) {
      if (e.isBackNavigation) {
        this$1.$el.nativeView.off('navigatedFrom', handler);
        this$1.$parent.$destroy();
      }
    };

    this.$el.nativeView.on('navigatedFrom', handler); // ensure that the parent vue instance is destroyed when the
    // page is disposed (clearHistory: true for example)

    var dispose = this.$el.nativeView.disposeNativeView;

    this.$el.nativeView.disposeNativeView = function () {
      var args = [],
          len = arguments.length;

      while (len--) {
        args[len] = arguments[len];
      }

      this$1.$parent.$destroy();
      dispose.call(this$1.$el.nativeView, args);
    };
  },
  methods: {
    _findParentFrame: function _findParentFrame() {
      var frame = this.$parent;

      while (frame && frame.$options.name !== 'Frame') {
        frame = frame.$parent;
      }

      return frame;
    }
  }
};
var tabView = {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  },
  render: function render(h) {
    return h('NativeTabView', {
      on: this.$listeners,
      attrs: this.$attrs
    }, this.$slots.default);
  },
  methods: {
    registerTab: function registerTab(tabView) {
      var items = this.$el.nativeView.items || [];
      this.$el.setAttribute('items', items.concat([tabView]));
    }
  }
};
var tabViewItem = {
  template: "<NativeTabViewItem><slot /></NativeTabViewItem>",
  mounted: function mounted() {
    if (this.$el.childNodes.length > 1) {
      warn('TabViewItem should contain only 1 root element', this);
    }

    var _nativeView = this.$el.nativeView;
    _nativeView.view = this.$el.childNodes[0].nativeView;
    this.$parent.registerTab(_nativeView);
  }
};
var bottomNavigation = {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  },
  render: function render(h) {
    return h('NativeBottomNavigation', {
      on: this.$listeners,
      attrs: this.$attrs
    }, this.$slots.default);
  },
  methods: {
    registerTabStrip: function registerTabStrip(tabStrip) {
      this.$el.setAttribute('tabStrip', tabStrip);
    },
    registerTabContentItem: function registerTabContentItem(tabContentItem) {
      var items = this.$el.nativeView.items || [];
      this.$el.setAttribute('items', items.concat([tabContentItem]));
    }
  }
};
var tabs = {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  },
  render: function render(h) {
    return h('NativeTabs', {
      on: this.$listeners,
      attrs: this.$attrs
    }, this.$slots.default);
  },
  methods: {
    registerTabStrip: function registerTabStrip(tabStrip) {
      this.$el.setAttribute('tabStrip', tabStrip);
    },
    registerTabContentItem: function registerTabContentItem(tabContentItem) {
      var items = this.$el.nativeView.items || [];
      this.$el.setAttribute('items', items.concat([tabContentItem]));
    }
  }
};
var tabStrip = {
  render: function render(h) {
    return h('NativeTabStrip', {
      on: this.$listeners,
      attrs: this.$attrs
    }, this.$slots.default);
  },
  mounted: function mounted() {
    var _nativeView = this.$el.nativeView;
    this.$parent.registerTabStrip(_nativeView);
  },
  methods: {
    registerTabStripItem: function registerTabStripItem(tabStripItem) {
      var items = this.$el.nativeView.items || [];
      this.$el.setAttribute('items', items.concat([tabStripItem]));
    }
  }
};
var tabStripItem = {
  template: "<NativeTabStripItem><slot /></NativeTabStripItem>",
  mounted: function mounted() {
    var _nativeView = this.$el.nativeView;
    this.$parent.registerTabStripItem(_nativeView);
  }
};
var tabContentItem = {
  template: "<NativeTabContentItem><slot /></NativeTabContentItem>",
  mounted: function mounted() {
    if (this.$el.childNodes.length > 1) {
      warn('TabContentItem should contain only 1 root element', this);
    }

    var _nativeView = this.$el.nativeView;
    _nativeView.view = this.$el.childNodes[0].nativeView;
    this.$parent.registerTabContentItem(_nativeView);
  }
};
/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
}; // in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered

function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;

  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options; // props

  for (var key in options.propsData) {
    data[key] = comp[key];
  } // events.
  // extract listeners and pass them directly to the transition methods


  var listeners = options._parentListeners;

  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }

  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

var isNotTextNode = function isNotTextNode(c) {
  return c.tag || isAsyncPlaceholder(c);
};

var isVShowDirective = function isVShowDirective(d) {
  return d.name === 'show';
};

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default;

    if (!children) {
      return;
    } // filter out text nodes (possible whitespaces)


    children = children.filter(isNotTextNode);
    /* istanbul ignore if */

    if (!children.length) {
      return;
    } // warn multiple elements


    if ( true && children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode; // warn invalid mode

    if ( true && mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0]; // if this is a component root node and the component's
    // parent container node also has transition, skip.

    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    } // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive


    var child = getRealChild(rawChild);
    /* istanbul ignore if */

    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    } // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.


    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild); // mark v-show
    // so that the transition module can hand over the control to the directive

    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data); // handle transition mode

      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }

        var delayedLeave;

        var performLeave = function performLeave() {
          delayedLeave();
        };

        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }
};
var elementMap = {};
var nativeRegExp = /Native/gi;
var dashRegExp = /-/g;
var defaultViewMeta = {
  skipAddToDom: false,
  isUnaryTag: false,
  tagNamespace: '',
  canBeLeftOpenTag: false,
  model: null,
  component: null
};

function normalizeElementName(elementName) {
  return "native" + elementName.replace(nativeRegExp, '').replace(dashRegExp, '').toLowerCase();
}

function registerElement(elementName, resolver, meta) {
  var normalizedName = normalizeElementName(elementName);
  meta = Object.assign({}, defaultViewMeta, meta);

  if (elementMap[normalizedName]) {
    throw new Error("Element for " + elementName + " already registered.");
  }

  if (!meta.component) {
    // if no Vue component is passed, wrap the simpler vue component
    // which bind the events and attributes to the NS one
    meta.component = {
      functional: true,
      model: meta.model,
      render: function render(h, ref) {
        var data = ref.data;
        var children = ref.children;
        return h(normalizedName, data, children);
      }
    };
  }

  meta.component.name = elementName;
  var entry = {
    resolver: resolver,
    meta: meta
  };
  elementMap[normalizedName] = entry;
}

function getElementMap() {
  return elementMap;
}

function getViewClass(elementName) {
  var normalizedName = normalizeElementName(elementName);
  var entry = elementMap[normalizedName];

  if (!entry) {
    throw new TypeError("No known component for element " + elementName + ".");
  }

  try {
    return entry.resolver();
  } catch (e) {
    throw new TypeError("Could not load view for: " + elementName + ". " + e);
  }
}

function getViewMeta(elementName) {
  var normalizedName = normalizeElementName(elementName);
  var meta = defaultViewMeta;
  var entry = elementMap[normalizedName];

  if (entry && entry.meta) {
    meta = entry.meta;
  }

  return meta;
}

function isKnownView(elementName) {
  return elementMap[normalizeElementName(elementName)];
}

registerElement('ActionBar', function () {
  return __webpack_require__("tns-core-modules/ui/action-bar").ActionBar;
}, {
  removeChild: function removeChild(parent, child) {
    try {
      parent.nativeView._removeView(child.nativeView);
    } catch (e) {// ignore exception - child is likely already removed/replaced
      // fixes #76
    }
  },
  component: actionBar
});
registerElement('ActionItem', function () {
  return __webpack_require__("tns-core-modules/ui/action-bar").ActionItem;
});
registerElement('android', null, {
  component: android
});
registerElement('ios', null, {
  component: ios
});
registerElement('ListView', function () {
  return __webpack_require__("tns-core-modules/ui/list-view").ListView;
}, {
  component: listView
});
registerElement('NavigationButton', function () {
  return __webpack_require__("tns-core-modules/ui/action-bar").NavigationButton;
});
registerElement('TabView', function () {
  return __webpack_require__("tns-core-modules/ui/tab-view").TabView;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  },
  component: tabView
});
registerElement('TabViewItem', function () {
  return __webpack_require__("tns-core-modules/ui/tab-view").TabViewItem;
}, {
  skipAddToDom: true,
  component: tabViewItem
});
registerElement('BottomNavigation', function () {
  return __webpack_require__("tns-core-modules/ui/bottom-navigation").BottomNavigation;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  },
  component: bottomNavigation
});
registerElement('Tabs', function () {
  return __webpack_require__("tns-core-modules/ui/tabs").Tabs;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  },
  component: tabs
});
registerElement('TabStrip', function () {
  return __webpack_require__("tns-core-modules/ui/tab-navigation-base/tab-strip").TabStrip;
}, {
  skipAddToDom: true,
  component: tabStrip
});
registerElement('TabStripItem', function () {
  return __webpack_require__("tns-core-modules/ui/tab-navigation-base/tab-strip-item").TabStripItem;
}, {
  skipAddToDom: true,
  component: tabStripItem
});
registerElement('TabContentItem', function () {
  return __webpack_require__("tns-core-modules/ui/tab-navigation-base/tab-content-item").TabContentItem;
}, {
  skipAddToDom: true,
  component: tabContentItem
});
registerElement('transition', null, {
  component: Transition
});
registerElement('v-template', null, {
  component: vTemplate
}); // NS components which uses the automatic registerElement Vue wrapper
// as they do not need any special logic

registerElement('Label', function () {
  return __webpack_require__("tns-core-modules/ui/label").Label;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('DatePicker', function () {
  return __webpack_require__("tns-core-modules/ui/date-picker").DatePicker;
}, {
  model: {
    prop: 'date',
    event: 'dateChange'
  }
});
registerElement('AbsoluteLayout', function () {
  return __webpack_require__("tns-core-modules/ui/layouts/absolute-layout").AbsoluteLayout;
});
registerElement('ActivityIndicator', function () {
  return __webpack_require__("tns-core-modules/ui/activity-indicator").ActivityIndicator;
});
registerElement('Border', function () {
  return __webpack_require__("tns-core-modules/ui/border").Border;
});
registerElement('Button', function () {
  return __webpack_require__("tns-core-modules/ui/button").Button;
});
registerElement('ContentView', function () {
  return __webpack_require__("tns-core-modules/ui/content-view").ContentView;
});
registerElement('DockLayout', function () {
  return __webpack_require__("tns-core-modules/ui/layouts/dock-layout").DockLayout;
});
registerElement('GridLayout', function () {
  return __webpack_require__("tns-core-modules/ui/layouts/grid-layout").GridLayout;
});
registerElement('HtmlView', function () {
  return __webpack_require__("tns-core-modules/ui/html-view").HtmlView;
});
registerElement('Image', function () {
  return __webpack_require__("tns-core-modules/ui/image").Image;
});
registerElement('img', function () {
  return __webpack_require__("tns-core-modules/ui/image").Image;
});
registerElement('ListPicker', function () {
  return __webpack_require__("tns-core-modules/ui/list-picker").ListPicker;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  }
});
registerElement('Page', function () {
  return __webpack_require__("tns-core-modules/ui/page").Page;
}, {
  skipAddToDom: true,
  component: page
});
registerElement('Placeholder', function () {
  return __webpack_require__("tns-core-modules/ui/placeholder").Placeholder;
});
registerElement('Progress', function () {
  return __webpack_require__("tns-core-modules/ui/progress").Progress;
}, {
  model: {
    prop: 'value',
    event: 'valueChange'
  }
});
registerElement('ProxyViewContainer', function () {
  return __webpack_require__("tns-core-modules/ui/proxy-view-container").ProxyViewContainer;
}); // registerElement(
//   'Repeater',
//   () => require('tns-core-modules/ui/repeater').Repeater
// )

registerElement('ScrollView', function () {
  return __webpack_require__("tns-core-modules/ui/scroll-view").ScrollView;
});
registerElement('SearchBar', function () {
  return __webpack_require__("tns-core-modules/ui/search-bar").SearchBar;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('SegmentedBar', function () {
  return __webpack_require__("tns-core-modules/ui/segmented-bar").SegmentedBar;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  }
});
registerElement('SegmentedBarItem', function () {
  return __webpack_require__("tns-core-modules/ui/segmented-bar").SegmentedBarItem;
});
registerElement('Slider', function () {
  return __webpack_require__("tns-core-modules/ui/slider").Slider;
}, {
  model: {
    prop: 'value',
    event: 'valueChange'
  }
});
registerElement('StackLayout', function () {
  return __webpack_require__("tns-core-modules/ui/layouts/stack-layout").StackLayout;
});
registerElement('FlexboxLayout', function () {
  return __webpack_require__("tns-core-modules/ui/layouts/flexbox-layout").FlexboxLayout;
});
registerElement('Switch', function () {
  return __webpack_require__("tns-core-modules/ui/switch").Switch;
}, {
  model: {
    prop: 'checked',
    event: 'checkedChange'
  }
});
registerElement('TextField', function () {
  return __webpack_require__("tns-core-modules/ui/text-field").TextField;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('TextView', function () {
  return __webpack_require__("tns-core-modules/ui/text-view").TextView;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('TimePicker', function () {
  return __webpack_require__("tns-core-modules/ui/time-picker").TimePicker;
}, {
  model: {
    prop: 'time',
    event: 'timeChange'
  }
});
registerElement('WebView', function () {
  return __webpack_require__("tns-core-modules/ui/web-view").WebView;
});
registerElement('WrapLayout', function () {
  return __webpack_require__("tns-core-modules/ui/layouts/wrap-layout").WrapLayout;
});
registerElement('FormattedString', function () {
  return __webpack_require__("tns-core-modules/text/formatted-string").FormattedString;
});
registerElement('Span', function () {
  return __webpack_require__("tns-core-modules/text/span").Span;
});
registerElement('DetachedContainer', function () {
  return __webpack_require__("tns-core-modules/ui/proxy-view-container").ProxyViewContainer;
}, {
  skipAddToDom: true
});
registerElement('DetachedText', function () {
  return __webpack_require__("tns-core-modules/ui/placeholder").Placeholder;
}, {
  skipAddToDom: true
});
registerElement('Comment', function () {
  return __webpack_require__("tns-core-modules/ui/placeholder").Placeholder;
});
registerElement('Document', function () {
  return __webpack_require__("tns-core-modules/ui/proxy-view-container").ProxyViewContainer;
}, {
  skipAddToDom: true
});
registerElement('Frame', function () {
  return __webpack_require__("tns-core-modules/ui/frame").Frame;
}, {
  insertChild: function insertChild(parentNode, childNode, atIndex) {// if (normalizeElementName(childNode.tagName) === 'nativepage') {
    // parentNode.nativeView.navigate({ create: () => childNode.nativeView })
    // }
  },
  component: frame
});
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

var isobject = function isObject(val) {
  return val != null && typeof val === 'object' && Array.isArray(val) === false;
};

function isObjectObject(o) {
  return isobject(o) === true && Object.prototype.toString.call(o) === '[object Object]';
}

var isPlainObject$1 = function isPlainObject(o) {
  var ctor, prot;

  if (isObjectObject(o) === false) {
    return false;
  } // If has modified constructor


  ctor = o.constructor;

  if (typeof ctor !== 'function') {
    return false;
  } // If has modified prototype


  prot = ctor.prototype;

  if (isObjectObject(prot) === false) {
    return false;
  } // If constructor does not have an Object-specific method


  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  } // Most likely a plain Object


  return true;
};

function set$1(target, path, value, options) {
  if (!isObject$2(target)) {
    return target;
  }

  var opts = options || {};
  var isArray = Array.isArray(path);

  if (!isArray && typeof path !== 'string') {
    return target;
  }

  var merge = opts.merge;

  if (merge && typeof merge !== 'function') {
    merge = Object.assign;
  }

  var keys = isArray ? path : split(path, opts);
  var len = keys.length;
  var orig = target;

  if (!options && keys.length === 1) {
    result(target, keys[0], value, merge);
    return target;
  }

  for (var i = 0; i < len; i++) {
    var prop = keys[i];

    if (!isObject$2(target[prop])) {
      target[prop] = {};
    }

    if (i === len - 1) {
      result(target, prop, value, merge);
      break;
    }

    target = target[prop];
  }

  return orig;
}

function result(target, path, value, merge) {
  if (merge && isPlainObject$1(target[path]) && isPlainObject$1(value)) {
    target[path] = merge({}, target[path], value);
  } else {
    target[path] = value;
  }
}

function split(path, options) {
  var id = createKey(path, options);

  if (set$1.memo[id]) {
    return set$1.memo[id];
  }

  var char = options && options.separator ? options.separator : '.';
  var keys = [];
  var res = [];

  if (options && typeof options.split === 'function') {
    keys = options.split(path);
  } else {
    keys = path.split(char);
  }

  for (var i = 0; i < keys.length; i++) {
    var prop = keys[i];

    while (prop && prop.slice(-1) === '\\' && keys[i + 1]) {
      prop = prop.slice(0, -1) + char + keys[++i];
    }

    res.push(prop);
  }

  set$1.memo[id] = res;
  return res;
}

function createKey(pattern, options) {
  var id = pattern;

  if (typeof options === 'undefined') {
    return id + '';
  }

  var keys = Object.keys(options);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    id += ';' + key + '=' + String(options[key]);
  }

  return id;
}

function isObject$2(val) {
  switch (typeof val) {
    case 'null':
      return false;

    case 'object':
      return true;

    case 'function':
      return true;

    default:
      {
        return false;
      }
  }
}

set$1.memo = {};
var setValue = set$1;

function isView(view) {
  return view instanceof __webpack_require__("tns-core-modules/ui/core/view").View;
}

function isLayout(view) {
  return view instanceof __webpack_require__("tns-core-modules/ui/layouts/layout-base").LayoutBase;
}

function isContentView(view) {
  return view instanceof __webpack_require__("tns-core-modules/ui/content-view").ContentView;
}

function insertChild(parentNode, childNode, atIndex) {
  if (atIndex === void 0) atIndex = -1;

  if (!parentNode) {
    return;
  }

  if (parentNode.meta && typeof parentNode.meta.insertChild === 'function') {
    return parentNode.meta.insertChild(parentNode, childNode, atIndex);
  }

  if (childNode.meta.skipAddToDom) {
    return;
  }

  var parentView = parentNode.nativeView;
  var childView = childNode.nativeView;

  if (isLayout(parentView)) {
    if (childView.parent === parentView) {
      var index = parentView.getChildIndex(childView);

      if (index !== -1) {
        parentView.removeChild(childView);
      }
    }

    if (atIndex !== -1) {
      parentView.insertChild(childView, atIndex);
    } else {
      parentView.addChild(childView);
    }
  } else if (isContentView(parentView)) {
    if (childNode.nodeType === 8) {
      parentView._addView(childView, atIndex);
    } else {
      parentView.content = childView;
    }
  } else if (parentView && parentView._addChildFromBuilder) {
    parentView._addChildFromBuilder(childNode._nativeView.constructor.name, childView);
  }
}

function removeChild(parentNode, childNode) {
  if (!parentNode) {
    return;
  }

  if (parentNode.meta && typeof parentNode.meta.removeChild === 'function') {
    return parentNode.meta.removeChild(parentNode, childNode);
  }

  if (childNode.meta.skipAddToDom) {
    return;
  }

  var parentView = parentNode.nativeView;
  var childView = childNode.nativeView;

  if (isLayout(parentView)) {
    parentView.removeChild(childView);
  } else if (isContentView(parentView)) {
    if (parentView.content === childView) {
      parentView.content = null;
    }

    if (childNode.nodeType === 8) {
      parentView._removeView(childView);
    }
  } else if (isView(parentView)) {
    parentView._removeView(childView);
  }
}

var XML_ATTRIBUTES = Object.freeze(['style', 'rows', 'columns', 'fontAttributes']);

var ViewNode = function ViewNode() {
  this.nodeType = null;
  this._tagName = null;
  this.parentNode = null;
  this.childNodes = [];
  this.prevSibling = null;
  this.nextSibling = null;
  this._ownerDocument = null;
  this._nativeView = null;
  this._meta = null;
  /* istanbul ignore next
   * make vue happy :)
   */

  this.hasAttribute = this.removeAttribute = function () {
    return false;
  };
};

var prototypeAccessors$2 = {
  tagName: {
    configurable: true
  },
  firstChild: {
    configurable: true
  },
  lastChild: {
    configurable: true
  },
  nativeView: {
    configurable: true
  },
  meta: {
    configurable: true
  },
  ownerDocument: {
    configurable: true
  }
};
/* istanbul ignore next */

ViewNode.prototype.toString = function toString() {
  return this.constructor.name + "(" + this.tagName + ")";
};

prototypeAccessors$2.tagName.set = function (name) {
  this._tagName = normalizeElementName(name);
};

prototypeAccessors$2.tagName.get = function () {
  return this._tagName;
};

prototypeAccessors$2.firstChild.get = function () {
  return this.childNodes.length ? this.childNodes[0] : null;
};

prototypeAccessors$2.lastChild.get = function () {
  return this.childNodes.length ? this.childNodes[this.childNodes.length - 1] : null;
};

prototypeAccessors$2.nativeView.get = function () {
  return this._nativeView;
};

prototypeAccessors$2.nativeView.set = function (view) {
  if (this._nativeView) {
    throw new Error("Can't override native view.");
  }

  this._nativeView = view;
};

prototypeAccessors$2.meta.get = function () {
  if (this._meta) {
    return this._meta;
  }

  return this._meta = getViewMeta(this.tagName);
};
/* istanbul ignore next */


prototypeAccessors$2.ownerDocument.get = function () {
  if (this._ownerDocument) {
    return this._ownerDocument;
  }

  var el = this;

  while ((el = el.parentNode).nodeType !== 9) {// do nothing
  }

  return this._ownerDocument = el;
};

ViewNode.prototype.getAttribute = function getAttribute(key) {
  return this.nativeView[key];
};
/* istanbul ignore next */


ViewNode.prototype.setAttribute = function setAttribute(key, value) {
  var ref = __webpack_require__("tns-core-modules/platform");

  var isAndroid = ref.isAndroid;
  var isIOS = ref.isIOS;
  var nv = this.nativeView;

  try {
    if (XML_ATTRIBUTES.indexOf(key) !== -1) {
      nv[key] = value;
    } else {
      // detect expandable attrs for boolean values
      // See https://vuejs.org/v2/guide/components-props.html#Passing-a-Boolean
      if (__webpack_require__("tns-core-modules/utils/types").isBoolean(nv[key]) && value === '') {
        value = true;
      }

      if (isAndroid && key.startsWith('android:')) {
        setValue(nv, key.substr(8), value);
      } else if (isIOS && key.startsWith('ios:')) {
        setValue(nv, key.substr(4), value);
      } else if (key.endsWith('.decode')) {
        setValue(nv, key.slice(0, -7), __webpack_require__("tns-core-modules/xml").XmlParser._dereferenceEntities(value));
      } else {
        setValue(nv, key, value);
      }
    }
  } catch (e) {// ignore
  }
};
/* istanbul ignore next */


ViewNode.prototype.setStyle = function setStyle(property, value) {
  if (!(value = value.trim()).length) {
    return;
  }

  if (property.endsWith('Align')) {
    // NativeScript uses Alignment instead of Align, this ensures that text-align works
    property += 'ment';
  }

  this.nativeView.style[property] = value;
};
/* istanbul ignore next */


ViewNode.prototype.setText = function setText(text) {
  if (this.nodeType === 3) {
    this.parentNode.setText(text);
  } else {
    this.setAttribute('text', text);
  }
};
/* istanbul ignore next */


ViewNode.prototype.addEventListener = function addEventListener(event, handler) {
  this.nativeView.on(event, handler);
};
/* istanbul ignore next */


ViewNode.prototype.removeEventListener = function removeEventListener(event) {
  this.nativeView.off(event);
};

ViewNode.prototype.insertBefore = function insertBefore(childNode, referenceNode) {
  if (!childNode) {
    throw new Error("Can't insert child.");
  } // in some rare cases insertBefore is called with a null referenceNode
  // this makes sure that it get's appended as the last child


  if (!referenceNode) {
    return this.appendChild(childNode);
  }

  if (referenceNode.parentNode !== this) {
    throw new Error("Can't insert child, because the reference node has a different parent.");
  }

  if (childNode.parentNode && childNode.parentNode !== this) {
    throw new Error("Can't insert child, because it already has a different parent.");
  }

  if (childNode.parentNode === this) ;
  var index = this.childNodes.indexOf(referenceNode);
  childNode.parentNode = this;
  childNode.nextSibling = referenceNode;
  childNode.prevSibling = this.childNodes[index - 1];
  referenceNode.prevSibling = childNode;
  this.childNodes.splice(index, 0, childNode);
  insertChild(this, childNode, index);
};

ViewNode.prototype.appendChild = function appendChild(childNode) {
  if (!childNode) {
    throw new Error("Can't append child.");
  }

  if (childNode.parentNode && childNode.parentNode !== this) {
    throw new Error("Can't append child, because it already has a different parent.");
  }

  if (childNode.parentNode === this) ;
  childNode.parentNode = this;

  if (this.lastChild) {
    childNode.prevSibling = this.lastChild;
    this.lastChild.nextSibling = childNode;
  }

  this.childNodes.push(childNode);
  insertChild(this, childNode, this.childNodes.length - 1);
};

ViewNode.prototype.removeChild = function removeChild$1(childNode) {
  if (!childNode) {
    throw new Error("Can't remove child.");
  }

  if (!childNode.parentNode) {
    throw new Error("Can't remove child, because it has no parent.");
  }

  if (childNode.parentNode !== this) {
    throw new Error("Can't remove child, because it has a different parent.");
  }

  childNode.parentNode = null;

  if (childNode.prevSibling) {
    childNode.prevSibling.nextSibling = childNode.nextSibling;
  }

  if (childNode.nextSibling) {
    childNode.nextSibling.prevSibling = childNode.prevSibling;
  } // reset the prevSibling and nextSibling. If not, a keep-alived component will
  // still have a filled nextSibling attribute so vue will not
  // insert the node again to the parent. See #220


  childNode.prevSibling = null;
  childNode.nextSibling = null;
  this.childNodes = this.childNodes.filter(function (node) {
    return node !== childNode;
  });
  removeChild(this, childNode);
};

Object.defineProperties(ViewNode.prototype, prototypeAccessors$2);
var VUE_ELEMENT_REF = '__vue_element_ref__';

var ElementNode =
/*@__PURE__*/
function (ViewNode) {
  function ElementNode(tagName) {
    ViewNode.call(this);
    this.nodeType = 1;
    this.tagName = tagName;
    var viewClass = getViewClass(tagName);
    this._nativeView = new viewClass();
    this._nativeView[VUE_ELEMENT_REF] = this;
  }

  if (ViewNode) ElementNode.__proto__ = ViewNode;
  ElementNode.prototype = Object.create(ViewNode && ViewNode.prototype);
  ElementNode.prototype.constructor = ElementNode;

  ElementNode.prototype.appendChild = function appendChild(childNode) {
    ViewNode.prototype.appendChild.call(this, childNode);

    if (childNode.nodeType === 3) {
      this.setText(childNode.text);
    }
  };

  ElementNode.prototype.insertBefore = function insertBefore(childNode, referenceNode) {
    ViewNode.prototype.insertBefore.call(this, childNode, referenceNode);

    if (childNode.nodeType === 3) {
      this.setText(childNode.text);
    }
  };

  ElementNode.prototype.removeChild = function removeChild(childNode) {
    ViewNode.prototype.removeChild.call(this, childNode);

    if (childNode.nodeType === 3) {
      this.setText('');
    }
  };

  return ElementNode;
}(ViewNode);

var CommentNode =
/*@__PURE__*/
function (ElementNode) {
  function CommentNode(text) {
    ElementNode.call(this, 'comment');
    this.nodeType = 8;
    this.text = text;
  }

  if (ElementNode) CommentNode.__proto__ = ElementNode;
  CommentNode.prototype = Object.create(ElementNode && ElementNode.prototype);
  CommentNode.prototype.constructor = CommentNode;
  return CommentNode;
}(ElementNode);

var TextNode =
/*@__PURE__*/
function (ViewNode) {
  function TextNode(text) {
    ViewNode.call(this);
    this.nodeType = 3;
    this.text = text;
    this._meta = {
      skipAddToDom: true
    };
  }

  if (ViewNode) TextNode.__proto__ = ViewNode;
  TextNode.prototype = Object.create(ViewNode && ViewNode.prototype);
  TextNode.prototype.constructor = TextNode;

  TextNode.prototype.setText = function setText(text) {
    this.text = text;
    this.parentNode.setText(text);
  };

  return TextNode;
}(ViewNode);

var DocumentNode =
/*@__PURE__*/
function (ViewNode) {
  function DocumentNode() {
    ViewNode.call(this);
    this.nodeType = 9;
    this.documentElement = new ElementNode('document'); // make static methods accessible via this

    this.createComment = this.constructor.createComment;
    this.createElement = this.constructor.createElement;
    this.createElementNS = this.constructor.createElementNS;
    this.createTextNode = this.constructor.createTextNode;
  }

  if (ViewNode) DocumentNode.__proto__ = ViewNode;
  DocumentNode.prototype = Object.create(ViewNode && ViewNode.prototype);
  DocumentNode.prototype.constructor = DocumentNode;

  DocumentNode.createComment = function createComment(text) {
    return new CommentNode(text);
  };

  DocumentNode.createElement = function createElement(tagName) {
    return new ElementNode(tagName);
  };

  DocumentNode.createElementNS = function createElementNS(namespace, tagName) {
    return new ElementNode(namespace + ':' + tagName);
  };

  DocumentNode.createTextNode = function createTextNode(text) {
    return new TextNode(text);
  };

  return DocumentNode;
}(ViewNode);

var isReservedTag = makeMap('template', true);

var _Vue;

function setVue(Vue) {
  _Vue = Vue;
}

var canBeLeftOpenTag = function canBeLeftOpenTag(el) {
  return getViewMeta(el).canBeLeftOpenTag;
};

var isUnaryTag = function isUnaryTag(el) {
  return getViewMeta(el).isUnaryTag;
};

function mustUseProp() {// console.log('mustUseProp')
}

function getTagNamespace(el) {
  return getViewMeta(el).tagNamespace;
}

function isUnknownElement(el) {
  return !isKnownView(el);
}

var VUE_VERSION = global.process.env.VUE_VERSION || '2.6.10';
var NS_VUE_VERSION = global.process.env.NS_VUE_VERSION || '2.4.0';
var infoTrace = once(function () {
  console.log("NativeScript-Vue has \"Vue.config.silent\" set to true, to see output logs set it to false.");
});

function trace(message) {
  if (_Vue && _Vue.config.silent) {
    return infoTrace();
  }

  console.log("{NSVue (Vue: " + VUE_VERSION + " | NSVue: " + NS_VUE_VERSION + ")} -> " + message);
}

var namespaceMap = {};

function createElement$1(tagName, vnode) {
  trace("CreateElement(" + tagName + ")");
  return DocumentNode.createElement(tagName);
}

function createElementNS(namespace, tagName) {
  trace("CreateElementNS(" + namespace + "#" + tagName + ")");
  return DocumentNode.createElementNS(namespace, tagName);
}

function createTextNode(text) {
  trace("CreateTextNode(" + text + ")");
  return DocumentNode.createTextNode(text);
}

function createComment(text) {
  trace("CreateComment(" + text + ")");
  return DocumentNode.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  trace("InsertBefore(" + parentNode + ", " + newNode + ", " + referenceNode + ")");
  return parentNode.insertBefore(newNode, referenceNode);
}

function removeChild$1(node, child) {
  trace("RemoveChild(" + node + ", " + child + ")");
  return node.removeChild(child);
}

function appendChild(node, child) {
  trace("AppendChild(" + node + ", " + child + ")");
  return node.appendChild(child);
}

function parentNode(node) {
  trace("ParentNode(" + node + ") -> " + node.parentNode);
  return node.parentNode;
}

function nextSibling(node) {
  trace("NextSibling(" + node + ") -> " + node.nextSibling);
  return node.nextSibling;
}

function tagName(elementNode) {
  trace("TagName(" + elementNode + ") -> " + elementNode.tagName);
  return elementNode.tagName;
}

function setTextContent(node, text) {
  trace("SetTextContent(" + node + ", " + text + ")");
  node.setText(text);
}

function setAttribute(node, key, val) {
  trace("SetAttribute(" + node + ", " + key + ", " + val + ")");
  node.setAttribute(key, val);
}

function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps =
/*#__PURE__*/
Object.freeze({
  namespaceMap: namespaceMap,
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild$1,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setAttribute: setAttribute,
  setStyleScope: setStyleScope
});
var modules = platformModules.concat(baseModules);
var patch = createPatchFunction({
  nodeOps: nodeOps,
  modules: modules
});
var he = {
  decode: decode
};

function decode(html) {
  // todo?
  return html;
}
/*  */


var isUnaryTag$1 = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' + 'link,meta,param,source,track,wbr'); // Elements that you can, intentionally, leave open
// (and which close themselves)

var canBeLeftOpenTag$1 = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'); // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content

var isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' + 'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' + 'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' + 'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' + 'title,tr,track');
/**
 * Not type-checking this file because it's mostly vendor code.
 */
// Regular Expressions for parsing tags and attributes

var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + unicodeRegExp.source + "]*";
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp("^<" + qnameCapture);
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp("^<\\/" + qnameCapture + "[^>]*>");
var doctype = /^<!DOCTYPE [^>]+>/i; // #7298: escape - to avoid being pased as HTML comment when inlined in page

var comment = /^<!\--/;
var conditionalComment = /^<!\[/; // Special Elements (can contain anything)

var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};
var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t',
  '&#39;': "'"
};
var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g; // #5992

var isIgnoreNewlineTag = makeMap('pre,textarea', true);

var shouldIgnoreFirstNewline = function shouldIgnoreFirstNewline(tag, html) {
  return tag && isIgnoreNewlineTag(tag) && html[0] === '\n';
};

function decodeAttr(value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) {
    return decodingMap[match];
  });
}

function parseHTML(html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag = options.isUnaryTag || no;
  var canBeLeftOpenTag = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;

  while (html) {
    last = html; // Make sure we're not in a plaintext content element like script/style

    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');

      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
            }

            advance(commentEnd + 3);
            continue;
          }
        } // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment


        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue;
          }
        } // Doctype:


        var doctypeMatch = html.match(doctype);

        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue;
        } // End tag:


        var endTagMatch = html.match(endTag);

        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue;
        } // Start tag:


        var startTagMatch = parseStartTag();

        if (startTagMatch) {
          handleStartTag(startTagMatch);

          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
            advance(1);
          }

          continue;
        }
      }

      var text = void 0,
          rest = void 0,
          next = void 0;

      if (textEnd >= 0) {
        rest = html.slice(textEnd);

        while (!endTag.test(rest) && !startTagOpen.test(rest) && !comment.test(rest) && !conditionalComment.test(rest)) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);

          if (next < 0) {
            break;
          }

          textEnd += next;
          rest = html.slice(textEnd);
        }

        text = html.substring(0, textEnd);
      }

      if (textEnd < 0) {
        text = html;
      }

      if (text) {
        advance(text.length);
      }

      if (options.chars && text) {
        options.chars(text, index - text.length, index);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;

        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text.replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
          .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }

        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }

        if (options.chars) {
          options.chars(text);
        }

        return '';
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);

      if ( true && !stack.length && options.warn) {
        options.warn("Mal-formatted tag at end of template: \"" + html + "\"", {
          start: index + html.length
        });
      }

      break;
    }
  } // Clean up any remaining tags


  parseEndTag();

  function advance(n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag() {
    var start = html.match(startTagOpen);

    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;

      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
        attr.start = index;
        advance(attr[0].length);
        attr.end = index;
        match.attrs.push(attr);
      }

      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match;
      }
    }
  }

  function handleStartTag(match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }

      if (canBeLeftOpenTag(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag(tagName) || !!unarySlash;
    var l = match.attrs.length;
    var attrs = new Array(l);

    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href' ? options.shouldDecodeNewlinesForHref : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };

      if ( true && options.outputSourceRange) {
        attrs[i].start = args.start + args[0].match(/^\s*/).length;
        attrs[i].end = args.end;
      }
    }

    if (!unary) {
      stack.push({
        tag: tagName,
        lowerCasedTag: tagName.toLowerCase(),
        attrs: attrs,
        start: match.start,
        end: match.end
      });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag(tagName, start, end) {
    var pos, lowerCasedTagName;

    if (start == null) {
      start = index;
    }

    if (end == null) {
      end = index;
    } // Find the closest opened tag of the same type


    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();

      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break;
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if ( true && (i > pos || !tagName) && options.warn) {
          options.warn("tag <" + stack[i].tag + "> has no matching end tag.", {
            start: stack[i].start,
            end: stack[i].end
          });
        }

        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      } // Remove the open elements from the stack


      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }

      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}
/*  */


var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters(exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);

    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) {
        inSingle = false;
      }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) {
        inDouble = false;
      }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) {
        inTemplateString = false;
      }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) {
        inRegex = false;
      }
    } else if (c === 0x7C && // pipe
    exp.charCodeAt(i + 1) !== 0x7C && exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22:
          inDouble = true;
          break;
        // "

        case 0x27:
          inSingle = true;
          break;
        // '

        case 0x60:
          inTemplateString = true;
          break;
        // `

        case 0x28:
          paren++;
          break;
        // (

        case 0x29:
          paren--;
          break;
        // )

        case 0x5B:
          square++;
          break;
        // [

        case 0x5D:
          square--;
          break;
        // ]

        case 0x7B:
          curly++;
          break;
        // {

        case 0x7D:
          curly--;
          break;
        // }
      }

      if (c === 0x2f) {
        // /
        var j = i - 1;
        var p = void 0; // find first non-whitespace prev char

        for (; j >= 0; j--) {
          p = exp.charAt(j);

          if (p !== ' ') {
            break;
          }
        }

        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter() {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression;
}

function wrapFilter(exp, filter) {
  var i = filter.indexOf('(');

  if (i < 0) {
    // _f: resolveFilter
    return "_f(\"" + filter + "\")(" + exp + ")";
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return "_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args);
  }
}
/*  */


var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g');
});

function parseText(text, delimiters) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;

  if (!tagRE.test(text)) {
    return;
  }

  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;

  while (match = tagRE.exec(text)) {
    index = match.index; // push text token

    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    } // tag token


    var exp = parseFilters(match[1].trim());
    tokens.push("_s(" + exp + ")");
    rawTokens.push({
      '@binding': exp
    });
    lastIndex = index + match[0].length;
  }

  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }

  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  };
}
/*  */

/**
 * Cross-platform code generation for component v-model
 */


function genComponentModel(el, value, modifiers) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;
  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;

  if (trim) {
    valueExpression = "(typeof " + baseValueExpression + " === 'string'" + "? " + baseValueExpression + ".trim()" + ": " + baseValueExpression + ")";
  }

  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var assignment = genAssignmentCode(value, valueExpression);
  el.model = {
    value: "(" + value + ")",
    expression: JSON.stringify(value),
    callback: "function (" + baseValueExpression + ") {" + assignment + "}"
  };
}
/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */


function genAssignmentCode(value, assignment) {
  var res = parseModel(value);

  if (res.key === null) {
    return value + "=" + assignment;
  } else {
    return "$set(" + res.exp + ", " + res.key + ", " + assignment + ")";
  }
}
/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */


var len, str, chr, index$1, expressionPos, expressionEndPos;

function parseModel(val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');

    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      };
    } else {
      return {
        exp: val,
        key: null
      };
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */

    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  };
}

function next() {
  return str.charCodeAt(++index$1);
}

function eof() {
  return index$1 >= len;
}

function isStringStart(chr) {
  return chr === 0x22 || chr === 0x27;
}

function parseBracket(chr) {
  var inBracket = 1;
  expressionPos = index$1;

  while (!eof()) {
    chr = next();

    if (isStringStart(chr)) {
      parseString(chr);
      continue;
    }

    if (chr === 0x5B) {
      inBracket++;
    }

    if (chr === 0x5D) {
      inBracket--;
    }

    if (inBracket === 0) {
      expressionEndPos = index$1;
      break;
    }
  }
}

function parseString(chr) {
  var stringQuote = chr;

  while (!eof()) {
    chr = next();

    if (chr === stringQuote) {
      break;
    }
  }
}
/*  */

/* eslint-disable no-unused-vars */


function baseWarn(msg, range) {
  console.error("[Vue compiler]: " + msg);
}
/* eslint-enable no-unused-vars */


function pluckModuleFunction(modules, key) {
  return modules ? modules.map(function (m) {
    return m[key];
  }).filter(function (_) {
    return _;
  }) : [];
}

function addProp(el, name, value, range, dynamic) {
  (el.props || (el.props = [])).push(rangeSetItem({
    name: name,
    value: value,
    dynamic: dynamic
  }, range));
  el.plain = false;
}

function addAttr(el, name, value, range, dynamic) {
  var attrs = dynamic ? el.dynamicAttrs || (el.dynamicAttrs = []) : el.attrs || (el.attrs = []);
  attrs.push(rangeSetItem({
    name: name,
    value: value,
    dynamic: dynamic
  }, range));
  el.plain = false;
} // add a raw attr (use this in preTransforms)


function addRawAttr(el, name, value, range) {
  el.attrsMap[name] = value;
  el.attrsList.push(rangeSetItem({
    name: name,
    value: value
  }, range));
}

function addDirective(el, name, rawName, value, arg, isDynamicArg, modifiers, range) {
  (el.directives || (el.directives = [])).push(rangeSetItem({
    name: name,
    rawName: rawName,
    value: value,
    arg: arg,
    isDynamicArg: isDynamicArg,
    modifiers: modifiers
  }, range));
  el.plain = false;
}

function prependModifierMarker(symbol, name, dynamic) {
  return dynamic ? "_p(" + name + ",\"" + symbol + "\")" : symbol + name; // mark the event as captured
}

function addHandler(el, name, value, modifiers, important, warn, range, dynamic) {
  modifiers = modifiers || emptyObject; // warn prevent and passive modifier

  /* istanbul ignore if */

  if ( true && warn && modifiers.prevent && modifiers.passive) {
    warn('passive and prevent can\'t be used together. ' + 'Passive handler can\'t prevent default event.', range);
  } // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.


  if (modifiers.right) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
    } else if (name === 'click') {
      name = 'contextmenu';
      delete modifiers.right;
    }
  } else if (modifiers.middle) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
    } else if (name === 'click') {
      name = 'mouseup';
    }
  } // check capture modifier


  if (modifiers.capture) {
    delete modifiers.capture;
    name = prependModifierMarker('!', name, dynamic);
  }

  if (modifiers.once) {
    delete modifiers.once;
    name = prependModifierMarker('~', name, dynamic);
  }
  /* istanbul ignore if */


  if (modifiers.passive) {
    delete modifiers.passive;
    name = prependModifierMarker('&', name, dynamic);
  }

  var events;

  if (modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = rangeSetItem({
    value: value.trim(),
    dynamic: dynamic
  }, range);

  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */

  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getRawBindingAttr(el, name) {
  return el.rawAttrsMap[':' + name] || el.rawAttrsMap['v-bind:' + name] || el.rawAttrsMap[name];
}

function getBindingAttr(el, name, getStatic) {
  var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);

  if (dynamicValue != null) {
    return parseFilters(dynamicValue);
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);

    if (staticValue != null) {
      return JSON.stringify(staticValue);
    }
  }
} // note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.


function getAndRemoveAttr(el, name, removeFromMap) {
  var val;

  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;

    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break;
      }
    }
  }

  if (removeFromMap) {
    delete el.attrsMap[name];
  }

  return val;
}

function getAndRemoveAttrByRegex(el, name) {
  var list = el.attrsList;

  for (var i = 0, l = list.length; i < l; i++) {
    var attr = list[i];

    if (name.test(attr.name)) {
      list.splice(i, 1);
      return attr;
    }
  }
}

function rangeSetItem(item, range) {
  if (range) {
    if (range.start != null) {
      item.start = range.start;
    }

    if (range.end != null) {
      item.end = range.end;
    }
  }

  return item;
}
/*  */


var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:/;
var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;
var dynamicArgRE = /^\[.*\]$/;
var argRE = /:(.*)$/;
var bindRE = /^:|^\.|^v-bind:/;
var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;
var slotRE = /^v-slot(:|$)|^#/;
var lineBreakRE = /[\r\n]/;
var whitespaceRE$1 = /\s+/g;
var invalidAttributeRE = /[\s"'<>\/=]/;
var decodeHTMLCached = cached(he.decode);
var emptySlotScopeToken = "_empty_"; // configurable state

var warn$1;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;
var maybeComponent;

function createASTElement(tag, attrs, parent) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    rawAttrsMap: {},
    parent: parent,
    children: []
  };
}
/**
 * Convert HTML string to AST.
 */


function parse(template, options) {
  warn$1 = options.warn || baseWarn;
  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  var isReservedTag = options.isReservedTag || no;

  maybeComponent = function maybeComponent(el) {
    return !!el.component || !isReservedTag(el.tag);
  };

  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');
  delimiters = options.delimiters;
  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var whitespaceOption = options.whitespace;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce(msg, range) {
    if (!warned) {
      warned = true;
      warn$1(msg, range);
    }
  }

  function closeElement(element) {
    trimEndingWhitespace(element);

    if (!inVPre && !element.processed) {
      element = processElement(element, options);
    } // tree management


    if (!stack.length && element !== root) {
      // allow root elements with v-if, v-else-if and v-else
      if (root.if && (element.elseif || element.else)) {
        if (true) {
          checkRootConstraints(element);
        }

        addIfCondition(root, {
          exp: element.elseif,
          block: element
        });
      } else if (true) {
        warnOnce("Component template should contain exactly one root element. " + "If you are using v-if on multiple elements, " + "use v-else-if to chain them instead.", {
          start: element.start
        });
      }
    }

    if (currentParent && !element.forbidden) {
      if (element.elseif || element.else) {
        processIfConditions(element, currentParent);
      } else {
        if (element.slotScope) {
          // scoped slot
          // keep it in the children list so that v-else(-if) conditions can
          // find it as the prev node.
          var name = element.slotTarget || '"default"';
          (currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        }

        currentParent.children.push(element);
        element.parent = currentParent;
      }
    } // final children cleanup
    // filter out scoped slots


    element.children = element.children.filter(function (c) {
      return !c.slotScope;
    }); // remove trailing whitespace node again

    trimEndingWhitespace(element); // check pre state

    if (element.pre) {
      inVPre = false;
    }

    if (platformIsPreTag(element.tag)) {
      inPre = false;
    } // apply post-transforms


    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  function trimEndingWhitespace(el) {
    // remove trailing whitespace node
    if (!inPre) {
      var lastNode;

      while ((lastNode = el.children[el.children.length - 1]) && lastNode.type === 3 && lastNode.text === ' ') {
        el.children.pop();
      }
    }
  }

  function checkRootConstraints(el) {
    if (el.tag === 'slot' || el.tag === 'template') {
      warnOnce("Cannot use <" + el.tag + "> as component root element because it may " + 'contain multiple nodes.', {
        start: el.start
      });
    }

    if (el.attrsMap.hasOwnProperty('v-for')) {
      warnOnce('Cannot use v-for on stateful component root element because ' + 'it renders multiple elements.', el.rawAttrsMap['v-for']);
    }
  }

  parseHTML(template, {
    warn: warn$1,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    outputSourceRange: options.outputSourceRange,
    start: function start(tag, attrs, unary, start$1, end) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = currentParent && currentParent.ns || platformGetTagNamespace(tag); // handle IE svg bug

      /* istanbul ignore if */

      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);

      if (ns) {
        element.ns = ns;
      }

      if (true) {
        if (options.outputSourceRange) {
          element.start = start$1;
          element.end = end;
          element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {
            cumulated[attr.name] = attr;
            return cumulated;
          }, {});
        }

        attrs.forEach(function (attr) {
          if (invalidAttributeRE.test(attr.name)) {
            warn$1("Invalid dynamic argument expression: attribute names cannot contain " + "spaces, quotes, <, >, / or =.", {
              start: attr.start + attr.name.indexOf("["),
              end: attr.start + attr.name.length
            });
          }
        });
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
         true && warn$1('Templates should only be responsible for mapping the state to the ' + 'UI. Avoid placing tags with side-effects in your templates, such as ' + "<" + tag + ">" + ', as they will not be parsed.', {
          start: element.start
        });
      } // apply pre-transforms


      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);

        if (element.pre) {
          inVPre = true;
        }
      }

      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }

      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element);
      }

      if (!root) {
        root = element;

        if (true) {
          checkRootConstraints(root);
        }
      }

      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },
    end: function end(tag, start, end$1) {
      var element = stack[stack.length - 1]; // pop stack

      stack.length -= 1;
      currentParent = stack[stack.length - 1];

      if ( true && options.outputSourceRange) {
        element.end = end$1;
      }

      closeElement(element);
    },
    chars: function chars(text, start, end) {
      if (!currentParent) {
        if (true) {
          if (text === template) {
            warnOnce('Component template requires a root element, rather than just text.', {
              start: start
            });
          } else if (text = text.trim()) {
            warnOnce("text \"" + text + "\" outside root element will be ignored.", {
              start: start
            });
          }
        }

        return;
      } // IE textarea placeholder bug

      /* istanbul ignore if */


      if (isIE && currentParent.tag === 'textarea' && currentParent.attrsMap.placeholder === text) {
        return;
      }

      var children = currentParent.children;

      if (inPre || text.trim()) {
        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
      } else if (!children.length) {
        // remove the whitespace-only node right after an opening tag
        text = '';
      } else if (whitespaceOption) {
        if (whitespaceOption === 'condense') {
          // in condense mode, remove the whitespace node if it contains
          // line break, otherwise condense to a single space
          text = lineBreakRE.test(text) ? '' : ' ';
        } else {
          text = ' ';
        }
      } else {
        text = preserveWhitespace ? ' ' : '';
      }

      if (text) {
        if (!inPre && whitespaceOption === 'condense') {
          // condense consecutive whitespaces into single space
          text = text.replace(whitespaceRE$1, ' ');
        }

        var res;
        var child;

        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          child = {
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          };
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          child = {
            type: 3,
            text: text
          };
        }

        if (child) {
          if ( true && options.outputSourceRange) {
            child.start = start;
            child.end = end;
          }

          children.push(child);
        }
      }
    },
    comment: function comment(text, start, end) {
      // adding anyting as a sibling to the root node is forbidden
      // comments should still be allowed, but ignored
      if (currentParent) {
        var child = {
          type: 3,
          text: text,
          isComment: true
        };

        if ( true && options.outputSourceRange) {
          child.start = start;
          child.end = end;
        }

        currentParent.children.push(child);
      }
    }
  });
  return root;
}

function processPre(el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs(el) {
  var list = el.attrsList;
  var len = list.length;

  if (len) {
    var attrs = el.attrs = new Array(len);

    for (var i = 0; i < len; i++) {
      attrs[i] = {
        name: list[i].name,
        value: JSON.stringify(list[i].value)
      };

      if (list[i].start != null) {
        attrs[i].start = list[i].start;
        attrs[i].end = list[i].end;
      }
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement(element, options) {
  processKey(element); // determine whether this is a plain element after
  // removing structural attributes

  element.plain = !element.key && !element.scopedSlots && !element.attrsList.length;
  processRef(element);
  processSlotContent(element);
  processSlotOutlet(element);
  processComponent(element);

  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }

  processAttrs(element);
  return element;
}

function processKey(el) {
  var exp = getBindingAttr(el, 'key');

  if (exp) {
    if (true) {
      if (el.tag === 'template') {
        warn$1("<template> cannot be keyed. Place the key on real elements instead.", getRawBindingAttr(el, 'key'));
      }

      if (el.for) {
        var iterator = el.iterator2 || el.iterator1;
        var parent = el.parent;

        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {
          warn$1("Do not use v-for index as key on <transition-group> children, " + "this is the same as not using keys.", getRawBindingAttr(el, 'key'), true
          /* tip */
          );
        }
      }
    }

    el.key = exp;
  }
}

function processRef(el) {
  var ref = getBindingAttr(el, 'ref');

  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor(el) {
  var exp;

  if (exp = getAndRemoveAttr(el, 'v-for')) {
    var res = parseFor(exp);

    if (res) {
      extend(el, res);
    } else if (true) {
      warn$1("Invalid v-for expression: " + exp, el.rawAttrsMap['v-for']);
    }
  }
}

function parseFor(exp) {
  var inMatch = exp.match(forAliasRE);

  if (!inMatch) {
    return;
  }

  var res = {};
  res.for = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);

  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '').trim();
    res.iterator1 = iteratorMatch[1].trim();

    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }

  return res;
}

function processIf(el) {
  var exp = getAndRemoveAttr(el, 'v-if');

  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }

    var elseif = getAndRemoveAttr(el, 'v-else-if');

    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions(el, parent) {
  var prev = findPrevElement(parent.children);

  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else if (true) {
    warn$1("v-" + (el.elseif ? 'else-if="' + el.elseif + '"' : 'else') + " " + "used on element <" + el.tag + "> without corresponding v-if.", el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']);
  }
}

function findPrevElement(children) {
  var i = children.length;

  while (i--) {
    if (children[i].type === 1) {
      return children[i];
    } else {
      if ( true && children[i].text !== ' ') {
        warn$1("text \"" + children[i].text.trim() + "\" between v-if and v-else(-if) " + "will be ignored.", children[i]);
      }

      children.pop();
    }
  }
}

function addIfCondition(el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }

  el.ifConditions.push(condition);
}

function processOnce(el) {
  var once = getAndRemoveAttr(el, 'v-once');

  if (once != null) {
    el.once = true;
  }
} // handle content being passed to a component as slot,
// e.g. <template slot="xxx">, <div slot-scope="xxx">


function processSlotContent(el) {
  var slotScope;

  if (el.tag === 'template') {
    slotScope = getAndRemoveAttr(el, 'scope');
    /* istanbul ignore if */

    if ( true && slotScope) {
      warn$1("the \"scope\" attribute for scoped slots have been deprecated and " + "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " + "can also be used on plain elements in addition to <template> to " + "denote scoped slots.", el.rawAttrsMap['scope'], true);
    }

    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
  } else if (slotScope = getAndRemoveAttr(el, 'slot-scope')) {
    /* istanbul ignore if */
    if ( true && el.attrsMap['v-for']) {
      warn$1("Ambiguous combined usage of slot-scope and v-for on <" + el.tag + "> " + "(v-for takes higher priority). Use a wrapper <template> for the " + "scoped slot to make it clearer.", el.rawAttrsMap['slot-scope'], true);
    }

    el.slotScope = slotScope;
  } // slot="xxx"


  var slotTarget = getBindingAttr(el, 'slot');

  if (slotTarget) {
    el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']); // preserve slot as an attribute for native shadow DOM compat
    // only for non-scoped slots.

    if (el.tag !== 'template' && !el.slotScope) {
      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
    }
  } // 2.6 v-slot syntax


  {
    if (el.tag === 'template') {
      // v-slot on <template>
      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);

      if (slotBinding) {
        if (true) {
          if (el.slotTarget || el.slotScope) {
            warn$1("Unexpected mixed usage of different slot syntaxes.", el);
          }

          if (el.parent && !maybeComponent(el.parent)) {
            warn$1("<template v-slot> can only appear at the root level inside " + "the receiving the component", el);
          }
        }

        var ref = getSlotName(slotBinding);
        var name = ref.name;
        var dynamic = ref.dynamic;
        el.slotTarget = name;
        el.slotTargetDynamic = dynamic;
        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
      }
    } else {
      // v-slot on component, denotes default slot
      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);

      if (slotBinding$1) {
        if (true) {
          if (!maybeComponent(el)) {
            warn$1("v-slot can only be used on components or <template>.", slotBinding$1);
          }

          if (el.slotScope || el.slotTarget) {
            warn$1("Unexpected mixed usage of different slot syntaxes.", el);
          }

          if (el.scopedSlots) {
            warn$1("To avoid scope ambiguity, the default slot should also use " + "<template> syntax when there are other named slots.", slotBinding$1);
          }
        } // add the component's children to its default slot


        var slots = el.scopedSlots || (el.scopedSlots = {});
        var ref$1 = getSlotName(slotBinding$1);
        var name$1 = ref$1.name;
        var dynamic$1 = ref$1.dynamic;
        var slotContainer = slots[name$1] = createASTElement('template', [], el);
        slotContainer.slotTarget = name$1;
        slotContainer.slotTargetDynamic = dynamic$1;
        slotContainer.children = el.children.filter(function (c) {
          if (!c.slotScope) {
            c.parent = slotContainer;
            return true;
          }
        });
        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken; // remove children as they are returned from scopedSlots now

        el.children = []; // mark el non-plain so data gets generated

        el.plain = false;
      }
    }
  }
}

function getSlotName(binding) {
  var name = binding.name.replace(slotRE, '');

  if (!name) {
    if (binding.name[0] !== '#') {
      name = 'default';
    } else if (true) {
      warn$1("v-slot shorthand syntax requires a slot name.", binding);
    }
  }

  return dynamicArgRE.test(name) // dynamic [name]
  ? {
    name: name.slice(1, -1),
    dynamic: true
  } // static name
  : {
    name: "\"" + name + "\"",
    dynamic: false
  };
} // handle <slot/> outlets


function processSlotOutlet(el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');

    if ( true && el.key) {
      warn$1("`key` does not work on <slot> because slots are abstract outlets " + "and can possibly expand into multiple elements. " + "Use the key on a wrapping element instead.", getRawBindingAttr(el, 'key'));
    }
  }
}

function processComponent(el) {
  var binding;

  if (binding = getBindingAttr(el, 'is')) {
    el.component = binding;
  }

  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs(el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;

  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;

    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true; // modifiers

      modifiers = parseModifiers(name.replace(dirRE, '')); // support .foo shorthand syntax for the .prop modifier

      if (modifiers) {
        name = name.replace(modifierRE, '');
      }

      if (bindRE.test(name)) {
        // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isDynamic = dynamicArgRE.test(name);

        if (isDynamic) {
          name = name.slice(1, -1);
        }

        if ( true && value.trim().length === 0) {
          warn$1("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"");
        }

        if (modifiers) {
          if (modifiers.prop && !isDynamic) {
            name = camelize(name);

            if (name === 'innerHtml') {
              name = 'innerHTML';
            }
          }

          if (modifiers.camel && !isDynamic) {
            name = camelize(name);
          }

          if (modifiers.sync) {
            syncGen = genAssignmentCode(value, "$event");

            if (!isDynamic) {
              addHandler(el, "update:" + camelize(name), syncGen, null, false, warn$1, list[i]);

              if (hyphenate(name) !== camelize(name)) {
                addHandler(el, "update:" + hyphenate(name), syncGen, null, false, warn$1, list[i]);
              }
            } else {
              // handler w/ dynamic event name
              addHandler(el, "\"update:\"+(" + name + ")", syncGen, null, false, warn$1, list[i], true // dynamic
              );
            }
          }
        }

        if (modifiers && modifiers.prop || !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
          addProp(el, name, value, list[i], isDynamic);
        } else {
          addAttr(el, name, value, list[i], isDynamic);
        }
      } else if (onRE.test(name)) {
        // v-on
        name = name.replace(onRE, '');
        isDynamic = dynamicArgRE.test(name);

        if (isDynamic) {
          name = name.slice(1, -1);
        }

        addHandler(el, name, value, modifiers, false, warn$1, list[i], isDynamic);
      } else {
        // normal directives
        name = name.replace(dirRE, ''); // parse arg

        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        isDynamic = false;

        if (arg) {
          name = name.slice(0, -(arg.length + 1));

          if (dynamicArgRE.test(arg)) {
            arg = arg.slice(1, -1);
            isDynamic = true;
          }
        }

        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);

        if ( true && name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      if (true) {
        var res = parseText(value, delimiters);

        if (res) {
          warn$1(name + "=\"" + value + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div id="{{ val }}">, use <div :id="val">.', list[i]);
        }
      }

      addAttr(el, name, JSON.stringify(value), list[i]); // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation

      if (!el.component && name === 'muted' && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true', list[i]);
      }
    }
  }
}

function checkInFor(el) {
  var parent = el;

  while (parent) {
    if (parent.for !== undefined) {
      return true;
    }

    parent = parent.parent;
  }

  return false;
}

function parseModifiers(name) {
  var match = name.match(modifierRE);

  if (match) {
    var ret = {};
    match.forEach(function (m) {
      ret[m.slice(1)] = true;
    });
    return ret;
  }
}

function makeAttrsMap(attrs) {
  var map = {};

  for (var i = 0, l = attrs.length; i < l; i++) {
    if ( true && map[attrs[i].name] && !isIE && !isEdge) {
      warn$1('duplicate attribute: ' + attrs[i].name, attrs[i]);
    }

    map[attrs[i].name] = attrs[i].value;
  }

  return map;
} // for script (e.g. type="x/template") or style, do not decode content


function isTextTag(el) {
  return el.tag === 'script' || el.tag === 'style';
}

function isForbiddenTag(el) {
  return el.tag === 'style' || el.tag === 'script' && (!el.attrsMap.type || el.attrsMap.type === 'text/javascript');
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;
/* istanbul ignore next */

function guardIESVGBug(attrs) {
  var res = [];

  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];

    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }

  return res;
}

function checkForAliasModel(el, value) {
  var _el = el;

  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$1("<" + el.tag + " v-model=\"" + value + "\">: " + "You are binding v-model directly to a v-for iteration alias. " + "This will not be able to modify the v-for source array because " + "writing to the alias is like modifying a function local variable. " + "Consider using an array of objects and use v-model on an object property instead.", el.rawAttrsMap['v-model']);
    }

    _el = _el.parent;
  }
}
/*  */


var isStaticKey;
var isPlatformReservedTag;
var genStaticKeysCached = cached(genStaticKeys$1);
/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */

function optimize(root, options) {
  if (!root) {
    return;
  }

  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no; // first pass: mark all non-static nodes.

  markStatic$1(root); // second pass: mark static roots.

  markStaticRoots(root, false);
}

function genStaticKeys$1(keys) {
  return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' + (keys ? ',' + keys : ''));
}

function markStatic$1(node) {
  node.static = isStatic(node);

  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (!isPlatformReservedTag(node.tag) && node.tag !== 'slot' && node.attrsMap['inline-template'] == null) {
      return;
    }

    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);

      if (!child.static) {
        node.static = false;
      }
    }

    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);

        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots(node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    } // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.


    if (node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {
      node.staticRoot = true;
      return;
    } else {
      node.staticRoot = false;
    }

    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }

    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic(node) {
  if (node.type === 2) {
    // expression
    return false;
  }

  if (node.type === 3) {
    // text
    return true;
  }

  return !!(node.pre || !node.hasBindings && // no dynamic bindings
  !node.if && !node.for && // not v-if or v-for or v-else
  !isBuiltInTag(node.tag) && // not a built-in
  isPlatformReservedTag(node.tag) && // not a component
  !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));
}

function isDirectChildOfTemplateFor(node) {
  while (node.parent) {
    node = node.parent;

    if (node.tag !== 'template') {
      return false;
    }

    if (node.for) {
      return true;
    }
  }

  return false;
}
/*  */


var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function\s*(?:[\w$]+)?\s*\(/;
var fnInvokeRE = /\([^)]*?\);*$/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/; // KeyboardEvent.keyCode aliases

var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
}; // KeyboardEvent.key aliases

var keyNames = {
  // #7880: IE11 and Edge use `Esc` for Escape key name.
  esc: ['Esc', 'Escape'],
  tab: 'Tab',
  enter: 'Enter',
  // #9112: IE11 uses `Spacebar` for Space key name.
  space: [' ', 'Spacebar'],
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  // #9112: IE11 uses `Del` for Delete key name.
  'delete': ['Backspace', 'Delete', 'Del']
}; // #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once

var genGuard = function genGuard(condition) {
  return "if(" + condition + ")return null;";
};

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers(events, isNative) {
  var prefix = isNative ? 'nativeOn:' : 'on:';
  var staticHandlers = "";
  var dynamicHandlers = "";

  for (var name in events) {
    var handlerCode = genHandler(events[name]);

    if (events[name] && events[name].dynamic) {
      dynamicHandlers += name + "," + handlerCode + ",";
    } else {
      staticHandlers += "\"" + name + "\":" + handlerCode + ",";
    }
  }

  staticHandlers = "{" + staticHandlers.slice(0, -1) + "}";

  if (dynamicHandlers) {
    return prefix + "_d(" + staticHandlers + ",[" + dynamicHandlers.slice(0, -1) + "])";
  } else {
    return prefix + staticHandlers;
  }
}

function genHandler(handler) {
  if (!handler) {
    return 'function(){}';
  }

  if (Array.isArray(handler)) {
    return "[" + handler.map(function (handler) {
      return genHandler(handler);
    }).join(',') + "]";
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);
  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value;
    }

    return "function($event){" + (isFunctionInvocation ? "return " + handler.value : handler.value) + "}"; // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];

    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key]; // left/right

        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = handler.modifiers;
        genModifierCode += genGuard(['ctrl', 'shift', 'alt', 'meta'].filter(function (keyModifier) {
          return !modifiers[keyModifier];
        }).map(function (keyModifier) {
          return "$event." + keyModifier + "Key";
        }).join('||'));
      } else {
        keys.push(key);
      }
    }

    if (keys.length) {
      code += genKeyFilter(keys);
    } // Make sure modifiers like prevent and stop get executed after key filtering


    if (genModifierCode) {
      code += genModifierCode;
    }

    var handlerCode = isMethodPath ? "return " + handler.value + "($event)" : isFunctionExpression ? "return (" + handler.value + ")($event)" : isFunctionInvocation ? "return " + handler.value : handler.value;
    return "function($event){" + code + handlerCode + "}";
  }
}

function genKeyFilter(keys) {
  return (// make sure the key filters only apply to KeyboardEvents
    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
    // key events that do not have keyCode property...
    "if(!$event.type.indexOf('key')&&" + keys.map(genFilterCode).join('&&') + ")return null;"
  );
}

function genFilterCode(key) {
  var keyVal = parseInt(key, 10);

  if (keyVal) {
    return "$event.keyCode!==" + keyVal;
  }

  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return "_k($event.keyCode," + JSON.stringify(key) + "," + JSON.stringify(keyCode) + "," + "$event.key," + "" + JSON.stringify(keyName) + ")";
}
/*  */


function on(el, dir) {
  if ( true && dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }

  el.wrapListeners = function (code) {
    return "_g(" + code + "," + dir.value + ")";
  };
}
/*  */


function bind$1(el, dir) {
  el.wrapData = function (code) {
    return "_b(" + code + ",'" + el.tag + "'," + dir.value + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")";
  };
}
/*  */


var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};
/*  */

var CodegenState = function CodegenState(options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;

  this.maybeComponent = function (el) {
    return !!el.component || !isReservedTag(el.tag);
  };

  this.onceId = 0;
  this.staticRenderFns = [];
  this.pre = false;
};

function generate(ast, options) {
  var state = new CodegenState(options);
  var code = ast ? genElement(ast, state) : '_c("div")';
  return {
    render: "with(this){return " + code + "}",
    staticRenderFns: state.staticRenderFns
  };
}

function genElement(el, state) {
  if (el.parent) {
    el.pre = el.pre || el.parent.pre;
  }

  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state);
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state);
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state);
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
    return genChildren(el, state) || 'void 0';
  } else if (el.tag === 'slot') {
    return genSlot(el, state);
  } else {
    // component or element
    var code;

    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data;

      if (!el.plain || el.pre && state.maybeComponent(el)) {
        data = genData(el, state);
      }

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + el.tag + "'" + (data ? "," + data : '') + (children ? "," + children : '') + ")";
    } // module transforms


    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }

    return code;
  }
} // hoist static sub-trees out


function genStatic(el, state) {
  el.staticProcessed = true; // Some elements (templates) need to behave differently inside of a v-pre
  // node.  All pre nodes are static roots, so we can use this as a location to
  // wrap a state change and reset it upon exiting the pre node.

  var originalPreState = state.pre;

  if (el.pre) {
    state.pre = el.pre;
  }

  state.staticRenderFns.push("with(this){return " + genElement(el, state) + "}");
  state.pre = originalPreState;
  return "_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")";
} // v-once


function genOnce(el, state) {
  el.onceProcessed = true;

  if (el.if && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;

    while (parent) {
      if (parent.for) {
        key = parent.key;
        break;
      }

      parent = parent.parent;
    }

    if (!key) {
       true && state.warn("v-once can only be used inside v-for that is keyed. ", el.rawAttrsMap['v-once']);
      return genElement(el, state);
    }

    return "_o(" + genElement(el, state) + "," + state.onceId++ + "," + key + ")";
  } else {
    return genStatic(el, state);
  }
}

function genIf(el, state, altGen, altEmpty) {
  el.ifProcessed = true; // avoid recursion

  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty);
}

function genIfConditions(conditions, state, altGen, altEmpty) {
  if (!conditions.length) {
    return altEmpty || '_e()';
  }

  var condition = conditions.shift();

  if (condition.exp) {
    return "(" + condition.exp + ")?" + genTernaryExp(condition.block) + ":" + genIfConditions(conditions, state, altGen, altEmpty);
  } else {
    return "" + genTernaryExp(condition.block);
  } // v-if with v-once should generate code like (a)?_m(0):_m(1)


  function genTernaryExp(el) {
    return altGen ? altGen(el, state) : el.once ? genOnce(el, state) : genElement(el, state);
  }
}

function genFor(el, state, altGen, altHelper) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
  var iterator2 = el.iterator2 ? "," + el.iterator2 : '';

  if ( true && state.maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key) {
    state.warn("<" + el.tag + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " + "v-for should have explicit keys. " + "See https://vuejs.org/guide/list.html#key for more info.", el.rawAttrsMap['v-for'], true
    /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion

  return (altHelper || '_l') + "((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + (altGen || genElement)(el, state) + '})';
}

function genData(el, state) {
  var data = '{'; // directives first.
  // directives may mutate the el's other properties before they are generated.

  var dirs = genDirectives(el, state);

  if (dirs) {
    data += dirs + ',';
  } // key


  if (el.key) {
    data += "key:" + el.key + ",";
  } // ref


  if (el.ref) {
    data += "ref:" + el.ref + ",";
  }

  if (el.refInFor) {
    data += "refInFor:true,";
  } // pre


  if (el.pre) {
    data += "pre:true,";
  } // record original tag name for components using "is" attribute


  if (el.component) {
    data += "tag:\"" + el.tag + "\",";
  } // module data generation functions


  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  } // attributes


  if (el.attrs) {
    data += "attrs:" + genProps(el.attrs) + ",";
  } // DOM props


  if (el.props) {
    data += "domProps:" + genProps(el.props) + ",";
  } // event handlers


  if (el.events) {
    data += genHandlers(el.events, false) + ",";
  }

  if (el.nativeEvents) {
    data += genHandlers(el.nativeEvents, true) + ",";
  } // slot target
  // only for non-scoped slots


  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + el.slotTarget + ",";
  } // scoped slots


  if (el.scopedSlots) {
    data += genScopedSlots(el, el.scopedSlots, state) + ",";
  } // component v-model


  if (el.model) {
    data += "model:{value:" + el.model.value + ",callback:" + el.model.callback + ",expression:" + el.model.expression + "},";
  } // inline-template


  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);

    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }

  data = data.replace(/,$/, '') + '}'; // v-bind dynamic argument wrap
  // v-bind with dynamic arguments must be applied using the same v-bind object
  // merge helper so that class/style/mustUseProp attrs are handled correctly.

  if (el.dynamicAttrs) {
    data = "_b(" + data + ",\"" + el.tag + "\"," + genProps(el.dynamicAttrs) + ")";
  } // v-bind data wrap


  if (el.wrapData) {
    data = el.wrapData(data);
  } // v-on data wrap


  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }

  return data;
}

function genDirectives(el, state) {
  var dirs = el.directives;

  if (!dirs) {
    return;
  }

  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;

  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];

    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }

    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + dir.name + "\",rawName:\"" + dir.rawName + "\"" + (dir.value ? ",value:(" + dir.value + "),expression:" + JSON.stringify(dir.value) : '') + (dir.arg ? ",arg:" + (dir.isDynamicArg ? dir.arg : "\"" + dir.arg + "\"") : '') + (dir.modifiers ? ",modifiers:" + JSON.stringify(dir.modifiers) : '') + "},";
    }
  }

  if (hasRuntime) {
    return res.slice(0, -1) + ']';
  }
}

function genInlineTemplate(el, state) {
  var ast = el.children[0];

  if ( true && (el.children.length !== 1 || ast.type !== 1)) {
    state.warn('Inline-template components must have exactly one child element.', {
      start: el.start
    });
  }

  if (ast && ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return "inlineTemplate:{render:function(){" + inlineRenderFns.render + "},staticRenderFns:[" + inlineRenderFns.staticRenderFns.map(function (code) {
      return "function(){" + code + "}";
    }).join(',') + "]}";
  }
}

function genScopedSlots(el, slots, state) {
  // by default scoped slots are considered "stable", this allows child
  // components with only scoped slots to skip forced updates from parent.
  // but in some cases we have to bail-out of this optimization
  // for example if the slot contains dynamic names, has v-if or v-for on them...
  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {
    var slot = slots[key];
    return slot.slotTargetDynamic || slot.if || slot.for || containsSlotChild(slot) // is passing down slot from parent which may be dynamic
    ;
  }); // #9534: if a component with scoped slots is inside a conditional branch,
  // it's possible for the same component to be reused but with different
  // compiled slot content. To avoid that, we generate a unique key based on
  // the generated code of all the slot contents.

  var needsKey = !!el.if; // OR when it is inside another scoped slot or v-for (the reactivity may be
  // disconnected due to the intermediate scope variable)
  // #9438, #9506
  // TODO: this can be further optimized by properly analyzing in-scope bindings
  // and skip force updating ones that do not actually use scope variables.

  if (!needsForceUpdate) {
    var parent = el.parent;

    while (parent) {
      if (parent.slotScope && parent.slotScope !== emptySlotScopeToken || parent.for) {
        needsForceUpdate = true;
        break;
      }

      if (parent.if) {
        needsKey = true;
      }

      parent = parent.parent;
    }
  }

  var generatedSlots = Object.keys(slots).map(function (key) {
    return genScopedSlot(slots[key], state);
  }).join(',');
  return "scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? ",null,false," + hash(generatedSlots) : "") + ")";
}

function hash(str) {
  var hash = 5381;
  var i = str.length;

  while (i) {
    hash = hash * 33 ^ str.charCodeAt(--i);
  }

  return hash >>> 0;
}

function containsSlotChild(el) {
  if (el.type === 1) {
    if (el.tag === 'slot') {
      return true;
    }

    return el.children.some(containsSlotChild);
  }

  return false;
}

function genScopedSlot(el, state) {
  var isLegacySyntax = el.attrsMap['slot-scope'];

  if (el.if && !el.ifProcessed && !isLegacySyntax) {
    return genIf(el, state, genScopedSlot, "null");
  }

  if (el.for && !el.forProcessed) {
    return genFor(el, state, genScopedSlot);
  }

  var slotScope = el.slotScope === emptySlotScopeToken ? "" : String(el.slotScope);
  var fn = "function(" + slotScope + "){" + "return " + (el.tag === 'template' ? el.if && isLegacySyntax ? "(" + el.if + ")?" + (genChildren(el, state) || 'undefined') + ":undefined" : genChildren(el, state) || 'undefined' : genElement(el, state)) + "}"; // reverse proxy v-slot without scope on this.$slots

  var reverseProxy = slotScope ? "" : ",proxy:true";
  return "{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}";
}

function genChildren(el, state, checkSkip, altGenElement, altGenNode) {
  var children = el.children;

  if (children.length) {
    var el$1 = children[0]; // optimize single v-for

    if (children.length === 1 && el$1.for && el$1.tag !== 'template' && el$1.tag !== 'slot') {
      var normalizationType = checkSkip ? state.maybeComponent(el$1) ? ",1" : ",0" : "";
      return "" + (altGenElement || genElement)(el$1, state) + normalizationType;
    }

    var normalizationType$1 = checkSkip ? getNormalizationType(children, state.maybeComponent) : 0;
    var gen = altGenNode || genNode;
    return "[" + children.map(function (c) {
      return gen(c, state);
    }).join(',') + "]" + (normalizationType$1 ? "," + normalizationType$1 : '');
  }
} // determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed


function getNormalizationType(children, maybeComponent) {
  var res = 0;

  for (var i = 0; i < children.length; i++) {
    var el = children[i];

    if (el.type !== 1) {
      continue;
    }

    if (needsNormalization(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return needsNormalization(c.block);
    })) {
      res = 2;
      break;
    }

    if (maybeComponent(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return maybeComponent(c.block);
    })) {
      res = 1;
    }
  }

  return res;
}

function needsNormalization(el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot';
}

function genNode(node, state) {
  if (node.type === 1) {
    return genElement(node, state);
  } else if (node.type === 3 && node.isComment) {
    return genComment(node);
  } else {
    return genText(node);
  }
}

function genText(text) {
  return "_v(" + (text.type === 2 ? text.expression // no need for () because already wrapped in _s()
  : transformSpecialNewlines(JSON.stringify(text.text))) + ")";
}

function genComment(comment) {
  return "_e(" + JSON.stringify(comment.text) + ")";
}

function genSlot(el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? "," + children : '');
  var attrs = el.attrs || el.dynamicAttrs ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) {
    return {
      // slot props are camelized
      name: camelize(attr.name),
      value: attr.value,
      dynamic: attr.dynamic
    };
  })) : null;
  var bind = el.attrsMap['v-bind'];

  if ((attrs || bind) && !children) {
    res += ",null";
  }

  if (attrs) {
    res += "," + attrs;
  }

  if (bind) {
    res += (attrs ? '' : ',null') + "," + bind;
  }

  return res + ')';
} // componentName is el.component, take it as argument to shun flow's pessimistic refinement


function genComponent(componentName, el, state) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return "_c(" + componentName + "," + genData(el, state) + (children ? "," + children : '') + ")";
}

function genProps(props) {
  var staticProps = "";
  var dynamicProps = "";

  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    var value = transformSpecialNewlines(prop.value);

    if (prop.dynamic) {
      dynamicProps += prop.name + "," + value + ",";
    } else {
      staticProps += "\"" + prop.name + "\":" + value + ",";
    }
  }

  staticProps = "{" + staticProps.slice(0, -1) + "}";

  if (dynamicProps) {
    return "_d(" + staticProps + ",[" + dynamicProps.slice(0, -1) + "])";
  } else {
    return staticProps;
  }
} // #3895, #4268


function transformSpecialNewlines(text) {
  return text.replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
}
/*  */
// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed


var prohibitedKeywordRE = new RegExp('\\b' + ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' + 'super,throw,while,yield,delete,export,import,return,switch,default,' + 'extends,finally,continue,debugger,function,arguments').split(',').join('\\b|\\b') + '\\b'); // these unary operators should not be used as property/method names

var unaryOperatorsRE = new RegExp('\\b' + 'delete,typeof,void'.split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)'); // strip strings in expressions

var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g; // detect problematic expressions in a template

function detectErrors(ast, warn) {
  if (ast) {
    checkNode(ast, warn);
  }
}

function checkNode(node, warn) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];

        if (value) {
          var range = node.rawAttrsMap[name];

          if (name === 'v-for') {
            checkFor(node, "v-for=\"" + value + "\"", warn, range);
          } else if (onRE.test(name)) {
            checkEvent(value, name + "=\"" + value + "\"", warn, range);
          } else {
            checkExpression(value, name + "=\"" + value + "\"", warn, range);
          }
        }
      }
    }

    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], warn);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, warn, node);
  }
}

function checkEvent(exp, text, warn, range) {
  var stipped = exp.replace(stripStringRE, '');
  var keywordMatch = stipped.match(unaryOperatorsRE);

  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
    warn("avoid using JavaScript unary operator as property name: " + "\"" + keywordMatch[0] + "\" in expression " + text.trim(), range);
  }

  checkExpression(exp, text, warn, range);
}

function checkFor(node, text, warn, range) {
  checkExpression(node.for || '', text, warn, range);
  checkIdentifier(node.alias, 'v-for alias', text, warn, range);
  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
}

function checkIdentifier(ident, type, text, warn, range) {
  if (typeof ident === 'string') {
    try {
      new Function("var " + ident + "=_");
    } catch (e) {
      warn("invalid " + type + " \"" + ident + "\" in expression: " + text.trim(), range);
    }
  }
}

function checkExpression(exp, text, warn, range) {
  try {
    new Function("return " + exp);
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);

    if (keywordMatch) {
      warn("avoid using JavaScript keyword as property name: " + "\"" + keywordMatch[0] + "\"\n  Raw expression: " + text.trim(), range);
    } else {
      warn("invalid expression: " + e.message + " in\n\n" + "    " + exp + "\n\n" + "  Raw expression: " + text.trim() + "\n", range);
    }
  }
}
/*  */


var range = 2;

function generateCodeFrame(source, start, end) {
  if (start === void 0) start = 0;
  if (end === void 0) end = source.length;
  var lines = source.split(/\r?\n/);
  var count = 0;
  var res = [];

  for (var i = 0; i < lines.length; i++) {
    count += lines[i].length + 1;

    if (count >= start) {
      for (var j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) {
          continue;
        }

        res.push("" + (j + 1) + repeat$1(" ", 3 - String(j + 1).length) + "|  " + lines[j]);
        var lineLength = lines[j].length;

        if (j === i) {
          // push underline
          var pad = start - (count - lineLength) + 1;
          var length = end > count ? lineLength - pad : end - start;
          res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
        } else if (j > i) {
          if (end > count) {
            var length$1 = Math.min(end - count, lineLength);
            res.push("   |  " + repeat$1("^", length$1));
          }

          count += lineLength + 1;
        }
      }

      break;
    }
  }

  return res.join('\n');
}

function repeat$1(str, n) {
  var result = '';

  if (n > 0) {
    while (true) {
      // eslint-disable-line
      if (n & 1) {
        result += str;
      }

      n >>>= 1;

      if (n <= 0) {
        break;
      }

      str += str;
    }
  }

  return result;
}
/*  */


function createFunction(code, errors) {
  try {
    return new Function(code);
  } catch (err) {
    errors.push({
      err: err,
      code: code
    });
    return noop;
  }
}

function createCompileToFunctionFn(compile) {
  var cache = Object.create(null);
  return function compileToFunctions(template, options, vm) {
    options = extend({}, options);
    var warn$1 = options.warn || warn;
    delete options.warn;
    /* istanbul ignore if */

    if (true) {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn$1('It seems you are using the standalone build of Vue.js in an ' + 'environment with Content Security Policy that prohibits unsafe-eval. ' + 'The template compiler cannot work in this environment. Consider ' + 'relaxing the policy to allow unsafe-eval or pre-compiling your ' + 'templates into render functions.');
        }
      }
    } // check cache


    var key = options.delimiters ? String(options.delimiters) + template : template;

    if (cache[key]) {
      return cache[key];
    } // compile


    var compiled = compile(template, options); // check compilation errors/tips

    if (true) {
      if (compiled.errors && compiled.errors.length) {
        if (options.outputSourceRange) {
          compiled.errors.forEach(function (e) {
            warn$1("Error compiling template:\n\n" + e.msg + "\n\n" + generateCodeFrame(template, e.start, e.end), vm);
          });
        } else {
          warn$1("Error compiling template:\n\n" + template + "\n\n" + compiled.errors.map(function (e) {
            return "- " + e;
          }).join('\n') + '\n', vm);
        }
      }

      if (compiled.tips && compiled.tips.length) {
        if (options.outputSourceRange) {
          compiled.tips.forEach(function (e) {
            return tip(e.msg, vm);
          });
        } else {
          compiled.tips.forEach(function (msg) {
            return tip(msg, vm);
          });
        }
      }
    } // turn code into functions


    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors);
    }); // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use

    /* istanbul ignore if */

    if (true) {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn$1("Failed to generate render function:\n\n" + fnGenErrors.map(function (ref) {
          var err = ref.err;
          var code = ref.code;
          return err.toString() + " in\n\n" + code + "\n";
        }).join('\n'), vm);
      }
    }

    return cache[key] = res;
  };
}
/*  */


function createCompilerCreator(baseCompile) {
  return function createCompiler(baseOptions) {
    function compile(template, options) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];

      var warn = function warn(msg, range, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        if ( true && options.outputSourceRange) {
          // $flow-disable-line
          var leadingSpaceLength = template.match(/^\s*/)[0].length;

          warn = function warn(msg, range, tip) {
            var data = {
              msg: msg
            };

            if (range) {
              if (range.start != null) {
                data.start = range.start + leadingSpaceLength;
              }

              if (range.end != null) {
                data.end = range.end + leadingSpaceLength;
              }
            }

            (tip ? tips : errors).push(data);
          };
        } // merge custom modules


        if (options.modules) {
          finalOptions.modules = (baseOptions.modules || []).concat(options.modules);
        } // merge custom directives


        if (options.directives) {
          finalOptions.directives = extend(Object.create(baseOptions.directives || null), options.directives);
        } // copy other options


        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      finalOptions.warn = warn;
      var compiled = baseCompile(template.trim(), finalOptions);

      if (true) {
        detectErrors(compiled.ast, warn);
      }

      compiled.errors = errors;
      compiled.tips = tips;
      return compiled;
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    };
  };
}
/*  */
// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.


var createCompiler = createCompilerCreator(function baseCompile(template, options) {
  var ast = parse(template.trim(), options);

  if (options.optimize !== false) {
    optimize(ast, options);
  }

  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  };
});

function transformNode(el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');

  if ( true && staticClass) {
    var expression = parseText(staticClass, options.delimiters);

    if (expression) {
      warn("class=\"" + staticClass + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div class="{{ val }}">, use <div :class="val">.');
    }
  }

  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }

  var classBinding = getBindingAttr(el, 'class', false
  /* getStatic */
  );

  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData$1(el) {
  var data = '';

  if (el.staticClass) {
    data += "staticClass:" + el.staticClass + ",";
  }

  if (el.classBinding) {
    data += "class:" + el.classBinding + ",";
  }

  return data;
}

var class_$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData$1
};
var normalize$1 = cached(camelize);

function transformNode$1(el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  var ref = parseStaticStyle(staticStyle, options);
  var dynamic = ref.dynamic;
  var styleResult = ref.styleResult;

  if ( true && dynamic) {
    warn("style=\"" + String(staticStyle) + "\": " + 'Interpolation inside attributes has been deprecated. ' + 'Use v-bind or the colon shorthand instead.');
  }

  if (!dynamic && styleResult) {
    el.staticStyle = styleResult;
  }

  var styleBinding = getBindingAttr(el, 'style', false
  /* getStatic */
  );

  if (styleBinding) {
    el.styleBinding = styleBinding;
  } else if (dynamic) {
    el.styleBinding = styleResult;
  }
}

function genData$2(el) {
  var data = '';

  if (el.staticStyle) {
    data += "staticStyle:" + el.staticStyle + ",";
  }

  if (el.styleBinding) {
    data += "style:" + el.styleBinding + ",";
  }

  return data;
}

function parseStaticStyle(staticStyle, options) {
  // "width: 200px; height: 200px;" -> {width: 200, height: 200}
  // "width: 200px; height: {{y}}" -> {width: 200, height: y}
  var dynamic = false;
  var styleResult = '';

  if (staticStyle) {
    var styleList = staticStyle.trim().split(';').map(function (style) {
      var result = style.trim().split(':');

      if (result.length !== 2) {
        return;
      }

      var key = normalize$1(result[0].trim());
      var value = result[1].trim();
      var dynamicValue = parseText(value, options.delimiters);

      if (dynamicValue) {
        dynamic = true;
        return key + ':' + dynamicValue;
      }

      return key + ':' + JSON.stringify(value);
    }).filter(function (result) {
      return result;
    });

    if (styleList.length) {
      styleResult = '{' + styleList.join(',') + '}';
    }
  }

  return {
    dynamic: dynamic,
    styleResult: styleResult
  };
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$2
};

function preTransformNode(el) {
  var vfor;

  if (normalizeElementName(el.tag) === 'nativelistview') {
    vfor = getAndRemoveAttr(el, 'v-for');
    delete el.attrsMap['v-for'];

    if ( true && vfor) {
      warn("The v-for directive is not supported on a " + el.tag + ", " + 'Use the "for" attribute instead. For example, instead of ' + "<" + el.tag + " v-for=\"" + vfor + "\"> use <" + el.tag + " for=\"" + vfor + "\">.");
    }
  }

  var exp = getAndRemoveAttr(el, 'for') || vfor;

  if (!exp) {
    return;
  }

  var res = parseFor(exp);

  if (!res) {
    if (true) {
      warn("Invalid for expression: " + exp);
    }

    return;
  }

  addRawAttr(el, ':items', res.for);
  addRawAttr(el, '+alias', res.alias);

  if (res.iterator1) {
    addRawAttr(el, '+index', res.iterator1);
  }
}

var for_ = {
  preTransformNode: preTransformNode
};

function preTransformNode$1(el) {
  if (el.tag !== 'router-view') {
    return;
  }

  if (normalizeElementName(el.parent.tag) === 'nativeframe') {
    addAttr(el.parent, 'hasRouterView', 'true');
  }
}

var router = {
  preTransformNode: preTransformNode$1
};

function preTransformNode$2(el) {
  if (el.parent && el.parent.tag === 'v-template') {
    var alias = el.parent.parent.attrsMap['+alias'] || 'item';
    var index = el.parent.parent.attrsMap['+index'] || '$index';
    el.slotScope = buildScopeString(alias, index);
  }
}

var vTemplate$1 = {
  preTransformNode: preTransformNode$2
};

function buildScopeString(alias, index) {
  return "{ " + alias + ", " + index + ", $even, $odd }";
} // transforms ~test -> v-view:test


function transformNode$2(el) {
  var attr = Object.keys(el.attrsMap).find(function (attr) {
    return attr.startsWith('~');
  });

  if (attr) {
    var attrName = attr.substr(1);
    var ref = attrName.split('.');
    var arg = ref[0];
    var modifiers = ref.slice(1);
    modifiers = modifiers.reduce(function (mods, mod) {
      mods[mod] = true;
      return mods;
    }, {});
    getAndRemoveAttr(el, attr, true);
    addDirective(el, 'view', "v-view:" + attrName, '', arg, false, modifiers);
  }
}

var view = {
  transformNode: transformNode$2
};
var modules$1 = [class_$1, style$1, vTemplate$1, for_, router, view];

function model(el, dir) {
  if (el.type === 1 && isKnownView(el.tag)) {
    genDefaultModel(el, dir.value, dir.modifiers);
  } else {
    genComponentModel(el, dir.value, dir.modifiers);
  }
}

function genDefaultModel(el, value, modifiers) {
  var ref = modifiers || {};
  var trim = ref.trim;
  var number = ref.number;
  var ref$1 = getViewMeta(el.tag).model;
  var prop = ref$1.prop;
  var event = ref$1.event;
  var valueExpression = "$event.value" + (trim ? '.trim()' : '');

  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  addAttr(el, prop, "(" + value + ")");
  addHandler(el, event, code, null, true);
}

var directives$1 = {
  model: model
};
var baseOptions = {
  modules: modules$1,
  directives: directives$1,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  preserveWhitespace: false,
  staticKeys: genStaticKeys(modules$1)
};
var ref$1 = createCompiler(baseOptions);
var compileToFunctions = ref$1.compileToFunctions;

function Vue(options) {
  if ( true && !(this instanceof Vue)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }

  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);

    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    } // additional parameters


    var args = toArray(arguments, 1);
    args.unshift(this);

    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }

    installedPlugins.push(plugin);
    return this;
  };
}
/*  */


function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
/*  */


function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;
  /**
   * Class inheritance
   */

  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});

    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;

    if ( true && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };

    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super; // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.

    if (Sub.options.props) {
      initProps$1(Sub);
    }

    if (Sub.options.computed) {
      initComputed$1(Sub);
    } // allow further extension/mixin/plugin usage


    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use; // create asset registers, so extended classes
    // can have their private assets too.

    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    }); // enable recursive self-lookup

    if (name) {
      Sub.options.components[name] = Sub;
    } // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.


    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options); // cache constructor

    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;

  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;

  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
/*  */


function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if ( true && type === 'component') {
          validateComponentName(id);
        }

        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }

        if (type === 'directive' && typeof definition === 'function') {
          definition = {
            bind: definition,
            update: definition
          };
        }

        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}
/*  */


function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp$1(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */


  return false;
}

function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;

  for (var key in cache) {
    var cachedNode = cache[key];

    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);

      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry(cache, key, keys, current) {
  var cached = cache[key];

  if (cached && (!current || cached.tag !== current.tag)) {
    cached.componentInstance.$destroy();
  }

  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: 'keep-alive',
  abstract: true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  created: function created() {
    this.cache = Object.create(null);
    this.keys = [];
  },
  destroyed: function destroyed() {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) {
        return matches(val, name);
      });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) {
        return !matches(val, name);
      });
    });
  },
  render: function render() {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;

    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;

      if ( // not included
      include && (!name || !matches(include, name)) || // excluded
      exclude && name && matches(exclude, name)) {
        return vnode;
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;

      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance; // make current key freshest

        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key); // prune oldest entry

        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }

    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive: KeepAlive
};
/*  */

function initGlobalAPI(Vue) {
  // config
  var configDef = {};

  configDef.get = function () {
    return config;
  };

  if (true) {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }

  Object.defineProperty(Vue, 'config', configDef); // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.

  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive
  };
  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick; // 2.6 explicit observable API

  Vue.observable = function (obj) {
    observe(obj);
    return obj;
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  }); // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.

  Vue.options._base = Vue;
  extend(Vue.options.components, builtInComponents);
  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
}); // expose FunctionalRenderContext for ssr runtime helper installation

Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});
Vue.version = '2.6.10'; // recursively search for possible transition defined inside the component root

function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;
    vnode = locateNode(vnode);
    var transition = vnode.data && vnode.data.transition;
    var originalVisibility = el.__vOriginalVisibility = el.getAttribute('visibility') === 'none' ? '' : el.getAttribute('visibility');

    if (value && transition) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.setAttribute('visibility', originalVisibility);
      });
    } else {
      el.setAttribute('visibility', value ? originalVisibility : 'collapsed');
    }
  },
  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;
    /* istanbul ignore if */

    if (!value === !oldValue) {
      return;
    }

    vnode = locateNode(vnode);
    var transition = vnode.data && vnode.data.transition;

    if (transition) {
      vnode.data.show = true;

      if (value) {
        enter(vnode, function () {
          el.setAttribute('visibility', el.__vOriginalVisibility);
        });
      } else {
        leave(vnode, function () {
          el.setAttribute('visibility', 'collapsed');
        });
      }
    } else {
      el.setAttribute('visibility', value ? el.__vOriginalVisibility : 'collapsed');
    }
  },
  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.setAttribute('visibility', el.__vOriginalVisibility);
    }
  }
};
var view$1 = {
  inserted: function inserted(el, ref) {
    var arg = ref.arg;
    var modifiers = ref.modifiers;
    var parent = el.parentNode.nativeView;

    if (parent) {
      if (modifiers.array) {
        parent[arg] = (parent[arg] || []).push(el.nativeView);
      } else {
        parent[arg] = el.nativeView;
      }
    }
  }
};
var platformDirectives = {
  show: show,
  view: view$1
}; // Ensure `application` and `frame` modules are loaded

Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isUnknownElement = isUnknownElement;
Vue.$document = Vue.prototype.$document = new DocumentNode();
Vue.compile = compileToFunctions;
Vue.registerElement = registerElement;
Object.assign(Vue.options.directives, platformDirectives);
Vue.prototype.__patch__ = patch;

Vue.prototype.$mount = function (el, hydrating) {
  var options = this.$options; // resolve template/el and convert to render function

  if (!options.render) {
    var template = options.template;

    if (template && typeof template !== 'string') {
      warn('invalid template option: ' + template, this);
      return this;
    }

    if (template) {
      var ref = compileToFunctions(template, {
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;
    }
  }

  return mountComponent(this, el, hydrating);
};

Vue.prototype.$start = function () {
  var self = this;
  var AppConstructor = Vue.extend(this.$options); // register NS components into Vue

  Object.values(getElementMap()).forEach(function (entry) {
    Vue.component(entry.meta.component.name, entry.meta.component);
  });
  application.on(application.launchEvent, function (args) {
    if (self.$el) {
      self.$destroy();
      self = new AppConstructor();
    }

    self.$mount();
    args.root = self.$el.nativeView;
  });
  application.run();
}; // Define a `nativeView` getter in every NS vue instance


Object.defineProperty(Vue.prototype, 'nativeView', {
  get: function get() {
    return this.$el.nativeView;
  }
});

function _findParentModalEntry(vm) {
  if (!vm) {
    return false;
  }

  var entry = vm.$parent;

  while (entry && entry.$options.name !== 'ModalEntry') {
    entry = entry.$parent;
  }

  return entry;
}

var ModalPlugin = {
  install: function install(Vue) {
    Vue.mixin({
      created: function created() {
        var self = this;
        this.$modal = {
          close: function close(data) {
            var entry = _findParentModalEntry(self);

            if (entry) {
              entry.closeCb(data);
            }
          }
        };
      }
    });

    Vue.prototype.$showModal = function (component, options) {
      var this$1 = this;
      return new Promise(function (resolve) {
        var resolved = false;

        var closeCb = function closeCb(data) {
          if (resolved) {
            return;
          }

          resolved = true;
          resolve(data);
          modalPage.closeModal(); // emitted to show up in devtools
          // for debugging purposes

          navEntryInstance.$emit('modal:close', data);
          navEntryInstance.$destroy();
        }; // build options object with defaults


        options = Object.assign({}, options, {
          context: null,
          closeCallback: closeCb
        });
        var navEntryInstance = new Vue({
          name: 'ModalEntry',
          parent: this$1.$root,
          methods: {
            closeCb: closeCb
          },
          render: function render(h) {
            return h(component, {
              props: options.props
            });
          }
        });
        var modalPage = navEntryInstance.$mount().$el.nativeView;
        this$1.$el.nativeView.showModal(modalPage, options);
      });
    };
  }
};

function getFrameInstance(frame) {
  // get the frame that we need to navigate
  // this can be a frame id (String)
  // a Vue ref to a frame
  // a Frame ViewNode
  // or a Frame instance
  if (isObject$1(frame) && isDef(frame.$el)) {
    frame = frame.$el.nativeView;
  } else if (isPrimitive(frame)) {
    frame = __webpack_require__("tns-core-modules/ui/frame").getFrameById(frame);
  } else if (isDef(frame.nativeView)) {
    frame = frame.nativeView;
  } // finally get the component instance for this frame


  return getFrame(frame.id);
}

function findParentNavigationEntry(vm) {
  if (!vm) {
    return false;
  }

  var entry = vm.$parent;

  while (entry && entry.$options.name !== 'NavigationEntry') {
    entry = entry.$parent;
  }

  return entry;
}

var NavigatorPlugin = {
  install: function install(Vue) {
    Vue.prototype.$navigateBack = function (options, backstackEntry) {
      if (backstackEntry === void 0) backstackEntry = null;
      var navEntry = findParentNavigationEntry(this);
      var defaultOptions = {
        frame: navEntry ? navEntry.$options.frame : 'default'
      };
      options = Object.assign({}, defaultOptions, options);
      var frame = getFrameInstance(options.frame);
      frame.back(backstackEntry);
    };

    Vue.prototype.$navigateTo = function (component, options) {
      var this$1 = this;
      var defaultOptions = {
        frame: 'default'
      }; // build options object with defaults

      options = Object.assign({}, defaultOptions, options);
      return new Promise(function (resolve) {
        var frame = getFrameInstance(options.frame);
        var navEntryInstance = new Vue({
          name: 'NavigationEntry',
          parent: this$1.$root,
          frame: frame,
          props: {
            frame: {
              default: frame.id
            }
          },
          render: function render(h) {
            return h(component, {
              props: options.props
            });
          }
        });
        var page = navEntryInstance.$mount().$el.nativeView;

        var handler = function handler(args) {
          if (args.isBackNavigation) {
            page.off('navigatedFrom', handler);
            navEntryInstance.$destroy();
          }
        };

        page.on('navigatedFrom', handler); // ensure that the navEntryInstance vue instance is destroyed when the
        // page is disposed (clearHistory: true for example)

        var dispose = page.disposeNativeView;

        page.disposeNativeView = function () {
          var args = [],
              len = arguments.length;

          while (len--) {
            args[len] = arguments[len];
          }

          navEntryInstance.$destroy();
          dispose.call(page, args);
        };

        frame.navigate(Object.assign({}, options, {
          create: function create() {
            return page;
          }
        }));
        resolve(page);
      });
    };
  }
};
Vue.config.silent = true;
setVue(Vue);
Vue.use(ModalPlugin);
Vue.use(NavigatorPlugin);
var newLineRegExp = /\\n/g;

console.log = function (log, inspect, Vue) {
  return function () {
    var args = [],
        len = arguments.length;

    while (len--) {
      args[len] = arguments[len];
    }

    return log.call.apply(log, [this].concat(Array.prototype.map.call(args, function (arg) {
      return inspect(arg, {
        depth: 2,
        colors: Vue.config.debug,
        showHidden: true
      }).replace(newLineRegExp, '\n');
    })));
  };
}(console.log, utilInspect, Vue);

global.__onLiveSyncCore = function () {
  var frame = __webpack_require__("tns-core-modules/ui/frame").topmost();

  if (frame) {
    if (frame.currentPage && frame.currentPage.modal) {
      frame.currentPage.modal.closeModal();
    }

    if (frame.currentPage) {
      frame.currentPage.addCssFile(__webpack_require__("tns-core-modules/application").getCssFileName());
    }
  }
}; // Fix a rollup problem which does not define
// module.export.default = Vue
// so a `import Vue from 'nativescript-vue'` will
// fail from a Typescript file


Vue.default = Vue;
module.exports = Vue;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/nativescript-dev-webpack/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/vue-hot-reload-api/dist/index.js":
/***/ (function(module, exports) {

var Vue; // late bind

var version;
var map = Object.create(null);

if (typeof window !== 'undefined') {
  window.__VUE_HOT_MAP__ = map;
}

var installed = false;
var isBrowserify = false;
var initHookName = 'beforeCreate';

exports.install = function (vue, browserify) {
  if (installed) {
    return;
  }

  installed = true;
  Vue = vue.__esModule ? vue.default : vue;
  version = Vue.version.split('.').map(Number);
  isBrowserify = browserify; // compat with < 2.0.0-alpha.7

  if (Vue.config._lifecycleHooks.indexOf('init') > -1) {
    initHookName = 'init';
  }

  exports.compatible = version[0] >= 2;

  if (!exports.compatible) {
    console.warn('[HMR] You are using a version of vue-hot-reload-api that is ' + 'only compatible with Vue.js core ^2.0.0.');
    return;
  }
};
/**
 * Create a record for a hot module, which keeps track of its constructor
 * and instances
 *
 * @param {String} id
 * @param {Object} options
 */


exports.createRecord = function (id, options) {
  if (map[id]) {
    return;
  }

  var Ctor = null;

  if (typeof options === 'function') {
    Ctor = options;
    options = Ctor.options;
  }

  makeOptionsHot(id, options);
  map[id] = {
    Ctor: Ctor,
    options: options,
    instances: []
  };
};
/**
 * Check if module is recorded
 *
 * @param {String} id
 */


exports.isRecorded = function (id) {
  return typeof map[id] !== 'undefined';
};
/**
 * Make a Component options object hot.
 *
 * @param {String} id
 * @param {Object} options
 */


function makeOptionsHot(id, options) {
  if (options.functional) {
    var render = options.render;

    options.render = function (h, ctx) {
      var instances = map[id].instances;

      if (ctx && instances.indexOf(ctx.parent) < 0) {
        instances.push(ctx.parent);
      }

      return render(h, ctx);
    };
  } else {
    injectHook(options, initHookName, function () {
      var record = map[id];

      if (!record.Ctor) {
        record.Ctor = this.constructor;
      }

      record.instances.push(this);
    });
    injectHook(options, 'beforeDestroy', function () {
      var instances = map[id].instances;
      instances.splice(instances.indexOf(this), 1);
    });
  }
}
/**
 * Inject a hook to a hot reloadable component so that
 * we can keep track of it.
 *
 * @param {Object} options
 * @param {String} name
 * @param {Function} hook
 */


function injectHook(options, name, hook) {
  var existing = options[name];
  options[name] = existing ? Array.isArray(existing) ? existing.concat(hook) : [existing, hook] : [hook];
}

function tryWrap(fn) {
  return function (id, arg) {
    try {
      fn(id, arg);
    } catch (e) {
      console.error(e);
      console.warn('Something went wrong during Vue component hot-reload. Full reload required.');
    }
  };
}

function updateOptions(oldOptions, newOptions) {
  for (var key in oldOptions) {
    if (!(key in newOptions)) {
      delete oldOptions[key];
    }
  }

  for (var key$1 in newOptions) {
    oldOptions[key$1] = newOptions[key$1];
  }
}

exports.rerender = tryWrap(function (id, options) {
  var record = map[id];

  if (!options) {
    record.instances.slice().forEach(function (instance) {
      instance.$forceUpdate();
    });
    return;
  }

  if (typeof options === 'function') {
    options = options.options;
  }

  if (record.Ctor) {
    record.Ctor.options.render = options.render;
    record.Ctor.options.staticRenderFns = options.staticRenderFns;
    record.instances.slice().forEach(function (instance) {
      instance.$options.render = options.render;
      instance.$options.staticRenderFns = options.staticRenderFns; // reset static trees
      // pre 2.5, all static trees are cached together on the instance

      if (instance._staticTrees) {
        instance._staticTrees = [];
      } // 2.5.0


      if (Array.isArray(record.Ctor.options.cached)) {
        record.Ctor.options.cached = [];
      } // 2.5.3


      if (Array.isArray(instance.$options.cached)) {
        instance.$options.cached = [];
      } // post 2.5.4: v-once trees are cached on instance._staticTrees.
      // Pure static trees are cached on the staticRenderFns array
      // (both already reset above)
      // 2.6: temporarily mark rendered scoped slots as unstable so that
      // child components can be forced to update


      var restore = patchScopedSlots(instance);
      instance.$forceUpdate();
      instance.$nextTick(restore);
    });
  } else {
    // functional or no instance created yet
    record.options.render = options.render;
    record.options.staticRenderFns = options.staticRenderFns; // handle functional component re-render

    if (record.options.functional) {
      // rerender with full options
      if (Object.keys(options).length > 2) {
        updateOptions(record.options, options);
      } else {
        // template-only rerender.
        // need to inject the style injection code for CSS modules
        // to work properly.
        var injectStyles = record.options._injectStyles;

        if (injectStyles) {
          var render = options.render;

          record.options.render = function (h, ctx) {
            injectStyles.call(ctx);
            return render(h, ctx);
          };
        }
      }

      record.options._Ctor = null; // 2.5.3

      if (Array.isArray(record.options.cached)) {
        record.options.cached = [];
      }

      record.instances.slice().forEach(function (instance) {
        instance.$forceUpdate();
      });
    }
  }
});
exports.reload = tryWrap(function (id, options) {
  var record = map[id];

  if (options) {
    if (typeof options === 'function') {
      options = options.options;
    }

    makeOptionsHot(id, options);

    if (record.Ctor) {
      if (version[1] < 2) {
        // preserve pre 2.2 behavior for global mixin handling
        record.Ctor.extendOptions = options;
      }

      var newCtor = record.Ctor.super.extend(options); // prevent record.options._Ctor from being overwritten accidentally

      newCtor.options._Ctor = record.options._Ctor;
      record.Ctor.options = newCtor.options;
      record.Ctor.cid = newCtor.cid;
      record.Ctor.prototype = newCtor.prototype;

      if (newCtor.release) {
        // temporary global mixin strategy used in < 2.0.0-alpha.6
        newCtor.release();
      }
    } else {
      updateOptions(record.options, options);
    }
  }

  record.instances.slice().forEach(function (instance) {
    if (instance.$vnode && instance.$vnode.context) {
      instance.$vnode.context.$forceUpdate();
    } else {
      console.warn('Root or manually mounted instance modified. Full reload required.');
    }
  });
}); // 2.6 optimizes template-compiled scoped slots and skips updates if child
// only uses scoped slots. We need to patch the scoped slots resolving helper
// to temporarily mark all scoped slots as unstable in order to force child
// updates.

function patchScopedSlots(instance) {
  if (!instance._u) {
    return;
  } // https://github.com/vuejs/vue/blob/dev/src/core/instance/render-helpers/resolve-scoped-slots.js


  var original = instance._u;

  instance._u = function (slots) {
    try {
      // 2.6.4 ~ 2.6.6
      return original(slots, true);
    } catch (e) {
      // 2.5 / >= 2.6.7
      return original(slots, null, true);
    }
  };

  return function () {
    instance._u = original;
  };
}

/***/ }),

/***/ "../node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvbmF0aXZlc2NyaXB0LXRoZW1lLWNvcmUvY3NzL2NvcmUubGlnaHQuY3NzIiwid2VicGFjazovLy9obXItdXBkYXRlLnRzIiwid2VicGFjazovLy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL25hdGl2ZXNjcmlwdC1kZXYtd2VicGFjay9ob3QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9uYXRpdmVzY3JpcHQtZGV2LXdlYnBhY2svbG9hZC1hcHBsaWNhdGlvbi1jc3MtcmVndWxhci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL25hdGl2ZXNjcmlwdC1kZXYtd2VicGFjay9sb2FkLWFwcGxpY2F0aW9uLWNzcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL25hdGl2ZXNjcmlwdC1kZXYtd2VicGFjay9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL25hdGl2ZXNjcmlwdC12dWUvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsImlkIiwicHVzaCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInRvQ29tbWVudCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImNvbmNhdCIsInNvdXJjZU1hcCIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJobXJQcmVmaXgiLCJsb2ciLCJpbmZvIiwibWVzc2FnZSIsImNvbnNvbGUiLCJ3YXJuIiwiZXJyb3IiLCJyZWZyZXNoIiwiaG90T3B0aW9ucyIsImlnbm9yZVVuYWNjZXB0ZWQiLCJpZ25vcmVEZWNsaW5lZCIsImlnbm9yZUVycm9yZWQiLCJvblVuYWNjZXB0ZWQiLCJjaGFpbiIsImxhc3QiLCJwb3AiLCJmb3JFYWNoIiwibW9kIiwib25EZWNsaW5lZCIsIm9uRXJyb3JlZCIsIm1vZHVsZUlkIiwidHlwZSIsIm5leHRIYXNoIiwiY3VycmVudEhhc2giLCJ1cFRvRGF0ZSIsImluZGV4T2YiLCJfX3dlYnBhY2tfaGFzaF9fIiwicmVzdWx0IiwiYXBwbGllZE1vZHVsZXMiLCJ1bmFjY2VwdGVkIiwiZmlsdGVyIiwibnVtYmVySWRzIiwiZXZlcnkiLCJjaGVjayIsIm9wdGlvbnMiLCJob3QiLCJ0aGVuIiwiYXBwbHkiLCJuZXh0Q2hlY2siLCJjYXRjaCIsImVyciIsInN0YXR1cyIsInN0YWNrIiwidXBkYXRlIiwibGF0ZXN0SGFzaCIsImdldE5leHRIYXNoIiwiaGFzaCIsImdldEZpbGVDb250ZW50IiwiZmlsZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVhZFRleHQiLCJob3RVcGRhdGVDb250ZW50IiwibWFuaWZlc3QiLCJwYXJzZSIsIm5ld0hhc2giLCJoIiwicmVqZWN0IiwiY2hlY2tTdGF0ZSIsImluaXRpYWxIYXNoIiwibG9hZENzcyIsInJlcXVpcmUiLCJhcHBDc3NDb250ZXh0IiwiZ2xvYmFsIiwicmVnaXN0ZXJXZWJwYWNrTW9kdWxlcyIsImxvYWRNb2R1bGVGbiIsImFwcGxpY2F0aW9uIiwibG9hZEFwcENzcyIsImciLCJGdW5jdGlvbiIsImUiLCJ3aW5kb3ciLCJwcm9jZXNzIiwiZW52IiwiYXJyYXlNYXAiLCJ4cyIsImYiLCJyZXMiLCJ4IiwiaGFzT3duIiwiY2FsbCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiaW5kZXhvZiIsImFyciIsIm9iaiIsImlzYXJyYXkiLCJBcnJheSIsImlzQXJyYXkiLCJoYXNPd24kMSIsImZvcmVhY2giLCJmbiIsImN0eCIsIlR5cGVFcnJvciIsImwiLCJrIiwiaGFzT3duJDIiLCJhcnJheVJlZHVjZSIsImFjYyIsImhhc0FjYyIsImFyZ3VtZW50cyIsInJlZHVjZSIsImhhc093biQzIiwidG9TdHJpbmckMSIsImlzRnVuY3Rpb24iLCJSZWdFeHAiLCJmb3JlYWNoJDEiLCJpc1N0cmluZyIsImNvbnRleHQiLCJjaGFyQXQiLCJ0b1N0cmluZyQyIiwiaXNBcmd1bWVudHMiLCJ2YWx1ZSIsInN0ciIsImNhbGxlZSIsImhhcyIsInRvU3RyaW5nJDMiLCJoYXNEb250RW51bUJ1ZyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiaGFzUHJvdG9FbnVtQnVnIiwiZG9udEVudW1zIiwia2V5c1NoaW0iLCJrZXlzIiwib2JqZWN0IiwiaXNPYmplY3QiLCJpc0FyZ3VtZW50cyQxIiwidGhlS2V5cyIsImluZGV4IiwibmFtZSIsInNraXBQcm90byIsImN0b3IiLCJjb25zdHJ1Y3RvciIsInNraXBDb25zdHJ1Y3RvciIsImRvbnRFbnVtIiwic2hpbSIsInNoaW1PYmplY3RLZXlzIiwib2JqZWN0S2V5cyIsImNvbW1vbmpzR2xvYmFsIiwiZ2xvYmFsVGhpcyIsInNlbGYiLCJjcmVhdGVDb21tb25qc01vZHVsZSIsImpzb24zIiwicm9vdCIsImlzTG9hZGVyIiwidW5kZWZpbmVkIiwiZnJlZUdsb2JhbCIsInJ1bkluQ29udGV4dCIsIk51bWJlciIsIlN0cmluZyIsIkRhdGUiLCJTeW50YXhFcnJvciIsIk1hdGgiLCJuYXRpdmVKU09OIiwib2JqZWN0UHJvdG8iLCJnZXRDbGFzcyIsImlzUHJvcGVydHkiLCJ1bmRlZiIsImlzRXh0ZW5kZWQiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJleGNlcHRpb24iLCJpc1N1cHBvcnRlZCIsInNlcmlhbGl6ZWQiLCJzdHJpbmdpZnlTdXBwb3J0ZWQiLCJ0b0pTT04iLCJwYXJzZVN1cHBvcnRlZCIsImZ1bmN0aW9uQ2xhc3MiLCJkYXRlQ2xhc3MiLCJudW1iZXJDbGFzcyIsInN0cmluZ0NsYXNzIiwiYXJyYXlDbGFzcyIsImJvb2xlYW5DbGFzcyIsImNoYXJJbmRleEJ1Z2d5IiwiZmxvb3IiLCJNb250aHMiLCJnZXREYXkiLCJ5ZWFyIiwibW9udGgiLCJwcm9wZXJ0eSIsIm1lbWJlcnMiLCJfX3Byb3RvX18iLCJvcmlnaW5hbCIsInBhcmVudCIsIlByaW1pdGl2ZVR5cGVzIiwiaXNIb3N0VHlwZSIsImNhbGxiYWNrIiwic2l6ZSIsIlByb3BlcnRpZXMiLCJ2YWx1ZU9mIiwiaGFzUHJvcGVydHkiLCJpc0NvbnN0cnVjdG9yIiwiRXNjYXBlcyIsImxlYWRpbmdaZXJvZXMiLCJ0b1BhZGRlZFN0cmluZyIsIndpZHRoIiwic2xpY2UiLCJ1bmljb2RlUHJlZml4IiwicXVvdGUiLCJ1c2VDaGFySW5kZXgiLCJzeW1ib2xzIiwic3BsaXQiLCJjaGFyQ29kZSIsImNoYXJDb2RlQXQiLCJzZXJpYWxpemUiLCJwcm9wZXJ0aWVzIiwid2hpdGVzcGFjZSIsImluZGVudGF0aW9uIiwiY2xhc3NOYW1lIiwiZGF0ZSIsInRpbWUiLCJob3VycyIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwicmVzdWx0cyIsImVsZW1lbnQiLCJwcmVmaXgiLCJmcm9tQ2hhckNvZGUiLCJVbmVzY2FwZXMiLCJJbmRleCIsIlNvdXJjZSIsImFib3J0IiwibGV4IiwiYmVnaW4iLCJwb3NpdGlvbiIsImlzU2lnbmVkIiwiZ2V0IiwiaGFzTWVtYmVycyIsIndhbGsiLCJub2RlVHlwZSIsIkpTT04zIiwib2JqZWN0S2V5cyQxIiwidmFsIiwidXRpbEluc3BlY3QiLCJpbnNwZWN0Iiwib3B0cyIsInNlZW4iLCJzdHlsaXplIiwic3R5bGl6ZU5vQ29sb3IiLCJkZXB0aCIsImNvbG9ycyIsImlzQm9vbGVhbiIsInNob3dIaWRkZW4iLCJfZXh0ZW5kIiwiaXNVbmRlZmluZWQiLCJjdXN0b21JbnNwZWN0Iiwic3R5bGl6ZVdpdGhDb2xvciIsImZvcm1hdFZhbHVlIiwic3R5bGVzIiwic3R5bGVUeXBlIiwiYXJnIiwic3R5bGUiLCJpc0Z1bmN0aW9uJDEiLCJpc051bWJlciIsImlzTnVsbCIsImhhc093biQ0IiwicHJvcCIsImlzUmVnRXhwIiwicmUiLCJvYmplY3RUb1N0cmluZyIsImlzRXJyb3IiLCJFcnJvciIsImlzRGF0ZSIsImQiLCJvIiwiYXJyYXlUb0hhc2giLCJhcnJheSIsImlkeCIsImZvcm1hdEFycmF5IiwicmVjdXJzZVRpbWVzIiwidmlzaWJsZUtleXMiLCJvdXRwdXQiLCJmb3JtYXRQcm9wZXJ0eSIsImtleSIsIm1hdGNoIiwiZm9ybWF0RXJyb3IiLCJyZXQiLCJwcmltaXRpdmUiLCJmb3JtYXRQcmltaXRpdmUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiYmFzZSIsImJyYWNlcyIsIm4iLCJ0b1VUQ1N0cmluZyIsInJlZHVjZVRvU2luZ2xlU3RyaW5nIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInNldCIsImxpbmUiLCJzdWJzdHIiLCJyZXBsYWNlIiwic2ltcGxlIiwicHJldiIsImN1ciIsIm9yaWdpbiIsImFkZCIsImVtcHR5T2JqZWN0IiwiZnJlZXplIiwiaXNVbmRlZiIsInYiLCJpc0RlZiIsImlzVHJ1ZSIsImlzRmFsc2UiLCJpc1ByaW1pdGl2ZSIsImlzT2JqZWN0JDEiLCJfdG9TdHJpbmciLCJ0b1Jhd1R5cGUiLCJpc1BsYWluT2JqZWN0IiwiaXNSZWdFeHAkMSIsImlzVmFsaWRBcnJheUluZGV4IiwicGFyc2VGbG9hdCIsImlzRmluaXRlIiwiaXNQcm9taXNlIiwidG9TdHJpbmckNCIsInRvTnVtYmVyIiwiaXNOYU4iLCJtYWtlTWFwIiwiZXhwZWN0c0xvd2VyQ2FzZSIsImNyZWF0ZSIsInRvTG93ZXJDYXNlIiwiaXNCdWlsdEluVGFnIiwiaXNSZXNlcnZlZEF0dHJpYnV0ZSIsInJlbW92ZSIsInNwbGljZSIsImhhc093biQ1IiwiY2FjaGVkIiwiY2FjaGUiLCJjYWNoZWRGbiIsImhpdCIsImNhbWVsaXplUkUiLCJjYW1lbGl6ZSIsIl8iLCJjIiwidG9VcHBlckNhc2UiLCJjYXBpdGFsaXplIiwiaHlwaGVuYXRlUkUiLCJoeXBoZW5hdGUiLCJwb2x5ZmlsbEJpbmQiLCJib3VuZEZuIiwiYSIsIl9sZW5ndGgiLCJuYXRpdmVCaW5kIiwiYmluZCIsInRvQXJyYXkiLCJzdGFydCIsImV4dGVuZCIsInRvIiwiX2Zyb20iLCJ0b09iamVjdCIsIm5vb3AiLCJiIiwibm8iLCJpZGVudGl0eSIsImdlblN0YXRpY0tleXMiLCJtIiwic3RhdGljS2V5cyIsImxvb3NlRXF1YWwiLCJpc09iamVjdEEiLCJpc09iamVjdEIiLCJpc0FycmF5QSIsImlzQXJyYXlCIiwiZ2V0VGltZSIsImtleXNBIiwia2V5c0IiLCJsb29zZUluZGV4T2YiLCJvbmNlIiwiY2FsbGVkIiwidW5pY29kZVJlZ0V4cCIsImlzUmVzZXJ2ZWQiLCJkZWYiLCJlbnVtZXJhYmxlIiwiZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImJhaWxSRSIsInBhcnNlUGF0aCIsInBhdGgiLCJ0ZXN0Iiwic2VnbWVudHMiLCJoYXNQcm90byIsImluQnJvd3NlciIsImluV2VleCIsIldYRW52aXJvbm1lbnQiLCJwbGF0Zm9ybSIsIndlZXhQbGF0Zm9ybSIsIlVBIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaXNJRSIsImlzSUU5IiwiaXNFZGdlIiwiaXNBbmRyb2lkIiwiaXNJT1MiLCJpc0Nocm9tZSIsImlzUGhhbnRvbUpTIiwiaXNGRiIsIm5hdGl2ZVdhdGNoIiwid2F0Y2giLCJhZGRFdmVudExpc3RlbmVyIiwiX2lzU2VydmVyIiwiaXNTZXJ2ZXJSZW5kZXJpbmciLCJWVUVfRU5WIiwiZGV2dG9vbHMiLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNOYXRpdmUiLCJDdG9yIiwiaGFzU3ltYm9sIiwiU3ltYm9sIiwiUmVmbGVjdCIsIm93bktleXMiLCJfU2V0IiwiU2V0IiwiY2xlYXIiLCJTU1JfQVRUUiIsIkFTU0VUX1RZUEVTIiwiTElGRUNZQ0xFX0hPT0tTIiwiY29uZmlnIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwic2lsZW50IiwicHJvZHVjdGlvblRpcCIsInBlcmZvcm1hbmNlIiwiZXJyb3JIYW5kbGVyIiwid2FybkhhbmRsZXIiLCJpZ25vcmVkRWxlbWVudHMiLCJrZXlDb2RlcyIsImlzUmVzZXJ2ZWRUYWciLCJpc1Jlc2VydmVkQXR0ciIsImlzVW5rbm93bkVsZW1lbnQiLCJnZXRUYWdOYW1lc3BhY2UiLCJwYXJzZVBsYXRmb3JtVGFnTmFtZSIsIm11c3RVc2VQcm9wIiwiYXN5bmMiLCJfbGlmZWN5Y2xlSG9va3MiLCJ0aXAiLCJnZW5lcmF0ZUNvbXBvbmVudFRyYWNlIiwiZm9ybWF0Q29tcG9uZW50TmFtZSIsImhhc0NvbnNvbGUiLCJjbGFzc2lmeVJFIiwiY2xhc3NpZnkiLCJtc2ciLCJ2bSIsInRyYWNlIiwiaW5jbHVkZUZpbGUiLCIkcm9vdCIsImNpZCIsIl9pc1Z1ZSIsIiRvcHRpb25zIiwiX2NvbXBvbmVudFRhZyIsIl9fZmlsZSIsInJlcGVhdCIsIiRwYXJlbnQiLCJ0cmVlIiwiY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlIiwidWlkIiwiRGVwIiwic3VicyIsImFkZFN1YiIsInN1YiIsInJlbW92ZVN1YiIsImRlcGVuZCIsInRhcmdldCIsImFkZERlcCIsIm5vdGlmeSIsInNvcnQiLCJ0YXJnZXRTdGFjayIsInB1c2hUYXJnZXQiLCJwb3BUYXJnZXQiLCJWTm9kZSIsInRhZyIsImNoaWxkcmVuIiwidGV4dCIsImVsbSIsImNvbXBvbmVudE9wdGlvbnMiLCJhc3luY0ZhY3RvcnkiLCJucyIsImZuQ29udGV4dCIsImZuT3B0aW9ucyIsImZuU2NvcGVJZCIsImNvbXBvbmVudEluc3RhbmNlIiwicmF3IiwiaXNTdGF0aWMiLCJpc1Jvb3RJbnNlcnQiLCJpc0NvbW1lbnQiLCJpc0Nsb25lZCIsImlzT25jZSIsImFzeW5jTWV0YSIsImlzQXN5bmNQbGFjZWhvbGRlciIsInByb3RvdHlwZUFjY2Vzc29ycyIsImNoaWxkIiwiZGVmaW5lUHJvcGVydGllcyIsImNyZWF0ZUVtcHR5Vk5vZGUiLCJub2RlIiwiY3JlYXRlVGV4dFZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsIm1ldGhvZHNUb1BhdGNoIiwibWV0aG9kIiwibXV0YXRvciIsImFyZ3MiLCJsZW4iLCJvYiIsIl9fb2JfXyIsImluc2VydGVkIiwib2JzZXJ2ZUFycmF5IiwiZGVwIiwiYXJyYXlLZXlzIiwic2hvdWxkT2JzZXJ2ZSIsInRvZ2dsZU9ic2VydmluZyIsIk9ic2VydmVyIiwidm1Db3VudCIsInByb3RvQXVnbWVudCIsImNvcHlBdWdtZW50IiwiZGVmaW5lUmVhY3RpdmUiLCJpdGVtcyIsIm9ic2VydmUiLCJzcmMiLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiY3VzdG9tU2V0dGVyIiwic2hhbGxvdyIsImdldHRlciIsInNldHRlciIsImNoaWxkT2IiLCJyZWFjdGl2ZUdldHRlciIsImRlcGVuZEFycmF5IiwicmVhY3RpdmVTZXR0ZXIiLCJuZXdWYWwiLCJtYXgiLCJkZWwiLCJzdHJhdHMiLCJlbCIsInByb3BzRGF0YSIsImRlZmF1bHRTdHJhdCIsIm1lcmdlRGF0YSIsImZyb20iLCJ0b1ZhbCIsImZyb21WYWwiLCJtZXJnZURhdGFPckZuIiwicGFyZW50VmFsIiwiY2hpbGRWYWwiLCJtZXJnZWREYXRhRm4iLCJtZXJnZWRJbnN0YW5jZURhdGFGbiIsImluc3RhbmNlRGF0YSIsImRlZmF1bHREYXRhIiwibWVyZ2VIb29rIiwiZGVkdXBlSG9va3MiLCJob29rcyIsImhvb2siLCJtZXJnZUFzc2V0cyIsImFzc2VydE9iamVjdFR5cGUiLCJrZXkkMSIsInByb3BzIiwibWV0aG9kcyIsImluamVjdCIsImNvbXB1dGVkIiwicHJvdmlkZSIsImNoZWNrQ29tcG9uZW50cyIsImNvbXBvbmVudHMiLCJ2YWxpZGF0ZUNvbXBvbmVudE5hbWUiLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZUluamVjdCIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiZGlycyIsImRpcmVjdGl2ZXMiLCJtZXJnZU9wdGlvbnMiLCJfYmFzZSIsImV4dGVuZHMiLCJtaXhpbnMiLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJyZXNvbHZlQXNzZXQiLCJ3YXJuTWlzc2luZyIsImFzc2V0cyIsImNhbWVsaXplZElkIiwiUGFzY2FsQ2FzZUlkIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJhYnNlbnQiLCJib29sZWFuSW5kZXgiLCJnZXRUeXBlSW5kZXgiLCJCb29sZWFuIiwic3RyaW5nSW5kZXgiLCJnZXRQcm9wRGVmYXVsdFZhbHVlIiwicHJldlNob3VsZE9ic2VydmUiLCJhc3NlcnRQcm9wIiwiZGVmYXVsdCIsIl9wcm9wcyIsImdldFR5cGUiLCJyZXF1aXJlZCIsInZhbGlkIiwiZXhwZWN0ZWRUeXBlcyIsImFzc2VydGVkVHlwZSIsImFzc2VydFR5cGUiLCJleHBlY3RlZFR5cGUiLCJnZXRJbnZhbGlkVHlwZU1lc3NhZ2UiLCJ2YWxpZGF0b3IiLCJzaW1wbGVDaGVja1JFIiwidCIsImlzU2FtZVR5cGUiLCJyZWNlaXZlZFR5cGUiLCJleHBlY3RlZFZhbHVlIiwic3R5bGVWYWx1ZSIsInJlY2VpdmVkVmFsdWUiLCJpc0V4cGxpY2FibGUiLCJpc0Jvb2xlYW4kMSIsImV4cGxpY2l0VHlwZXMiLCJzb21lIiwiZWxlbSIsImhhbmRsZUVycm9yIiwiZXJyb3JDYXB0dXJlZCIsImNhcHR1cmUiLCJnbG9iYWxIYW5kbGVFcnJvciIsImludm9rZVdpdGhFcnJvckhhbmRsaW5nIiwiaGFuZGxlciIsIl9oYW5kbGVkIiwibG9nRXJyb3IiLCJjYWxsYmFja3MiLCJwZW5kaW5nIiwiZmx1c2hDYWxsYmFja3MiLCJjb3BpZXMiLCJ0aW1lckZ1bmMiLCJwIiwic2V0VGltZW91dCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJjb3VudGVyIiwib2JzZXJ2ZXIiLCJ0ZXh0Tm9kZSIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJjaGFyYWN0ZXJEYXRhIiwic2V0SW1tZWRpYXRlIiwibmV4dFRpY2siLCJjYiIsIl9yZXNvbHZlIiwicmVmIiwicmVnaXN0ZXJSZWYiLCJvbGRWbm9kZSIsImRlc3Ryb3kiLCJpc1JlbW92YWwiLCJyZWZzIiwiJHJlZnMiLCJyZWZJbkZvciIsInNlZW5PYmplY3RzIiwidHJhdmVyc2UiLCJfdHJhdmVyc2UiLCJpc0EiLCJpc0Zyb3plbiIsImRlcElkIiwiTUFYX1VQREFURV9DT1VOVCIsInF1ZXVlIiwiYWN0aXZhdGVkQ2hpbGRyZW4iLCJoYXMkMSIsImNpcmN1bGFyIiwid2FpdGluZyIsImZsdXNoaW5nIiwicmVzZXRTY2hlZHVsZXJTdGF0ZSIsImN1cnJlbnRGbHVzaFRpbWVzdGFtcCIsImdldE5vdyIsIm5vdyIsImNyZWF0ZUV2ZW50IiwidGltZVN0YW1wIiwiZmx1c2hTY2hlZHVsZXJRdWV1ZSIsIndhdGNoZXIiLCJiZWZvcmUiLCJydW4iLCJ1c2VyIiwiZXhwcmVzc2lvbiIsImFjdGl2YXRlZFF1ZXVlIiwidXBkYXRlZFF1ZXVlIiwiY2FsbEFjdGl2YXRlZEhvb2tzIiwiY2FsbFVwZGF0ZWRIb29rcyIsImVtaXQiLCJfd2F0Y2hlciIsIl9pc01vdW50ZWQiLCJfaXNEZXN0cm95ZWQiLCJjYWxsSG9vayIsInF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50IiwiX2luYWN0aXZlIiwiYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsInF1ZXVlV2F0Y2hlciIsInVpZCQxIiwiV2F0Y2hlciIsImV4cE9yRm4iLCJpc1JlbmRlcldhdGNoZXIiLCJfd2F0Y2hlcnMiLCJkZWVwIiwibGF6eSIsInN5bmMiLCJhY3RpdmUiLCJkaXJ0eSIsImRlcHMiLCJuZXdEZXBzIiwiZGVwSWRzIiwibmV3RGVwSWRzIiwiY2xlYW51cERlcHMiLCJ0bXAiLCJvbGRWYWx1ZSIsImV2YWx1YXRlIiwidGVhcmRvd24iLCJfaXNCZWluZ0Rlc3Ryb3llZCIsIm1hcmsiLCJtZWFzdXJlIiwicGVyZiIsImNsZWFyTWFya3MiLCJjbGVhck1lYXN1cmVzIiwic3RhcnRUYWciLCJlbmRUYWciLCJub3JtYWxpemVFdmVudCIsInBhc3NpdmUiLCJjcmVhdGVGbkludm9rZXIiLCJmbnMiLCJpbnZva2VyIiwiYXJndW1lbnRzJDEiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJvbiIsIm9sZE9uIiwiY3JlYXRlT25jZUhhbmRsZXIiLCJvbGQiLCJldmVudCIsInBhcmFtcyIsIm1lcmdlVk5vZGVIb29rIiwiaG9va0tleSIsIm9sZEhvb2siLCJ3cmFwcGVkSG9vayIsIm1lcmdlZCIsImV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEiLCJhdHRycyIsImFsdEtleSIsImtleUluTG93ZXJDYXNlIiwiY2hlY2tQcm9wIiwicHJlc2VydmUiLCJzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQXJyYXlDaGlsZHJlbiIsImlzVGV4dE5vZGUiLCJuZXN0ZWRJbmRleCIsImxhc3RJbmRleCIsInNoaWZ0IiwiX2lzVkxpc3QiLCJpbml0UHJveHkiLCJhbGxvd2VkR2xvYmFscyIsIndhcm5Ob25QcmVzZW50Iiwid2FyblJlc2VydmVkUHJlZml4IiwiaGFzUHJveHkiLCJQcm94eSIsImlzQnVpbHRJbk1vZGlmaWVyIiwiaGFzSGFuZGxlciIsImlzQWxsb3dlZCIsIiRkYXRhIiwiZ2V0SGFuZGxlciIsImhhbmRsZXJzIiwicmVuZGVyIiwiX3dpdGhTdHJpcHBlZCIsIl9yZW5kZXJQcm94eSIsInNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiIsInByb3h5Iiwic291cmNlS2V5IiwicHJveHlHZXR0ZXIiLCJwcm94eVNldHRlciIsImluaXRTdGF0ZSIsImluaXRQcm9wcyIsImluaXRNZXRob2RzIiwiaW5pdERhdGEiLCJfZGF0YSIsImluaXRDb21wdXRlZCIsImluaXRXYXRjaCIsInByb3BzT3B0aW9ucyIsIl9wcm9wS2V5cyIsImlzUm9vdCIsImxvb3AiLCJoeXBoZW5hdGVkS2V5IiwiaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50IiwiZ2V0RGF0YSIsImNvbXB1dGVkV2F0Y2hlck9wdGlvbnMiLCJ3YXRjaGVycyIsIl9jb21wdXRlZFdhdGNoZXJzIiwiaXNTU1IiLCJ1c2VyRGVmIiwiZGVmaW5lQ29tcHV0ZWQiLCJzaG91bGRDYWNoZSIsImNyZWF0ZUNvbXB1dGVkR2V0dGVyIiwiY3JlYXRlR2V0dGVySW52b2tlciIsImNvbXB1dGVkR2V0dGVyIiwiY3JlYXRlV2F0Y2hlciIsIiR3YXRjaCIsInN0YXRlTWl4aW4iLCJWdWUiLCJkYXRhRGVmIiwicHJvcHNEZWYiLCIkc2V0IiwiJGRlbGV0ZSIsImltbWVkaWF0ZSIsInVud2F0Y2hGbiIsImluaXRQcm92aWRlIiwiX3Byb3ZpZGVkIiwiaW5pdEluamVjdGlvbnMiLCJyZXNvbHZlSW5qZWN0IiwicHJvdmlkZUtleSIsInByb3ZpZGVEZWZhdWx0IiwidWlkJDIiLCJpbml0TWl4aW4iLCJfaW5pdCIsIl91aWQiLCJfaXNDb21wb25lbnQiLCJpbml0SW50ZXJuYWxDb21wb25lbnQiLCJyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIiwiX3NlbGYiLCJpbml0TGlmZWN5Y2xlIiwiaW5pdEV2ZW50cyIsImluaXRSZW5kZXIiLCJfbmFtZSIsIiRtb3VudCIsInBhcmVudFZub2RlIiwiX3BhcmVudFZub2RlIiwidm5vZGVDb21wb25lbnRPcHRpb25zIiwiX3BhcmVudExpc3RlbmVycyIsImxpc3RlbmVycyIsIl9yZW5kZXJDaGlsZHJlbiIsInN0YXRpY1JlbmRlckZucyIsInN1cGVyIiwic3VwZXJPcHRpb25zIiwiY2FjaGVkU3VwZXJPcHRpb25zIiwibW9kaWZpZWRPcHRpb25zIiwicmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyIsImV4dGVuZE9wdGlvbnMiLCJtb2RpZmllZCIsImxhdGVzdCIsInNlYWxlZCIsInNlYWxlZE9wdGlvbnMiLCJyZXNvbHZlU2xvdHMiLCJzbG90cyIsInNsb3QiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJub3JtYWxpemVTY29wZWRTbG90cyIsIm5vcm1hbFNsb3RzIiwicHJldlNsb3RzIiwiaGFzTm9ybWFsU2xvdHMiLCJpc1N0YWJsZSIsIiRzdGFibGUiLCIka2V5IiwiX25vcm1hbGl6ZWQiLCIkaGFzTm9ybWFsIiwibm9ybWFsaXplU2NvcGVkU2xvdCIsImtleSQyIiwicHJveHlOb3JtYWxTbG90IiwicmVuZGVyTGlzdCIsIml0ZXJhdG9yIiwibmV4dCIsImRvbmUiLCJyZW5kZXJTbG90IiwiZmFsbGJhY2siLCJiaW5kT2JqZWN0Iiwic2NvcGVkU2xvdEZuIiwiJHNjb3BlZFNsb3RzIiwibm9kZXMiLCIkc2xvdHMiLCIkY3JlYXRlRWxlbWVudCIsInJlc29sdmVGaWx0ZXIiLCJpc0tleU5vdE1hdGNoIiwiZXhwZWN0IiwiYWN0dWFsIiwiY2hlY2tLZXlDb2RlcyIsImV2ZW50S2V5Q29kZSIsImJ1aWx0SW5LZXlDb2RlIiwiZXZlbnRLZXlOYW1lIiwiYnVpbHRJbktleU5hbWUiLCJtYXBwZWRLZXlDb2RlIiwiYmluZE9iamVjdFByb3BzIiwiYXNQcm9wIiwiaXNTeW5jIiwiZG9tUHJvcHMiLCJjYW1lbGl6ZWRLZXkiLCIkZXZlbnQiLCJyZW5kZXJTdGF0aWMiLCJpc0luRm9yIiwiX3N0YXRpY1RyZWVzIiwibWFya1N0YXRpYyIsIm1hcmtPbmNlIiwibWFya1N0YXRpY05vZGUiLCJiaW5kT2JqZWN0TGlzdGVuZXJzIiwiZXhpc3RpbmciLCJvdXJzIiwicmVzb2x2ZVNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY0tleXMiLCJjb250ZW50SGFzaEtleSIsImJpbmREeW5hbWljS2V5cyIsImJhc2VPYmoiLCJ2YWx1ZXMiLCJwcmVwZW5kTW9kaWZpZXIiLCJzeW1ib2wiLCJpbnN0YWxsUmVuZGVySGVscGVycyIsIl9vIiwiX24iLCJfcyIsIl9sIiwiX3QiLCJfcSIsIl9pIiwiX20iLCJfZiIsIl9rIiwiX2IiLCJfdiIsIl9lIiwiX3UiLCJfZyIsIl9kIiwiX3AiLCJGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCIsInRoaXMkMSIsImNvbnRleHRWbSIsIl9vcmlnaW5hbCIsImlzQ29tcGlsZWQiLCJfY29tcGlsZWQiLCJuZWVkTm9ybWFsaXphdGlvbiIsImluamVjdGlvbnMiLCJzY29wZWRTbG90cyIsIl9zY29wZUlkIiwiX2MiLCJjcmVhdGVFbGVtZW50IiwiY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCIsIm1lcmdlUHJvcHMiLCJyZW5kZXJDb250ZXh0IiwiY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCIsInZub2RlcyIsImNsb25lIiwiZGV2dG9vbHNNZXRhIiwiY29tcG9uZW50Vk5vZGVIb29rcyIsImluaXQiLCJoeWRyYXRpbmciLCJrZWVwQWxpdmUiLCJtb3VudGVkTm9kZSIsInByZXBhdGNoIiwiY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSIsImFjdGl2ZUluc3RhbmNlIiwidXBkYXRlQ2hpbGRDb21wb25lbnQiLCJpbnNlcnQiLCIkZGVzdHJveSIsImRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImhvb2tzVG9NZXJnZSIsImNyZWF0ZUNvbXBvbmVudCIsImJhc2VDdG9yIiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50IiwiY3JlYXRlQXN5bmNQbGFjZWhvbGRlciIsIm1vZGVsIiwidHJhbnNmb3JtTW9kZWwiLCJmdW5jdGlvbmFsIiwibmF0aXZlT24iLCJhYnN0cmFjdCIsImluc3RhbGxDb21wb25lbnRIb29rcyIsImlubGluZVRlbXBsYXRlIiwidG9NZXJnZSIsIl9tZXJnZWQiLCJtZXJnZUhvb2skMSIsImYxIiwiZjIiLCJTSU1QTEVfTk9STUFMSVpFIiwiQUxXQVlTX05PUk1BTElaRSIsIm5vcm1hbGl6YXRpb25UeXBlIiwiYWx3YXlzTm9ybWFsaXplIiwiX2NyZWF0ZUVsZW1lbnQiLCJpcyIsIiR2bm9kZSIsInByZSIsImFwcGx5TlMiLCJyZWdpc3RlckRlZXBCaW5kaW5ncyIsImZvcmNlIiwiY2xhc3MiLCJfdm5vZGUiLCJwYXJlbnREYXRhIiwiY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIiwicmVuZGVyTWl4aW4iLCIkbmV4dFRpY2siLCJfcmVuZGVyIiwicmVuZGVyRXJyb3IiLCJlbnN1cmVDdG9yIiwiY29tcCIsIl9fZXNNb2R1bGUiLCJ0b1N0cmluZ1RhZyIsImZhY3RvcnkiLCJlcnJvckNvbXAiLCJyZXNvbHZlZCIsIm93bmVyIiwib3duZXJzIiwibG9hZGluZyIsImxvYWRpbmdDb21wIiwidGltZXJMb2FkaW5nIiwidGltZXJUaW1lb3V0IiwiJG9uIiwiZm9yY2VSZW5kZXIiLCJyZW5kZXJDb21wbGV0ZWQiLCIkZm9yY2VVcGRhdGUiLCJjbGVhclRpbWVvdXQiLCJyZWFzb24iLCJjb21wb25lbnQiLCJkZWxheSIsInRpbWVvdXQiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwiX2V2ZW50cyIsIl9oYXNIb29rRXZlbnQiLCJ1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMiLCJyZW1vdmUkMSIsIiRvZmYiLCJfdGFyZ2V0Iiwib25jZUhhbmRsZXIiLCJvbGRMaXN0ZW5lcnMiLCJldmVudHNNaXhpbiIsImhvb2tSRSIsIiRvbmNlIiwiaSQxIiwiY2JzIiwiJGVtaXQiLCJsb3dlckNhc2VFdmVudCIsInNldEFjdGl2ZUluc3RhbmNlIiwicHJldkFjdGl2ZUluc3RhbmNlIiwiJGNoaWxkcmVuIiwiX2RpcmVjdEluYWN0aXZlIiwibGlmZWN5Y2xlTWl4aW4iLCJfdXBkYXRlIiwicHJldkVsIiwiJGVsIiwicHJldlZub2RlIiwicmVzdG9yZUFjdGl2ZUluc3RhbmNlIiwiX19wYXRjaF9fIiwiX192dWVfXyIsIm1vdW50Q29tcG9uZW50IiwidGVtcGxhdGUiLCJ1cGRhdGVDb21wb25lbnQiLCJyZW5kZXJDaGlsZHJlbiIsIm5ld1Njb3BlZFNsb3RzIiwib2xkU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljU2NvcGVkU2xvdCIsIm5lZWRzRm9yY2VVcGRhdGUiLCIkYXR0cnMiLCIkbGlzdGVuZXJzIiwicHJvcEtleXMiLCJpc0luSW5hY3RpdmVUcmVlIiwiZGlyZWN0IiwiaiIsImlzSFRNTFRhZyIsImlzU1ZHIiwiaXNUZXh0SW5wdXRUeXBlIiwiZW1wdHlOb2RlIiwic2FtZVZub2RlIiwic2FtZUlucHV0VHlwZSIsInR5cGVBIiwidHlwZUIiLCJjcmVhdGVLZXlUb09sZElkeCIsImJlZ2luSWR4IiwiZW5kSWR4IiwiY3JlYXRlUGF0Y2hGdW5jdGlvbiIsImJhY2tlbmQiLCJub2RlT3BzIiwiZW1wdHlOb2RlQXQiLCJ0YWdOYW1lIiwiY3JlYXRlUm1DYiIsImNoaWxkRWxtIiwicmVtb3ZlTm9kZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImluVlByZSIsImlnbm9yZSIsImNyZWF0aW5nRWxtSW5WUHJlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwicGFyZW50RWxtIiwicmVmRWxtIiwibmVzdGVkIiwib3duZXJBcnJheSIsImNyZWF0ZUVsZW1lbnROUyIsInNldFNjb3BlIiwiY3JlYXRlQ2hpbGRyZW4iLCJpbnZva2VDcmVhdGVIb29rcyIsImNyZWF0ZUNvbW1lbnQiLCJpc1JlYWN0aXZhdGVkIiwiaW5pdENvbXBvbmVudCIsInJlYWN0aXZhdGVDb21wb25lbnQiLCJwZW5kaW5nSW5zZXJ0IiwiaXNQYXRjaGFibGUiLCJpbm5lck5vZGUiLCJ0cmFuc2l0aW9uIiwiYWN0aXZhdGUiLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsImNoZWNrRHVwbGljYXRlS2V5cyIsInNldFN0eWxlU2NvcGUiLCJhbmNlc3RvciIsImFkZFZub2RlcyIsInN0YXJ0SWR4IiwiaW52b2tlRGVzdHJveUhvb2siLCJyZW1vdmVWbm9kZXMiLCJjaCIsInJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2siLCJybSIsInVwZGF0ZUNoaWxkcmVuIiwib2xkQ2giLCJuZXdDaCIsInJlbW92ZU9ubHkiLCJvbGRTdGFydElkeCIsIm5ld1N0YXJ0SWR4Iiwib2xkRW5kSWR4Iiwib2xkU3RhcnRWbm9kZSIsIm9sZEVuZFZub2RlIiwibmV3RW5kSWR4IiwibmV3U3RhcnRWbm9kZSIsIm5ld0VuZFZub2RlIiwib2xkS2V5VG9JZHgiLCJpZHhJbk9sZCIsInZub2RlVG9Nb3ZlIiwiY2FuTW92ZSIsInBhdGNoVm5vZGUiLCJuZXh0U2libGluZyIsImZpbmRJZHhJbk9sZCIsInNlZW5LZXlzIiwiZW5kIiwiaHlkcmF0ZSIsInNldFRleHRDb250ZW50IiwicG9zdHBhdGNoIiwiaW52b2tlSW5zZXJ0SG9vayIsImluaXRpYWwiLCJoeWRyYXRpb25CYWlsZWQiLCJpc1JlbmRlcmVkTW9kdWxlIiwiYXNzZXJ0Tm9kZU1hdGNoIiwiaGFzQ2hpbGROb2RlcyIsImlubmVySFRNTCIsImNoaWxkcmVuTWF0Y2giLCJjaGlsZE5vZGUiLCJmaXJzdENoaWxkIiwiY2hpbGROb2RlcyIsImZ1bGxJbnZva2UiLCJwYXRjaCIsImlzSW5pdGlhbFBhdGNoIiwiaXNSZWFsRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm9sZEVsbSIsIl9sZWF2ZUNiIiwicGF0Y2hhYmxlIiwiaSQyIiwidXBkYXRlRGlyZWN0aXZlcyIsInVuYmluZERpcmVjdGl2ZXMiLCJpc0NyZWF0ZSIsImlzRGVzdHJveSIsIm9sZERpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsIm9sZERpciIsImRpciIsImNhbGxIb29rJDEiLCJvbGRBcmciLCJjb21wb25lbnRVcGRhdGVkIiwiY2FsbEluc2VydCIsImVtcHR5TW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsInJhd05hbWUiLCJiYXNlTW9kdWxlcyIsInVwZGF0ZUF0dHJzIiwib2xkQXR0cnMiLCJzZXRBdHRyaWJ1dGUiLCJhY2NlcHRWYWx1ZSIsImlzRW51bWVyYXRlZEF0dHIiLCJpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUiLCJpc0Jvb2xlYW5BdHRyIiwiZ2VuQ2xhc3NGb3JWbm9kZSIsIm1lcmdlQ2xhc3NEYXRhIiwicmVuZGVyQ2xhc3MiLCJzdGF0aWNDbGFzcyIsImR5bmFtaWNDbGFzcyIsInN0cmluZ2lmeUNsYXNzIiwic3RyaW5naWZ5QXJyYXkiLCJzdHJpbmdpZnlPYmplY3QiLCJzdHJpbmdpZmllZCIsInVwZGF0ZUNsYXNzIiwib2xkRGF0YSIsImNscyIsInRyYW5zaXRpb25DbGFzcyIsIl90cmFuc2l0aW9uQ2xhc3NlcyIsIl9wcmV2Q2xhc3MiLCJjbGFzc18iLCJ0YXJnZXQkMSIsImFkZCQxIiwib2xkSGFuZGxlciIsInJlbW92ZSQyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVwZGF0ZURPTUxpc3RlbmVycyIsImV2ZW50cyIsIm5vcm1hbGl6ZSIsImNyZWF0ZVN0eWxlIiwic3RhdGljU3R5bGUiLCJ1cGRhdGVTdHlsZSIsInNldFN0eWxlIiwib2xkU3R5bGUiLCJuZWVkQ2xvbmUiLCJ0b09iamVjdCQxIiwid2hpdGVzcGFjZVJFIiwiYWRkQ2xhc3MiLCJ0cmltIiwiY2xhc3NMaXN0IiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQ2xhc3MiLCJ0YXIiLCJyZXNvbHZlVHJhbnNpdGlvbiIsImNzcyIsImF1dG9Dc3NUcmFuc2l0aW9uIiwiZW50ZXJDbGFzcyIsImVudGVyVG9DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJsZWF2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImhhc1RyYW5zaXRpb24iLCJvbnRyYW5zaXRpb25lbmQiLCJvbndlYmtpdHRyYW5zaXRpb25lbmQiLCJvbmFuaW1hdGlvbmVuZCIsIm9ud2Via2l0YW5pbWF0aW9uZW5kIiwicmFmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJlbnRlciIsInRvZ2dsZURpc3BsYXkiLCJjYW5jZWxsZWQiLCJfZW50ZXJDYiIsImFwcGVhckNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYmVmb3JlRW50ZXIiLCJhZnRlckVudGVyIiwiZW50ZXJDYW5jZWxsZWQiLCJiZWZvcmVBcHBlYXIiLCJhcHBlYXIiLCJhZnRlckFwcGVhciIsImFwcGVhckNhbmNlbGxlZCIsImR1cmF0aW9uIiwidHJhbnNpdGlvbk5vZGUiLCJpc0FwcGVhciIsInN0YXJ0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsInRvQ2xhc3MiLCJiZWZvcmVFbnRlckhvb2siLCJlbnRlckhvb2siLCJhZnRlckVudGVySG9vayIsImVudGVyQ2FuY2VsbGVkSG9vayIsImV4cGxpY2l0RW50ZXJEdXJhdGlvbiIsImNoZWNrRHVyYXRpb24iLCJleHBlY3RzQ1NTIiwidXNlcldhbnRzQ29udHJvbCIsImdldEhvb2tBcmd1bWVudHNMZW5ndGgiLCJzaG93IiwicGVuZGluZ05vZGUiLCJfcGVuZGluZyIsImlzVmFsaWREdXJhdGlvbiIsImxlYXZlIiwiYmVmb3JlTGVhdmUiLCJhZnRlckxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJkZWxheUxlYXZlIiwiZXhwbGljaXRMZWF2ZUR1cmF0aW9uIiwicGVyZm9ybUxlYXZlIiwiaW52b2tlckZucyIsIl9lbnRlciIsInBsYXRmb3JtTW9kdWxlcyIsImFjdGlvbkJhciIsImFuZHJvaWQiLCJmcmFtZXMiLCJNYXAiLCJzZXRGcmFtZSIsImZyYW1lIiwiZ2V0RnJhbWUiLCJkZWxldGVGcmFtZSIsImRlbGV0ZSIsImlkQ291bnRlciIsImNsZWFySGlzdG9yeSIsImJhY2tzdGFja1Zpc2libGUiLCJoYXNSb3V0ZXJWaWV3IiwiY3JlYXRlZCIsIiRwcm9wcyIsImFzc2lnbiIsImRlc3Ryb3llZCIsIl9nZXRGcmFtZSIsIm5hdGl2ZVZpZXciLCJfZW5zdXJlVHJhbnNpdGlvbk9iamVjdCIsIl9jb21wb3NlVHJhbnNpdGlvbiIsImVudHJ5IiwicGxhdGZvcm1FbnRyeVByb3AiLCJlbnRyeVByb3AiLCJwbGF0Zm9ybVByb3AiLCJub3RpZnlQYWdlTW91bnRlZCIsInBhZ2VWbSIsIm5hdmlnYXRlIiwiYmFjayIsImdvQmFjayIsInBhZ2UiLCJpc0JhY2tOYXZpZ2F0aW9uIiwib2ZmIiwiYmFja3N0YWNrRW50cnkiLCJpb3MiLCJWVUVfVklFVyIsInRpZCIsInZUZW1wbGF0ZSIsImlmIiwibW91bnRlZCIsIiR0ZW1wbGF0ZXMiLCJUZW1wbGF0ZUJhZyIsInJlZ2lzdGVyVGVtcGxhdGUiLCJfdGVtcGxhdGVNYXAiLCJwcm90b3R5cGVBY2Nlc3NvcnMkMSIsInNlbGVjdG9yRm4iLCJjb25kaXRpb24iLCJzY29wZWRGbiIsImNvbmRpdGlvbkZuIiwiZ2V0Q29uZGl0aW9uRm4iLCJrZXllZFRlbXBsYXRlIiwiVnVlS2V5ZWRUZW1wbGF0ZSIsInRlbXBsYXRlU2VsZWN0b3JGbiIsImVudHJpZXMiLCJjdXJyIiwiZ2V0S2V5ZWRUZW1wbGF0ZSIsInBhdGNoVGVtcGxhdGUiLCJnZXRBdmFpbGFibGUiLCJnZXRLZXllZFRlbXBsYXRlcyIsIl9rZXkiLCJfc2NvcGVkRm4iLCJwcm90b3R5cGVBY2Nlc3NvcnMkMSQxIiwiY3JlYXRlVmlldyIsImxpc3RWaWV3IiwiT2JzZXJ2YWJsZUFycmF5IiwiaXRlbVRhcCIsImdldEl0ZW1Db250ZXh0Iiwib25JdGVtVGFwIiwiZ2V0SXRlbSIsIm9uSXRlbUxvYWRpbmciLCJjdXJyZW50SXRlbSIsIl9pdGVtVGVtcGxhdGVTZWxlY3RvciIsInZpZXciLCJhbGlhcyIsImluZGV4X2FsaWFzIiwiJGV2ZW4iLCIkb2RkIiwiUEFHRV9SRUYiLCJfZmluZFBhcmVudEZyYW1lIiwiZGlzcG9zZSIsImRpc3Bvc2VOYXRpdmVWaWV3IiwidGFiVmlldyIsInJlZ2lzdGVyVGFiIiwidGFiVmlld0l0ZW0iLCJfbmF0aXZlVmlldyIsImJvdHRvbU5hdmlnYXRpb24iLCJyZWdpc3RlclRhYlN0cmlwIiwidGFiU3RyaXAiLCJyZWdpc3RlclRhYkNvbnRlbnRJdGVtIiwidGFiQ29udGVudEl0ZW0iLCJ0YWJzIiwicmVnaXN0ZXJUYWJTdHJpcEl0ZW0iLCJ0YWJTdHJpcEl0ZW0iLCJ0cmFuc2l0aW9uUHJvcHMiLCJtb2RlIiwiZ2V0UmVhbENoaWxkIiwiY29tcE9wdGlvbnMiLCJleHRyYWN0VHJhbnNpdGlvbkRhdGEiLCJwbGFjZWhvbGRlciIsInJhd0NoaWxkIiwiaGFzUGFyZW50VHJhbnNpdGlvbiIsImlzU2FtZUNoaWxkIiwib2xkQ2hpbGQiLCJpc05vdFRleHROb2RlIiwiaXNWU2hvd0RpcmVjdGl2ZSIsIlRyYW5zaXRpb24iLCJfbGVhdmluZyIsIm9sZFJhd0NoaWxkIiwiZGVsYXllZExlYXZlIiwiZWxlbWVudE1hcCIsIm5hdGl2ZVJlZ0V4cCIsImRhc2hSZWdFeHAiLCJkZWZhdWx0Vmlld01ldGEiLCJza2lwQWRkVG9Eb20iLCJpc1VuYXJ5VGFnIiwidGFnTmFtZXNwYWNlIiwiY2FuQmVMZWZ0T3BlblRhZyIsIm5vcm1hbGl6ZUVsZW1lbnROYW1lIiwiZWxlbWVudE5hbWUiLCJyZWdpc3RlckVsZW1lbnQiLCJyZXNvbHZlciIsIm1ldGEiLCJub3JtYWxpemVkTmFtZSIsImdldEVsZW1lbnRNYXAiLCJnZXRWaWV3Q2xhc3MiLCJnZXRWaWV3TWV0YSIsImlzS25vd25WaWV3IiwiQWN0aW9uQmFyIiwiX3JlbW92ZVZpZXciLCJBY3Rpb25JdGVtIiwiTGlzdFZpZXciLCJOYXZpZ2F0aW9uQnV0dG9uIiwiVGFiVmlldyIsIlRhYlZpZXdJdGVtIiwiQm90dG9tTmF2aWdhdGlvbiIsIlRhYnMiLCJUYWJTdHJpcCIsIlRhYlN0cmlwSXRlbSIsIlRhYkNvbnRlbnRJdGVtIiwiTGFiZWwiLCJEYXRlUGlja2VyIiwiQWJzb2x1dGVMYXlvdXQiLCJBY3Rpdml0eUluZGljYXRvciIsIkJvcmRlciIsIkJ1dHRvbiIsIkNvbnRlbnRWaWV3IiwiRG9ja0xheW91dCIsIkdyaWRMYXlvdXQiLCJIdG1sVmlldyIsIkltYWdlIiwiTGlzdFBpY2tlciIsIlBhZ2UiLCJQbGFjZWhvbGRlciIsIlByb2dyZXNzIiwiUHJveHlWaWV3Q29udGFpbmVyIiwiU2Nyb2xsVmlldyIsIlNlYXJjaEJhciIsIlNlZ21lbnRlZEJhciIsIlNlZ21lbnRlZEJhckl0ZW0iLCJTbGlkZXIiLCJTdGFja0xheW91dCIsIkZsZXhib3hMYXlvdXQiLCJTd2l0Y2giLCJUZXh0RmllbGQiLCJUZXh0VmlldyIsIlRpbWVQaWNrZXIiLCJXZWJWaWV3IiwiV3JhcExheW91dCIsIkZvcm1hdHRlZFN0cmluZyIsIlNwYW4iLCJGcmFtZSIsImluc2VydENoaWxkIiwiYXRJbmRleCIsImlzb2JqZWN0IiwiaXNPYmplY3RPYmplY3QiLCJpc1BsYWluT2JqZWN0JDEiLCJwcm90Iiwic2V0JDEiLCJpc09iamVjdCQyIiwibWVyZ2UiLCJvcmlnIiwiY3JlYXRlS2V5IiwibWVtbyIsImNoYXIiLCJzZXBhcmF0b3IiLCJwYXR0ZXJuIiwic2V0VmFsdWUiLCJpc1ZpZXciLCJWaWV3IiwiaXNMYXlvdXQiLCJMYXlvdXRCYXNlIiwiaXNDb250ZW50VmlldyIsInBhcmVudFZpZXciLCJjaGlsZFZpZXciLCJnZXRDaGlsZEluZGV4IiwiYWRkQ2hpbGQiLCJfYWRkVmlldyIsIl9hZGRDaGlsZEZyb21CdWlsZGVyIiwiWE1MX0FUVFJJQlVURVMiLCJWaWV3Tm9kZSIsIl90YWdOYW1lIiwicHJldlNpYmxpbmciLCJfb3duZXJEb2N1bWVudCIsIl9tZXRhIiwicHJvdG90eXBlQWNjZXNzb3JzJDIiLCJsYXN0Q2hpbGQiLCJvd25lckRvY3VtZW50IiwibnYiLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJYbWxQYXJzZXIiLCJfZGVyZWZlcmVuY2VFbnRpdGllcyIsInNldFRleHQiLCJyZWZlcmVuY2VOb2RlIiwicmVtb3ZlQ2hpbGQkMSIsIlZVRV9FTEVNRU5UX1JFRiIsIkVsZW1lbnROb2RlIiwidmlld0NsYXNzIiwiQ29tbWVudE5vZGUiLCJUZXh0Tm9kZSIsIkRvY3VtZW50Tm9kZSIsImRvY3VtZW50RWxlbWVudCIsIm5hbWVzcGFjZSIsIl9WdWUiLCJzZXRWdWUiLCJWVUVfVkVSU0lPTiIsIk5TX1ZVRV9WRVJTSU9OIiwiaW5mb1RyYWNlIiwibmFtZXNwYWNlTWFwIiwiY3JlYXRlRWxlbWVudCQxIiwibmV3Tm9kZSIsImVsZW1lbnROb2RlIiwic2NvcGVJZCIsImhlIiwiZGVjb2RlIiwiaHRtbCIsImlzVW5hcnlUYWckMSIsImNhbkJlTGVmdE9wZW5UYWckMSIsImlzTm9uUGhyYXNpbmdUYWciLCJhdHRyaWJ1dGUiLCJkeW5hbWljQXJnQXR0cmlidXRlIiwibmNuYW1lIiwicW5hbWVDYXB0dXJlIiwic3RhcnRUYWdPcGVuIiwic3RhcnRUYWdDbG9zZSIsImRvY3R5cGUiLCJjb21tZW50IiwiY29uZGl0aW9uYWxDb21tZW50IiwiaXNQbGFpblRleHRFbGVtZW50IiwicmVDYWNoZSIsImRlY29kaW5nTWFwIiwiZW5jb2RlZEF0dHIiLCJlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyIsImlzSWdub3JlTmV3bGluZVRhZyIsInNob3VsZElnbm9yZUZpcnN0TmV3bGluZSIsImRlY29kZUF0dHIiLCJzaG91bGREZWNvZGVOZXdsaW5lcyIsInBhcnNlSFRNTCIsImV4cGVjdEhUTUwiLCJsYXN0VGFnIiwidGV4dEVuZCIsImNvbW1lbnRFbmQiLCJzaG91bGRLZWVwQ29tbWVudCIsInN1YnN0cmluZyIsImFkdmFuY2UiLCJjb25kaXRpb25hbEVuZCIsImRvY3R5cGVNYXRjaCIsImVuZFRhZ01hdGNoIiwiY3VySW5kZXgiLCJwYXJzZUVuZFRhZyIsInN0YXJ0VGFnTWF0Y2giLCJwYXJzZVN0YXJ0VGFnIiwiaGFuZGxlU3RhcnRUYWciLCJyZXN0IiwiY2hhcnMiLCJlbmRUYWdMZW5ndGgiLCJzdGFja2VkVGFnIiwicmVTdGFja2VkVGFnIiwicmVzdCQxIiwiYWxsIiwiYXR0ciIsInVuYXJ5U2xhc2giLCJ1bmFyeSIsInNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZiIsIm91dHB1dFNvdXJjZVJhbmdlIiwibG93ZXJDYXNlZFRhZyIsInBvcyIsImxvd2VyQ2FzZWRUYWdOYW1lIiwidmFsaWREaXZpc2lvbkNoYXJSRSIsInBhcnNlRmlsdGVycyIsImV4cCIsImluU2luZ2xlIiwiaW5Eb3VibGUiLCJpblRlbXBsYXRlU3RyaW5nIiwiaW5SZWdleCIsImN1cmx5Iiwic3F1YXJlIiwicGFyZW4iLCJsYXN0RmlsdGVySW5kZXgiLCJmaWx0ZXJzIiwicHVzaEZpbHRlciIsIndyYXBGaWx0ZXIiLCJkZWZhdWx0VGFnUkUiLCJyZWdleEVzY2FwZVJFIiwiYnVpbGRSZWdleCIsImRlbGltaXRlcnMiLCJvcGVuIiwiY2xvc2UiLCJwYXJzZVRleHQiLCJ0YWdSRSIsInRva2VucyIsInJhd1Rva2VucyIsInRva2VuVmFsdWUiLCJleGVjIiwiZ2VuQ29tcG9uZW50TW9kZWwiLCJudW1iZXIiLCJiYXNlVmFsdWVFeHByZXNzaW9uIiwidmFsdWVFeHByZXNzaW9uIiwiYXNzaWdubWVudCIsImdlbkFzc2lnbm1lbnRDb2RlIiwicGFyc2VNb2RlbCIsImNociIsImluZGV4JDEiLCJleHByZXNzaW9uUG9zIiwiZXhwcmVzc2lvbkVuZFBvcyIsImxhc3RJbmRleE9mIiwiZW9mIiwiaXNTdHJpbmdTdGFydCIsInBhcnNlU3RyaW5nIiwicGFyc2VCcmFja2V0IiwiaW5CcmFja2V0Iiwic3RyaW5nUXVvdGUiLCJiYXNlV2FybiIsInJhbmdlIiwicGx1Y2tNb2R1bGVGdW5jdGlvbiIsImFkZFByb3AiLCJkeW5hbWljIiwicmFuZ2VTZXRJdGVtIiwicGxhaW4iLCJhZGRBdHRyIiwiZHluYW1pY0F0dHJzIiwiYWRkUmF3QXR0ciIsImF0dHJzTWFwIiwiYXR0cnNMaXN0IiwiYWRkRGlyZWN0aXZlIiwiaXNEeW5hbWljQXJnIiwicHJlcGVuZE1vZGlmaWVyTWFya2VyIiwiYWRkSGFuZGxlciIsImltcG9ydGFudCIsInByZXZlbnQiLCJyaWdodCIsIm1pZGRsZSIsIm5hdGl2ZSIsIm5hdGl2ZUV2ZW50cyIsIm5ld0hhbmRsZXIiLCJ1bnNoaWZ0IiwiZ2V0UmF3QmluZGluZ0F0dHIiLCJyYXdBdHRyc01hcCIsImdldEJpbmRpbmdBdHRyIiwiZ2V0U3RhdGljIiwiZHluYW1pY1ZhbHVlIiwiZ2V0QW5kUmVtb3ZlQXR0ciIsInN0YXRpY1ZhbHVlIiwicmVtb3ZlRnJvbU1hcCIsImdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4Iiwib25SRSIsImRpclJFIiwiZm9yQWxpYXNSRSIsImZvckl0ZXJhdG9yUkUiLCJzdHJpcFBhcmVuc1JFIiwiZHluYW1pY0FyZ1JFIiwiYXJnUkUiLCJiaW5kUkUiLCJtb2RpZmllclJFIiwic2xvdFJFIiwibGluZUJyZWFrUkUiLCJ3aGl0ZXNwYWNlUkUkMSIsImludmFsaWRBdHRyaWJ1dGVSRSIsImRlY29kZUhUTUxDYWNoZWQiLCJlbXB0eVNsb3RTY29wZVRva2VuIiwid2FybiQxIiwidHJhbnNmb3JtcyIsInByZVRyYW5zZm9ybXMiLCJwb3N0VHJhbnNmb3JtcyIsInBsYXRmb3JtSXNQcmVUYWciLCJwbGF0Zm9ybU11c3RVc2VQcm9wIiwicGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UiLCJtYXliZUNvbXBvbmVudCIsImNyZWF0ZUFTVEVsZW1lbnQiLCJtYWtlQXR0cnNNYXAiLCJpc1ByZVRhZyIsInByZXNlcnZlV2hpdGVzcGFjZSIsIndoaXRlc3BhY2VPcHRpb24iLCJjdXJyZW50UGFyZW50IiwiaW5QcmUiLCJ3YXJuZWQiLCJ3YXJuT25jZSIsImNsb3NlRWxlbWVudCIsInRyaW1FbmRpbmdXaGl0ZXNwYWNlIiwicHJvY2Vzc2VkIiwicHJvY2Vzc0VsZW1lbnQiLCJlbHNlaWYiLCJlbHNlIiwiY2hlY2tSb290Q29uc3RyYWludHMiLCJhZGRJZkNvbmRpdGlvbiIsImJsb2NrIiwiZm9yYmlkZGVuIiwicHJvY2Vzc0lmQ29uZGl0aW9ucyIsInNsb3RTY29wZSIsInNsb3RUYXJnZXQiLCJsYXN0Tm9kZSIsImNvbW1lbnRzIiwic3RhcnQkMSIsImd1YXJkSUVTVkdCdWciLCJjdW11bGF0ZWQiLCJpc0ZvcmJpZGRlblRhZyIsInByb2Nlc3NQcmUiLCJwcm9jZXNzUmF3QXR0cnMiLCJwcm9jZXNzRm9yIiwicHJvY2Vzc0lmIiwicHJvY2Vzc09uY2UiLCJlbmQkMSIsImlzVGV4dFRhZyIsInByb2Nlc3NLZXkiLCJwcm9jZXNzUmVmIiwicHJvY2Vzc1Nsb3RDb250ZW50IiwicHJvY2Vzc1Nsb3RPdXRsZXQiLCJwcm9jZXNzQ29tcG9uZW50IiwicHJvY2Vzc0F0dHJzIiwiZm9yIiwiaXRlcmF0b3IyIiwiaXRlcmF0b3IxIiwiY2hlY2tJbkZvciIsInBhcnNlRm9yIiwiaW5NYXRjaCIsIml0ZXJhdG9yTWF0Y2giLCJmaW5kUHJldkVsZW1lbnQiLCJpZkNvbmRpdGlvbnMiLCJzbG90VGFyZ2V0RHluYW1pYyIsInNsb3RCaW5kaW5nIiwiZ2V0U2xvdE5hbWUiLCJzbG90QmluZGluZyQxIiwicmVmJDEiLCJkeW5hbWljJDEiLCJzbG90Q29udGFpbmVyIiwiYmluZGluZyIsInNsb3ROYW1lIiwic3luY0dlbiIsImlzRHluYW1pYyIsImhhc0JpbmRpbmdzIiwicGFyc2VNb2RpZmllcnMiLCJjYW1lbCIsImFyZ01hdGNoIiwiY2hlY2tGb3JBbGlhc01vZGVsIiwiaWVOU0J1ZyIsImllTlNQcmVmaXgiLCJfZWwiLCJpc1N0YXRpY0tleSIsImlzUGxhdGZvcm1SZXNlcnZlZFRhZyIsImdlblN0YXRpY0tleXNDYWNoZWQiLCJnZW5TdGF0aWNLZXlzJDEiLCJvcHRpbWl6ZSIsIm1hcmtTdGF0aWMkMSIsIm1hcmtTdGF0aWNSb290cyIsInN0YXRpYyIsImwkMSIsInN0YXRpY0luRm9yIiwic3RhdGljUm9vdCIsImlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yIiwiZm5FeHBSRSIsImZuSW52b2tlUkUiLCJzaW1wbGVQYXRoUkUiLCJlc2MiLCJ0YWIiLCJzcGFjZSIsInVwIiwibGVmdCIsImRvd24iLCJrZXlOYW1lcyIsImdlbkd1YXJkIiwibW9kaWZpZXJDb2RlIiwic3RvcCIsImN0cmwiLCJhbHQiLCJnZW5IYW5kbGVycyIsInN0YXRpY0hhbmRsZXJzIiwiZHluYW1pY0hhbmRsZXJzIiwiaGFuZGxlckNvZGUiLCJnZW5IYW5kbGVyIiwiaXNNZXRob2RQYXRoIiwiaXNGdW5jdGlvbkV4cHJlc3Npb24iLCJpc0Z1bmN0aW9uSW52b2NhdGlvbiIsImNvZGUiLCJnZW5Nb2RpZmllckNvZGUiLCJrZXlNb2RpZmllciIsImdlbktleUZpbHRlciIsImdlbkZpbHRlckNvZGUiLCJrZXlWYWwiLCJwYXJzZUludCIsImtleUNvZGUiLCJrZXlOYW1lIiwid3JhcExpc3RlbmVycyIsImJpbmQkMSIsIndyYXBEYXRhIiwiYmFzZURpcmVjdGl2ZXMiLCJjbG9hayIsIkNvZGVnZW5TdGF0ZSIsImRhdGFHZW5GbnMiLCJvbmNlSWQiLCJnZW5lcmF0ZSIsImFzdCIsInN0YXRlIiwiZ2VuRWxlbWVudCIsInN0YXRpY1Byb2Nlc3NlZCIsImdlblN0YXRpYyIsIm9uY2VQcm9jZXNzZWQiLCJnZW5PbmNlIiwiZm9yUHJvY2Vzc2VkIiwiZ2VuRm9yIiwiaWZQcm9jZXNzZWQiLCJnZW5JZiIsImdlbkNoaWxkcmVuIiwiZ2VuU2xvdCIsImdlbkNvbXBvbmVudCIsImdlbkRhdGEiLCJvcmlnaW5hbFByZVN0YXRlIiwiYWx0R2VuIiwiYWx0RW1wdHkiLCJnZW5JZkNvbmRpdGlvbnMiLCJjb25kaXRpb25zIiwiZ2VuVGVybmFyeUV4cCIsImFsdEhlbHBlciIsImdlbkRpcmVjdGl2ZXMiLCJnZW5Qcm9wcyIsImdlblNjb3BlZFNsb3RzIiwiZ2VuSW5saW5lVGVtcGxhdGUiLCJoYXNSdW50aW1lIiwibmVlZFJ1bnRpbWUiLCJnZW4iLCJpbmxpbmVSZW5kZXJGbnMiLCJjb250YWluc1Nsb3RDaGlsZCIsIm5lZWRzS2V5IiwiZ2VuZXJhdGVkU2xvdHMiLCJnZW5TY29wZWRTbG90IiwiaXNMZWdhY3lTeW50YXgiLCJyZXZlcnNlUHJveHkiLCJjaGVja1NraXAiLCJhbHRHZW5FbGVtZW50IiwiYWx0R2VuTm9kZSIsImVsJDEiLCJub3JtYWxpemF0aW9uVHlwZSQxIiwiZ2V0Tm9ybWFsaXphdGlvblR5cGUiLCJnZW5Ob2RlIiwibmVlZHNOb3JtYWxpemF0aW9uIiwiZ2VuQ29tbWVudCIsImdlblRleHQiLCJ0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMiLCJjb21wb25lbnROYW1lIiwic3RhdGljUHJvcHMiLCJkeW5hbWljUHJvcHMiLCJwcm9oaWJpdGVkS2V5d29yZFJFIiwidW5hcnlPcGVyYXRvcnNSRSIsInN0cmlwU3RyaW5nUkUiLCJkZXRlY3RFcnJvcnMiLCJjaGVja05vZGUiLCJjaGVja0ZvciIsImNoZWNrRXZlbnQiLCJjaGVja0V4cHJlc3Npb24iLCJzdGlwcGVkIiwia2V5d29yZE1hdGNoIiwiY2hlY2tJZGVudGlmaWVyIiwiaWRlbnQiLCJnZW5lcmF0ZUNvZGVGcmFtZSIsImxpbmVzIiwiY291bnQiLCJyZXBlYXQkMSIsImxpbmVMZW5ndGgiLCJwYWQiLCJsZW5ndGgkMSIsIm1pbiIsImNyZWF0ZUZ1bmN0aW9uIiwiZXJyb3JzIiwiY3JlYXRlQ29tcGlsZVRvRnVuY3Rpb25GbiIsImNvbXBpbGUiLCJjb21waWxlVG9GdW5jdGlvbnMiLCJjb21waWxlZCIsInRpcHMiLCJmbkdlbkVycm9ycyIsImNyZWF0ZUNvbXBpbGVyQ3JlYXRvciIsImJhc2VDb21waWxlIiwiY3JlYXRlQ29tcGlsZXIiLCJiYXNlT3B0aW9ucyIsImZpbmFsT3B0aW9ucyIsImxlYWRpbmdTcGFjZUxlbmd0aCIsInRyYW5zZm9ybU5vZGUiLCJjbGFzc0JpbmRpbmciLCJnZW5EYXRhJDEiLCJjbGFzc18kMSIsIm5vcm1hbGl6ZSQxIiwidHJhbnNmb3JtTm9kZSQxIiwicGFyc2VTdGF0aWNTdHlsZSIsInN0eWxlUmVzdWx0Iiwic3R5bGVCaW5kaW5nIiwiZ2VuRGF0YSQyIiwic3R5bGVMaXN0Iiwic3R5bGUkMSIsInByZVRyYW5zZm9ybU5vZGUiLCJ2Zm9yIiwiZm9yXyIsInByZVRyYW5zZm9ybU5vZGUkMSIsInJvdXRlciIsInByZVRyYW5zZm9ybU5vZGUkMiIsImJ1aWxkU2NvcGVTdHJpbmciLCJ2VGVtcGxhdGUkMSIsInRyYW5zZm9ybU5vZGUkMiIsImZpbmQiLCJhdHRyTmFtZSIsIm1vZHMiLCJtb2R1bGVzJDEiLCJnZW5EZWZhdWx0TW9kZWwiLCJkaXJlY3RpdmVzJDEiLCJpbml0VXNlIiwidXNlIiwicGx1Z2luIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwiaW5zdGFsbCIsImluaXRNaXhpbiQxIiwibWl4aW4iLCJpbml0RXh0ZW5kIiwiU3VwZXIiLCJTdXBlcklkIiwiY2FjaGVkQ3RvcnMiLCJfQ3RvciIsIlN1YiIsIlZ1ZUNvbXBvbmVudCIsImluaXRQcm9wcyQxIiwiaW5pdENvbXB1dGVkJDEiLCJDb21wIiwiaW5pdEFzc2V0UmVnaXN0ZXJzIiwiZGVmaW5pdGlvbiIsImdldENvbXBvbmVudE5hbWUiLCJtYXRjaGVzIiwicHJ1bmVDYWNoZSIsImtlZXBBbGl2ZUluc3RhbmNlIiwiY2FjaGVkTm9kZSIsInBydW5lQ2FjaGVFbnRyeSIsImN1cnJlbnQiLCJwYXR0ZXJuVHlwZXMiLCJLZWVwQWxpdmUiLCJpbmNsdWRlIiwiZXhjbHVkZSIsImJ1aWx0SW5Db21wb25lbnRzIiwiaW5pdEdsb2JhbEFQSSIsImNvbmZpZ0RlZiIsInV0aWwiLCJvYnNlcnZhYmxlIiwic3NyQ29udGV4dCIsInZlcnNpb24iLCJsb2NhdGVOb2RlIiwib3JpZ2luYWxWaXNpYmlsaXR5IiwiX192T3JpZ2luYWxWaXNpYmlsaXR5IiwidW5iaW5kIiwidmlldyQxIiwicGxhdGZvcm1EaXJlY3RpdmVzIiwiJGRvY3VtZW50IiwiJHN0YXJ0IiwiQXBwQ29uc3RydWN0b3IiLCJsYXVuY2hFdmVudCIsIl9maW5kUGFyZW50TW9kYWxFbnRyeSIsIk1vZGFsUGx1Z2luIiwiJG1vZGFsIiwiY2xvc2VDYiIsIiRzaG93TW9kYWwiLCJtb2RhbFBhZ2UiLCJjbG9zZU1vZGFsIiwibmF2RW50cnlJbnN0YW5jZSIsImNsb3NlQ2FsbGJhY2siLCJzaG93TW9kYWwiLCJnZXRGcmFtZUluc3RhbmNlIiwiZ2V0RnJhbWVCeUlkIiwiZmluZFBhcmVudE5hdmlnYXRpb25FbnRyeSIsIk5hdmlnYXRvclBsdWdpbiIsIiRuYXZpZ2F0ZUJhY2siLCJuYXZFbnRyeSIsImRlZmF1bHRPcHRpb25zIiwiJG5hdmlnYXRlVG8iLCJuZXdMaW5lUmVnRXhwIiwiZGVidWciLCJfX29uTGl2ZVN5bmNDb3JlIiwidG9wbW9zdCIsImN1cnJlbnRQYWdlIiwibW9kYWwiLCJhZGRDc3NGaWxlIiwiZ2V0Q3NzRmlsZU5hbWUiLCJfX1ZVRV9IT1RfTUFQX18iLCJpbnN0YWxsZWQiLCJpc0Jyb3dzZXJpZnkiLCJpbml0SG9va05hbWUiLCJ2dWUiLCJicm93c2VyaWZ5IiwiY29tcGF0aWJsZSIsImNyZWF0ZVJlY29yZCIsIm1ha2VPcHRpb25zSG90IiwiaW5zdGFuY2VzIiwiaXNSZWNvcmRlZCIsImluamVjdEhvb2siLCJyZWNvcmQiLCJ0cnlXcmFwIiwidXBkYXRlT3B0aW9ucyIsIm9sZE9wdGlvbnMiLCJuZXdPcHRpb25zIiwicmVyZW5kZXIiLCJpbnN0YW5jZSIsInJlc3RvcmUiLCJwYXRjaFNjb3BlZFNsb3RzIiwiaW5qZWN0U3R5bGVzIiwiX2luamVjdFN0eWxlcyIsInJlbG9hZCIsIm5ld0N0b3IiLCJyZWxlYXNlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7O0FBSUE7QUFDQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVNDLFlBQVQsRUFBdUI7QUFDdkMsTUFBSUMsSUFBSSxHQUFHLEVBQVgsQ0FEdUMsQ0FHdkM7O0FBQ0FBLE1BQUksQ0FBQ0MsUUFBTCxHQUFnQixTQUFTQSxRQUFULEdBQW9CO0FBQ25DLFdBQU8sS0FBS0MsR0FBTCxDQUFTLFVBQVVDLElBQVYsRUFBZ0I7QUFDL0IsVUFBSUMsT0FB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RUFBRSxFQUFFLDBEQUEwRCxxRUFBcUUsRUFBRSxFQUFFLHlEQUF5RCwwREFBMEQsRUFBRSxFQUFFLDREQUE0RCxxRUFBcUUsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLDBEQUEwRCxxRUFBcUUsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHlEQUF5RCxxRUFBcUUsRUFBRSxFQUFFLHVEQUF1RCx1REFBdUQsRUFBRSxFQUFFLHNEQUFzRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCx3REFBd0QsRUFBRSxFQUFFLHNEQUFzRCx1REFBdUQsRUFBRSxFQUFFLG9EQUFvRCxxREFBcUQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLG9EQUFvRCxxREFBcUQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLG9EQUFvRCxxREFBcUQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLG9EQUFvRCxxREFBcUQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLG9EQUFvRCxxREFBcUQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHFEQUFxRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLG9EQUFvRCxzREFBc0QsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCw2REFBNkQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLG9EQUFvRCxzREFBc0QsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCw2REFBNkQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLG9EQUFvRCxzREFBc0QsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCw2REFBNkQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLG9EQUFvRCxzREFBc0QsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCw2REFBNkQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLG9EQUFvRCxzREFBc0QsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCw2REFBNkQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCx1REFBdUQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCw4REFBOEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLHFEQUFxRCx1REFBdUQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCw4REFBOEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLHFEQUFxRCx1REFBdUQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCw4REFBOEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLHFEQUFxRCx1REFBdUQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCw4REFBOEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLHFEQUFxRCx1REFBdUQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCw4REFBOEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLHFEQUFxRCx1REFBdUQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCw4REFBOEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLHFEQUFxRCx1REFBdUQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCw4REFBOEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLHFEQUFxRCx1REFBdUQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCw4REFBOEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLHFEQUFxRCx1REFBdUQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCw4REFBOEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLHlEQUF5RCxxREFBcUQsRUFBRSxxRUFBcUUsRUFBRSx1REFBdUQsRUFBRSxFQUFFLHdEQUF3RCxxREFBcUQsRUFBRSxxRUFBcUUsRUFBRSx1REFBdUQsRUFBRSxFQUFFLDBEQUEwRCw0REFBNEQsRUFBRSxFQUFFLDJEQUEyRCw2REFBNkQsRUFBRSxFQUFFLDREQUE0RCw4REFBOEQsRUFBRSxFQUFFLCtEQUErRCxxRUFBcUUsRUFBRSxFQUFFLCtEQUErRCxxRUFBcUUsRUFBRSxFQUFFLGdFQUFnRSxzRUFBc0UsRUFBRSxFQUFFLG1FQUFtRSwrREFBK0QsRUFBRSxFQUFFLGlFQUFpRSw2REFBNkQsRUFBRSxFQUFFLDREQUE0RCw4REFBOEQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLDREQUE0RCw0REFBNEQsRUFBRSxFQUFFLDJEQUEyRCw2REFBNkQsRUFBRSxFQUFFLDhEQUE4RCw0REFBNEQsRUFBRSxFQUFFLDBE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UixFQUFjLElBQWQsQ0FBZjtBQUNEO0FBQ0YsR0FSRDs7QUFTQSxTQUFPLFlBQVk7QUFDakIrbkMsWUFBUSxDQUFDcGpDLEVBQVQsR0FBY3h0QixRQUFkO0FBQ0QsR0FGRDtBQUdELEM7Ozs7Ozs7O0FDaFJEO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoidmVuZG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XCJ0eXBlXCI6XCJzdHlsZXNoZWV0XCIsXCJzdHlsZXNoZWV0XCI6e1wicnVsZXNcIjpbe1widHlwZVwiOlwiY29tbWVudFwiLFwiY29tbWVudFwiOlwiIVxcclxcbiAqIE5hdGl2ZVNjcmlwdCBUaGVtZSB2MS4wLjYgKGh0dHBzOi8vbmF0aXZlc2NyaXB0Lm9yZylcXHJcXG4gKiBDb3B5cmlnaHQgMjAxNi0yMDE2IFRoZSBUaGVtZSBBdXRob3JzXFxyXFxuICogQ29weXJpZ2h0IDIwMTYtMjAxNiBUZWxlcmlrXFxyXFxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vTmF0aXZlU2NyaXB0L3RoZW1lL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXFxyXFxuIFwifSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYy13aGl0ZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmZlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLXdoaXRlXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiNmZmZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYy1ibGFja1wiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzAwMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLWJsYWNrXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiMwMDBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYy1hcXVhXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjMDBjYWFiXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmMtYmctYXF1YVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjMDBjYWFiXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmMtYmx1ZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzNkNWFmZVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLWJsdWVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzNkNWFmZVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWNoYXJjb2FsXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjMzAzMDMwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmMtYmctY2hhcmNvYWxcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzMwMzAzMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJyb3duXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjNzk1NTQ4XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmMtYmctYnJvd25cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzc5NTU0OFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWZvcmVzdFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzAwNjk2OFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLWZvcmVzdFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjMDA2OTY4XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmMtZ3JleVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2UwZTBlMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLWdyZXlcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2UwZTBlMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWdyZXktbGlnaHRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiNiYWJhYmFcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYy1iZy1ncmV5LWxpZ2h0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiNiYWJhYmFcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYy1ncmV5LWRhcmtcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiM1YzY4N2NcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYy1iZy1ncmV5LWRhcmtcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzVjNjg3Y1wifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLXB1cnBsZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzgxMzBmZlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLXB1cnBsZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjODEzMGZmXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmMtbGVtb25cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiNmZmVhMDBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYy1iZy1sZW1vblwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjZmZlYTAwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmMtbGltZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2FlZTQwNlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLWxpbWVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2FlZTQwNlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLW9yYW5nZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2Y1N2MwMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLW9yYW5nZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjZjU3YzAwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmMtcnVieVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmMTc0NFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLXJ1YnlcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmMTc0NFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLXNreVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzMwYmNmZlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLXNreVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnctZnVsbFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIndpZHRoXCIsXCJ2YWx1ZVwiOlwiMTAwJVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi53LTEwMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIndpZHRoXCIsXCJ2YWx1ZVwiOlwiMTAwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmgtZnVsbFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhlaWdodFwiLFwidmFsdWVcIjpcIjEwMCVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuaC0xMDBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJoZWlnaHRcIixcInZhbHVlXCI6XCIxMDBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS0wXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXQtMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tci0wXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWItMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCIwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tbC0wXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCIwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teC0wXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXktMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS0yXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXQtMlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIyXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tci0yXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWItMlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCIyXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tbC0yXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCIyXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teC0yXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXktMlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIyXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS00XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXQtNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCI0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tci00XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWItNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCI0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tbC00XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCI0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teC00XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiNFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXktNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCI0XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS01XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXQtNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tci01XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWItNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tbC01XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teC01XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiNVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXktNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCI1XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS04XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXQtOFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCI4XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tci04XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWItOFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCI4XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tbC04XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCI4XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teC04XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiOFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXktOFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCI4XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS0xMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpblwiLFwidmFsdWVcIjpcIjEwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tdC0xMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIxMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXItMTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tcmlnaHRcIixcInZhbHVlXCI6XCIxMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWItMTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMTBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS1sLTEwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCIxMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXgtMTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tcmlnaHRcIixcInZhbHVlXCI6XCIxMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMTBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS15LTEwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXRvcFwiLFwidmFsdWVcIjpcIjEwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjEwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tMTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW5cIixcInZhbHVlXCI6XCIxMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXQtMTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tdG9wXCIsXCJ2YWx1ZVwiOlwiMTJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS1yLTEyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMTJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS1iLTEyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjEyXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tbC0xMlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMTJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS14LTEyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMTJcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tbGVmdFwiLFwidmFsdWVcIjpcIjEyXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teS0xMlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIxMlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCIxMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLTE1XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS10LTE1XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXRvcFwiLFwidmFsdWVcIjpcIjE1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tci0xNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1yaWdodFwiLFwidmFsdWVcIjpcIjE1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tYi0xNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCIxNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWwtMTVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tbGVmdFwiLFwidmFsdWVcIjpcIjE1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teC0xNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1yaWdodFwiLFwidmFsdWVcIjpcIjE1XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCIxNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXktMTVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tdG9wXCIsXCJ2YWx1ZVwiOlwiMTVcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS0xNlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpblwiLFwidmFsdWVcIjpcIjE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tdC0xNlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIxNlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXItMTZcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tcmlnaHRcIixcInZhbHVlXCI6XCIxNlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWItMTZcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMTZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS1sLTE2XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCIxNlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXgtMTZcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tcmlnaHRcIixcInZhbHVlXCI6XCIxNlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMTZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS15LTE2XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXRvcFwiLFwidmFsdWVcIjpcIjE2XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tMjBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW5cIixcInZhbHVlXCI6XCIyMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXQtMjBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tdG9wXCIsXCJ2YWx1ZVwiOlwiMjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS1yLTIwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS1iLTIwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjIwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tbC0yMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS14LTIwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMjBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tbGVmdFwiLFwidmFsdWVcIjpcIjIwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teS0yMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIyMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCIyMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLTI0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiMjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS10LTI0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXRvcFwiLFwidmFsdWVcIjpcIjI0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tci0yNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1yaWdodFwiLFwidmFsdWVcIjpcIjI0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tYi0yNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCIyNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWwtMjRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tbGVmdFwiLFwidmFsdWVcIjpcIjI0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teC0yNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1yaWdodFwiLFwidmFsdWVcIjpcIjI0XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCIyNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXktMjRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tdG9wXCIsXCJ2YWx1ZVwiOlwiMjRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS0yNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpblwiLFwidmFsdWVcIjpcIjI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tdC0yNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIyNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXItMjVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tcmlnaHRcIixcInZhbHVlXCI6XCIyNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWItMjVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMjVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS1sLTI1XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCIyNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXgtMjVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tcmlnaHRcIixcInZhbHVlXCI6XCIyNVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMjVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS15LTI1XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXRvcFwiLFwidmFsdWVcIjpcIjI1XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tMjhcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW5cIixcInZhbHVlXCI6XCIyOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXQtMjhcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tdG9wXCIsXCJ2YWx1ZVwiOlwiMjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS1yLTI4XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS1iLTI4XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjI4XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tbC0yOFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS14LTI4XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMjhcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tbGVmdFwiLFwidmFsdWVcIjpcIjI4XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teS0yOFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIyOFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCIyOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLTMwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiMzBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS10LTMwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXRvcFwiLFwidmFsdWVcIjpcIjMwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tci0zMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1yaWdodFwiLFwidmFsdWVcIjpcIjMwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tYi0zMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCIzMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWwtMzBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tbGVmdFwiLFwidmFsdWVcIjpcIjMwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teC0zMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1yaWdodFwiLFwidmFsdWVcIjpcIjMwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCIzMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXktMzBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tdG9wXCIsXCJ2YWx1ZVwiOlwiMzBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMzBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC0wXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC10LTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1yLTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWItMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWwtMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC14LTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC15LTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC0yXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC10LTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1yLTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWItMlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWwtMlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC14LTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC15LTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjJcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC00XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC10LTRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1yLTRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWItNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWwtNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC14LTRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiNFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC15LTRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC01XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC10LTVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1yLTVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWItNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWwtNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC14LTVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiNVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC15LTVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjVcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC04XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC10LThcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1yLThcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWItOFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWwtOFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC14LThcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiOFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC15LThcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjhcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC0xMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmdcIixcInZhbHVlXCI6XCIxMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXQtMTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjEwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtci0xMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctcmlnaHRcIixcInZhbHVlXCI6XCIxMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWItMTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjEwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtbC0xMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjEwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAteC0xMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctcmlnaHRcIixcInZhbHVlXCI6XCIxMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjEwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAteS0xMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctdG9wXCIsXCJ2YWx1ZVwiOlwiMTBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjEwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtMTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nXCIsXCJ2YWx1ZVwiOlwiMTJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC10LTEyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy10b3BcIixcInZhbHVlXCI6XCIxMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXItMTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMTJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1iLTEyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1ib3R0b21cIixcInZhbHVlXCI6XCIxMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWwtMTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWxlZnRcIixcInZhbHVlXCI6XCIxMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXgtMTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMTJcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWxlZnRcIixcInZhbHVlXCI6XCIxMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXktMTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjEyXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1ib3R0b21cIixcInZhbHVlXCI6XCIxMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLTE1XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjE1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtdC0xNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctdG9wXCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1yLTE1XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1yaWdodFwiLFwidmFsdWVcIjpcIjE1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtYi0xNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1sLTE1XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC14LTE1XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1yaWdodFwiLFwidmFsdWVcIjpcIjE1XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC15LTE1XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy10b3BcIixcInZhbHVlXCI6XCIxNVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC0xNlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmdcIixcInZhbHVlXCI6XCIxNlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXQtMTZcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtci0xNlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctcmlnaHRcIixcInZhbHVlXCI6XCIxNlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWItMTZcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtbC0xNlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAteC0xNlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctcmlnaHRcIixcInZhbHVlXCI6XCIxNlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAteS0xNlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctdG9wXCIsXCJ2YWx1ZVwiOlwiMTZcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtMjBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nXCIsXCJ2YWx1ZVwiOlwiMjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC10LTIwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy10b3BcIixcInZhbHVlXCI6XCIyMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXItMjBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1iLTIwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1ib3R0b21cIixcInZhbHVlXCI6XCIyMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWwtMjBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWxlZnRcIixcInZhbHVlXCI6XCIyMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXgtMjBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMjBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWxlZnRcIixcInZhbHVlXCI6XCIyMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXktMjBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjIwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1ib3R0b21cIixcInZhbHVlXCI6XCIyMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLTI0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjI0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtdC0yNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctdG9wXCIsXCJ2YWx1ZVwiOlwiMjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1yLTI0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1yaWdodFwiLFwidmFsdWVcIjpcIjI0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtYi0yNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1sLTI0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC14LTI0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1yaWdodFwiLFwidmFsdWVcIjpcIjI0XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC15LTI0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy10b3BcIixcInZhbHVlXCI6XCIyNFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC0yNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmdcIixcInZhbHVlXCI6XCIyNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXQtMjVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtci0yNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctcmlnaHRcIixcInZhbHVlXCI6XCIyNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWItMjVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtbC0yNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAteC0yNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctcmlnaHRcIixcInZhbHVlXCI6XCIyNVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAteS0yNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctdG9wXCIsXCJ2YWx1ZVwiOlwiMjVcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtMjhcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nXCIsXCJ2YWx1ZVwiOlwiMjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC10LTI4XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy10b3BcIixcInZhbHVlXCI6XCIyOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXItMjhcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1iLTI4XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1ib3R0b21cIixcInZhbHVlXCI6XCIyOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWwtMjhcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWxlZnRcIixcInZhbHVlXCI6XCIyOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXgtMjhcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMjhcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWxlZnRcIixcInZhbHVlXCI6XCIyOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXktMjhcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjI4XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1ib3R0b21cIixcInZhbHVlXCI6XCIyOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLTMwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjMwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtdC0zMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctdG9wXCIsXCJ2YWx1ZVwiOlwiMzBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1yLTMwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1yaWdodFwiLFwidmFsdWVcIjpcIjMwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtYi0zMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMzBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1sLTMwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMzBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC14LTMwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1yaWdodFwiLFwidmFsdWVcIjpcIjMwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMzBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC15LTMwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy10b3BcIixcInZhbHVlXCI6XCIzMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMzBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuaHItbGlnaHRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJoZWlnaHRcIixcInZhbHVlXCI6XCIxXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiNlMGUwZTBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJ3aWR0aFwiLFwidmFsdWVcIjpcIjEwMCVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuaHItZGFya1wiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhlaWdodFwiLFwidmFsdWVcIjpcIjFcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzMwMzAzMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIndpZHRoXCIsXCJ2YWx1ZVwiOlwiMTAwJVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi50ZXh0LWxlZnRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJ0ZXh0LWFsaWduXCIsXCJ2YWx1ZVwiOlwibGVmdFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi50ZXh0LXJpZ2h0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwidGV4dC1hbGlnblwiLFwidmFsdWVcIjpcInJpZ2h0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnRleHQtY2VudGVyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwidGV4dC1hbGlnblwiLFwidmFsdWVcIjpcImNlbnRlclwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi50ZXh0LWxvd2VyY2FzZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInRleHQtdHJhbnNmb3JtXCIsXCJ2YWx1ZVwiOlwibG93ZXJjYXNlXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnRleHQtdXBwZXJjYXNlXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwidGV4dC10cmFuc2Zvcm1cIixcInZhbHVlXCI6XCJ1cHBlcmNhc2VcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIudGV4dC1jYXBpdGFsaXplXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwidGV4dC10cmFuc2Zvcm1cIixcInZhbHVlXCI6XCJjYXBpdGFsaXplXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmZvbnQtd2VpZ2h0LW5vcm1hbFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtd2VpZ2h0XCIsXCJ2YWx1ZVwiOlwibm9ybWFsXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmZvbnQtd2VpZ2h0LWJvbGRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXdlaWdodFwiLFwidmFsdWVcIjpcImJvbGRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuZm9udC1pdGFsaWNcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXN0eWxlXCIsXCJ2YWx1ZVwiOlwiaXRhbGljXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnQtMTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi50LTEyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIudC0xNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjE0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnQtMTVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi50LTE2XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIudC0xN1wiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjE3XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnQtMThcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi50LTE5XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTlcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIudC0yMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjIwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnQtMjVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIyNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi50LTMwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMzBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuaW1nLXJvdW5kZWRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItcmFkaXVzXCIsXCJ2YWx1ZVwiOlwiNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5pbWctY2lyY2xlXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYm9yZGVyLXJhZGl1c1wiLFwidmFsdWVcIjpcIjIwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmltZy10aHVtYm5haWxcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItcmFkaXVzXCIsXCJ2YWx1ZVwiOlwiMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5pbnZpc2libGVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJ2aXNpYmlsaXR5XCIsXCJ2YWx1ZVwiOlwiY29sbGFwc2VcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucHVsbC1sZWZ0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiaG9yaXpvbnRhbC1hbGlnblwiLFwidmFsdWVcIjpcImxlZnRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucHVsbC1yaWdodFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhvcml6b250YWwtYWxpZ25cIixcInZhbHVlXCI6XCJyaWdodFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXgtYXV0b1wiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhvcml6b250YWwtYWxpZ25cIixcInZhbHVlXCI6XCJjZW50ZXJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS15LWF1dG9cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJ2ZXJ0aWNhbC1hbGlnblwiLFwidmFsdWVcIjpcImNlbnRlclwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi50ZXh0LXByaW1hcnlcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiMzMGJjZmZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIudGV4dC1kYW5nZXJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiNkNTAwMDBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIudGV4dC1tdXRlZFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzllOWU5ZVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5iZy1wcmltYXJ5XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiMzMGJjZmZcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiNmZmZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYmctZGFuZ2VyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiNkNTAwMDBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiNmZmZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYWN0aW9uLWJhclwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjRjhGOEY4XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjMjEyMTIxXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmFjdGlvbi1iYXIgLmFjdGlvbi1iYXItdGl0bGVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXdlaWdodFwiLFwidmFsdWVcIjpcImJvbGRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxN1wifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInZlcnRpY2FsLWFsaWduXCIsXCJ2YWx1ZVwiOlwiY2VudGVyXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmFjdGlvbi1iYXIgLmFjdGlvbi1pdGVtXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC13ZWlnaHRcIixcInZhbHVlXCI6XCJub3JtYWxcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYWN0aXZpdHktaW5kaWNhdG9yXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwid2lkdGhcIixcInZhbHVlXCI6XCIzMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhlaWdodFwiLFwidmFsdWVcIjpcIjMwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmJ0blwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzMwYmNmZlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCJ0cmFuc3BhcmVudFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1pbi1oZWlnaHRcIixcInZhbHVlXCI6XCIzNlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1pbi13aWR0aFwiLFwidmFsdWVcIjpcIjY0XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjEwIDEwIDEwIDEwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMThcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW5cIixcInZhbHVlXCI6XCI4IDE2IDggMTZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYnRuLmJ0bi1hY3RpdmU6aGlnaGxpZ2h0ZWRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiNmZmZcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2MwZWJmZlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tcHJpbWFyeVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYm9yZGVyLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzMwYmNmZlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmZlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tcHJpbWFyeS5idG4tYWN0aXZlOmhpZ2hsaWdodGVkXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiMwMWEwZWNcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItY29sb3JcIixcInZhbHVlXCI6XCIjMDFhMGVjXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmJ0bi1wcmltYXJ5LmJ0bi1hcXVhXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiMwMGNhYWJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYnRuLXByaW1hcnkuYnRuLWJsdWVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzNkNWFmZVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tcHJpbWFyeS5idG4tYnJvd25cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzc5NTU0OFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tcHJpbWFyeS5idG4tZm9yZXN0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiMwMDY5NjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYnRuLXByaW1hcnkuYnRuLWdyZXlcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzVjNjg3Y1wifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tcHJpbWFyeS5idG4tbGVtb25cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmZWEwMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzAwMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tcHJpbWFyeS5idG4tbGltZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjYWVlNDA2XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjMDAwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmJ0bi1wcmltYXJ5LmJ0bi1vcmFuZ2VcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2Y1N2MwMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tcHJpbWFyeS5idG4tcHVycGxlXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiM4MTMwZmZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYnRuLXByaW1hcnkuYnRuLXJ1YnlcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmMTc0NFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tcHJpbWFyeS5idG4tc2t5XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiMzMGJjZmZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYnRuLW91dGxpbmVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwidHJhbnNwYXJlbnRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmJ0bi1vdXRsaW5lLmJ0bi1hY3RpdmU6aGlnaGxpZ2h0ZWRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2MwZWJmZlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG5baXNFbmFibGVkPWZhbHNlXVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2E0YTRhNFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjZTBlMGUwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYm9yZGVyLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2UwZTBlMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5mYVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtZmFtaWx5XCIsXCJ2YWx1ZVwiOlwiRm9udEF3ZXNvbWUsIGZvbnRhd2Vzb21lLXdlYmZvbnRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuZm9ybSAuaW5wdXRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nXCIsXCJ2YWx1ZVwiOlwiMTYgOCAxNiA4XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcInRyYW5zcGFyZW50XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmZvcm0gLmlucHV0LmlucHV0LWJvcmRlclwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJvcmRlci13aWR0aFwiLFwidmFsdWVcIjpcIjFcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItY29sb3JcIixcInZhbHVlXCI6XCIjZTBlMGUwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYm9yZGVyLXJhZGl1c1wiLFwidmFsdWVcIjpcIjJcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nXCIsXCJ2YWx1ZVwiOlwiMTZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuZm9ybSAuaW5wdXQuaW5wdXQtcm91bmRlZFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJvcmRlci13aWR0aFwiLFwidmFsdWVcIjpcIjFcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItY29sb3JcIixcInZhbHVlXCI6XCIjZTBlMGUwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYm9yZGVyLXJhZGl1c1wiLFwidmFsdWVcIjpcIjI4XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmZvcm0gLmlucHV0W2lzRW5hYmxlZD0nZmFsc2UnXVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjZmFmYWZhXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmZvcm0gLmlucHV0LWZpZWxkXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5mb3JtIC5pbnB1dC1maWVsZCAubGFiZWxcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxMlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2JhYmFiYVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5mb3JtIC5pbnB1dC1maWVsZCAuaW5wdXRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nXCIsXCJ2YWx1ZVwiOlwiMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpblwiLFwidmFsdWVcIjpcIjAgMCA4IDBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuZm9ybSAuaW5wdXQtZmllbGQgLmhyLWxpZ2h0LmFjdGl2ZVwiLFwiLmZvcm0gLmlucHV0LWZpZWxkIC5oci1kYXJrLmFjdGl2ZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmZvcm0gLmlucHV0LWZpZWxkLmlucHV0LXNpZGVzIC5sYWJlbFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjE4XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiMCAwIDggMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5oMVwiLFwiLmgyXCIsXCIuaDNcIixcIi5oNFwiLFwiLmg1XCIsXCIuaDZcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tYm90dG9tXCIsXCJ2YWx1ZVwiOlwiNFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtd2VpZ2h0XCIsXCJ2YWx1ZVwiOlwibm9ybWFsXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjMjEyMTIxXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmJvZHlcIixcIi5ib2R5MlwiLFwiLmZvb3Rub3RlXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC13ZWlnaHRcIixcInZhbHVlXCI6XCJub3JtYWxcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiM3NTc1NzVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuaDFcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIzMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5oMlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjIyXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmgzXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuaDRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5oNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjExXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmg2XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYm9keVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjE0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmJvZHkyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTdcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuZm9vdG5vdGVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxM1wifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5saXN0LWdyb3VwIC5saXN0LWdyb3VwLWl0ZW1cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiMyMTIxMjFcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxNlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpblwiLFwidmFsdWVcIjpcIjBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nXCIsXCJ2YWx1ZVwiOlwiMTZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubGlzdC1ncm91cCAubGlzdC1ncm91cC1pdGVtIExhYmVsXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwidmVydGljYWwtYWxpZ25cIixcInZhbHVlXCI6XCJjZW50ZXJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubGlzdC1ncm91cCAubGlzdC1ncm91cC1pdGVtIC50aHVtYlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInN0cmV0Y2hcIixcInZhbHVlXCI6XCJmaWxsXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwid2lkdGhcIixcInZhbHVlXCI6XCI0MFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhlaWdodFwiLFwidmFsdWVcIjpcIjQwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMTZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubGlzdC1ncm91cCAubGlzdC1ncm91cC1pdGVtLmFjdGl2ZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjZTBlMGUwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmxpc3QtZ3JvdXAgLmxpc3QtZ3JvdXAtaXRlbSAubGlzdC1ncm91cC1pdGVtLXRleHRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiM3NTc1NzVcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wYWdlXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiNmZmZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucHJvZ3Jlc3NcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiMzMGJjZmZcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2JhYmFiYVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zZWdtZW50ZWQtYmFyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTNcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmZlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzIxMjEyMVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInNlbGVjdGVkLWJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnNpZGVkcmF3ZXItbGVmdFwiLFwiLnNpZGVkcmF3ZXItY2VudGVyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiNmYWZhZmFcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2lkZWRyYXdlci1oZWFkZXJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZhZmFmYVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhlaWdodFwiLFwidmFsdWVcIjpcIjE0OFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIndpZHRoXCIsXCJ2YWx1ZVwiOlwiMTAwJVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zaWRlZHJhd2VyLWxlZnQgLnNpZGVkcmF3ZXItaGVhZGVyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjE2IDE2IDAgMTZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2lkZWRyYXdlci1jZW50ZXIgLnNpZGVkcmF3ZXItaGVhZGVyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjIwIDE1IDAgMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2lkZWRyYXdlci1oZWFkZXItaW1hZ2VcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2UwZTBlMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zaWRlZHJhd2VyLWxlZnQgLnNpZGVkcmF3ZXItaGVhZGVyLWltYWdlXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiaGVpZ2h0XCIsXCJ2YWx1ZVwiOlwiNjRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJ3aWR0aFwiLFwidmFsdWVcIjpcIjY0XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYm9yZGVyLXJhZGl1c1wiLFwidmFsdWVcIjpcIjMyXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiaG9yaXpvbnRhbC1hbGlnblwiLFwidmFsdWVcIjpcImxlZnRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMzZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2lkZWRyYXdlci1jZW50ZXIgLnNpZGVkcmF3ZXItaGVhZGVyLWltYWdlXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiaGVpZ2h0XCIsXCJ2YWx1ZVwiOlwiNzRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJ3aWR0aFwiLFwidmFsdWVcIjpcIjc0XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYm9yZGVyLXJhZGl1c1wiLFwidmFsdWVcIjpcIjM3XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiaG9yaXpvbnRhbC1hbGlnblwiLFwidmFsdWVcIjpcImNlbnRlclwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCIyNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zaWRlZHJhd2VyLWhlYWRlci1icmFuZFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzczNzM3M1wifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zaWRlZHJhd2VyLWxlZnQgLnNpZGVkcmF3ZXItaGVhZGVyLWJyYW5kXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiaG9yaXpvbnRhbC1hbGlnblwiLFwidmFsdWVcIjpcImxlZnRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zaWRlZHJhd2VyLWNlbnRlciAuc2lkZWRyYXdlci1oZWFkZXItYnJhbmRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJob3Jpem9udGFsLWFsaWduXCIsXCJ2YWx1ZVwiOlwiY2VudGVyXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2lkZWRyYXdlci1saXN0LWl0ZW1cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJoZWlnaHRcIixcInZhbHVlXCI6XCI0OFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhvcml6b250YWwtYWxpZ25cIixcInZhbHVlXCI6XCJsZWZ0XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwid2lkdGhcIixcInZhbHVlXCI6XCIxMDAlXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwib3JpZW50YXRpb25cIixcInZhbHVlXCI6XCJob3Jpem9udGFsXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnNpZGVkcmF3ZXItbGlzdC1pdGVtIC5zaWRlZHJhd2VyLWxpc3QtaXRlbS1pY29uXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwid2lkdGhcIixcInZhbHVlXCI6XCIyNFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInRleHQtYWxpZ25cIixcInZhbHVlXCI6XCJjZW50ZXJcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIyMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhlaWdodFwiLFwidmFsdWVcIjpcIjQ4XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwidmVydGljYWwtYWxpZ25cIixcInZhbHVlXCI6XCJjZW50ZXJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2lkZWRyYXdlci1saXN0LWl0ZW0uYWN0aXZlXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjZmZmXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiMzMGJjZmZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2lkZWRyYXdlci1saXN0LWl0ZW0uYWN0aXZlIC5zaWRlZHJhd2VyLWxpc3QtaXRlbS1pY29uXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjZmZmXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnNpZGVkcmF3ZXItbGVmdCAuc2lkZWRyYXdlci1saXN0LWl0ZW0taWNvblwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpblwiLFwidmFsdWVcIjpcIjAgMTYgMCAxNlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zaWRlZHJhd2VyLWNlbnRlciAuc2lkZWRyYXdlci1saXN0LWl0ZW0taWNvblwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpblwiLFwidmFsdWVcIjpcIjAgMCAwIDE1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnNpZGVkcmF3ZXItbGlzdC1pdGVtLXRleHRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJob3Jpem9udGFsLWFsaWduXCIsXCJ2YWx1ZVwiOlwibGVmdFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInRleHQtYWxpZ25cIixcInZhbHVlXCI6XCJsZWZ0XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTVcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwidHJhbnNwYXJlbnRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItd2lkdGhcIixcInZhbHVlXCI6XCIwLjFcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJ3aWR0aFwiLFwidmFsdWVcIjpcIjgwJVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInZlcnRpY2FsLWFsaWduXCIsXCJ2YWx1ZVwiOlwiY2VudGVyXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnNpZGVkcmF3ZXItbGVmdCAuc2lkZWRyYXdlci1saXN0LWl0ZW0tdGV4dFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnNpZGVkcmF3ZXItY2VudGVyIC5zaWRlZHJhd2VyLWxpc3QtaXRlbS10ZXh0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2xpZGVyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiMzMGJjZmZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2xpZGVyW2lzRW5hYmxlZD1mYWxzZV1cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2UwZTBlMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2UwZTBlMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zd2l0Y2hbY2hlY2tlZD10cnVlXVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnN3aXRjaFtjaGVja2VkPXRydWVdW2lzRW5hYmxlZD1mYWxzZV1cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2UwZTBlMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmZlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zd2l0Y2hbaXNFbmFibGVkPWZhbHNlXVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjZTBlMGUwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjZTBlMGUwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnRhYi12aWV3XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwic2VsZWN0ZWQtY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwidGFicy1iYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmZlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi50YWItdmlldyAudGFiLXZpZXctaXRlbVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjZmZmXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwidGFicy1iYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmZlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIiNsb2dpbi1iYWNrZ3JvdW5kXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXRvcFwiLFwidmFsdWVcIjpcIi0yMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtc2l6ZVwiLFwidmFsdWVcIjpcImNvdmVyXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1wb3NpdGlvblwiLFwidmFsdWVcIjpcImNlbnRlclwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5sb2dpbi13cmFwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjAgNDBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubG9nby13cmFwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiNjAgMCAxMCAwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjIwIDBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubG9nby13cmFwIC5sb2dpbi1sb2dvXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwidGV4dC1hbGlnblwiLFwidmFsdWVcIjpcImNlbnRlclwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjMwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC13ZWlnaHRcIixcInZhbHVlXCI6XCJib2xkXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjEwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwib3BhY2l0eVwiLFwidmFsdWVcIjpcIjFcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiMyMTIxMjFcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJvcGFjaXR5XCIsXCJ2YWx1ZVwiOlwiLjlcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubG9nby13cmFwIC5sb2dpbi1sb2dvLXN1YlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzIxMjEyMVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm9wYWNpdHlcIixcInZhbHVlXCI6XCIuOFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInRleHQtYWxpZ25cIixcInZhbHVlXCI6XCJjZW50ZXJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubG9naW4td3JhcHBlclwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmdcIixcInZhbHVlXCI6XCIyMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjZmZmXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYm9yZGVyLXJhZGl1c1wiLFwidmFsdWVcIjpcIjNcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubG9naW4td3JhcHBlciBUZXh0RmllbGRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nXCIsXCJ2YWx1ZVwiOlwiMTAgMTBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW5cIixcInZhbHVlXCI6XCIxMCAwIDAgMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5nby1iYWNrXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJ0ZXh0LWFsaWduXCIsXCJ2YWx1ZVwiOlwiY2VudGVyXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjMjEyMTIxXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXRvcFwiLFwidmFsdWVcIjpcIjEwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmFjdGlvbi1iYXIgLmFjdGlvbi1iYXItdGl0bGVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXdlaWdodFwiLFwidmFsdWVcIjpcIjUwMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjIwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmFjdGlvbi1iYXIgLmFjdGlvbi1pdGVtXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYW5kcm9pZC1lbGV2YXRpb25cIixcInZhbHVlXCI6XCIwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcInJnYmEoMjU1LDAsMCwwKVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJvcmRlci1jb2xvclwiLFwidmFsdWVcIjpcInJnYmEoMjU1LDAsMCwwKVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJvcmRlci13aWR0aFwiLFwidmFsdWVcIjpcIjFcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYnRuXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1mYW1pbHlcIixcInZhbHVlXCI6XCInUm9ib3RvIE1lZGl1bSdcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tcHJpbWFyeVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJvcmRlci1jb2xvclwiLFwidmFsdWVcIjpcInJnYmEoMjU1LDAsMCwwKVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tb3V0bGluZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImFuZHJvaWQtZWxldmF0aW9uXCIsXCJ2YWx1ZVwiOlwiMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCJyZ2JhKDI1NSwwLDAsMClcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItd2lkdGhcIixcInZhbHVlXCI6XCIxXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYm9yZGVyLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzMwYmNmZlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhlaWdodFwiLFwidmFsdWVcIjpcIjM2XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYnRuLXJvdW5kZWQtc21cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItcmFkaXVzXCIsXCJ2YWx1ZVwiOlwiMlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhlaWdodFwiLFwidmFsdWVcIjpcIjM2XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYnRuLXJvdW5kZWQtbGdcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItcmFkaXVzXCIsXCJ2YWx1ZVwiOlwiNDBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJoZWlnaHRcIixcInZhbHVlXCI6XCIzNlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmdcIixcInZhbHVlXCI6XCIwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmZvcm1cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LWZhbWlseVwiLFwidmFsdWVcIjpcIidSb2JvdG8gUmVndWxhcidcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuZm9ybSAuaW5wdXRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxNlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5oMVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjM0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmgyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuaDNcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxNlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5oNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjExXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC13ZWlnaHRcIixcInZhbHVlXCI6XCJib2xkXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmJvZHkyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXdlaWdodFwiLFwidmFsdWVcIjpcIjUwMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zaWRlZHJhd2VyLWxpc3QtaXRlbS1pY29uXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiMCAxNiAwIDE2XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy10b3BcIixcInZhbHVlXCI6XCIxNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zaWRlZHJhd2VyLWxpc3QtaXRlbS1pY29uXCIsXCIuc2lkZWRyYXdlci1saXN0LWl0ZW1cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiM3MzczNzNcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2lkZWRyYXdlci1saXN0LWl0ZW1cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LWZhbWlseVwiLFwidmFsdWVcIjpcIidSb2JvdG8gTWVkaXVtJ1wifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjE0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnNsaWRlclwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzMwYmNmZlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpblwiLFwidmFsdWVcIjpcIjIwIDE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnN3aXRjaFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpblwiLFwidmFsdWVcIjpcIjE0IDE2XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjZTBlMGUwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiNlMGUwZTBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc3dpdGNoW2NoZWNrZWQ9dHJ1ZV1cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiMzMGJjZmZcIn1dfV0sXCJwYXJzaW5nRXJyb3JzXCI6W119fTsiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGhvdCA9IHJlcXVpcmUoXCIuLi9ob3RcIik7XG5jb25zdCBmaWxlX3N5c3RlbV8xID0gcmVxdWlyZShcInRucy1jb3JlLW1vZHVsZXMvZmlsZS1zeXN0ZW1cIik7XG5mdW5jdGlvbiBobXJVcGRhdGUoKSB7XG4gICAgY29uc3QgY3VycmVudEFwcEZvbGRlciA9IGZpbGVfc3lzdGVtXzEua25vd25Gb2xkZXJzLmN1cnJlbnRBcHAoKTtcbiAgICBjb25zdCBsYXRlc3RIYXNoID0gX193ZWJwYWNrX3JlcXVpcmVfX1tcImhcIl0oKTtcbiAgICByZXR1cm4gaG90KGxhdGVzdEhhc2gsIGZpbGVuYW1lID0+IHtcbiAgICAgICAgY29uc3QgZnVsbEZpbGVQYXRoID0gZmlsZV9zeXN0ZW1fMS5wYXRoLmpvaW4oY3VycmVudEFwcEZvbGRlci5wYXRoLCBmaWxlbmFtZSk7XG4gICAgICAgIHJldHVybiBmaWxlX3N5c3RlbV8xLkZpbGUuZXhpc3RzKGZ1bGxGaWxlUGF0aCkgPyBjdXJyZW50QXBwRm9sZGVyLmdldEZpbGUoZmlsZW5hbWUpIDogbnVsbDtcbiAgICB9KTtcbn1cbmV4cG9ydHMuaG1yVXBkYXRlID0gaG1yVXBkYXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG1yLXVwZGF0ZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBobXJfdXBkYXRlXzEgPSByZXF1aXJlKFwiLi9obXItdXBkYXRlXCIpO1xuZXhwb3J0cy5obXJVcGRhdGUgPSBobXJfdXBkYXRlXzEuaG1yVXBkYXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiY29uc3QgaG1yUHJlZml4ID0gJ0hNUjonO1xuY29uc3QgbG9nID0ge1xuICAgIGluZm86IChtZXNzYWdlKSA9PiBjb25zb2xlLmluZm8oYCR7aG1yUHJlZml4fSAke21lc3NhZ2V9YCksXG4gICAgd2FybjogKG1lc3NhZ2UpID0+IGNvbnNvbGUud2FybihgJHtobXJQcmVmaXh9ICR7bWVzc2FnZX1gKSxcbiAgICBlcnJvcjogKG1lc3NhZ2UpID0+IGNvbnNvbGUuZXJyb3IoYCR7aG1yUHJlZml4fSAke21lc3NhZ2V9YCksXG59O1xuY29uc3QgcmVmcmVzaCA9ICdBcHBsaWNhdGlvbiBuZWVkcyB0byBiZSByZXN0YXJ0ZWQgaW4gb3JkZXIgdG8gYXBwbHkgdGhlIGNoYW5nZXMuJztcbmNvbnN0IGhvdE9wdGlvbnMgPSB7XG4gICAgaWdub3JlVW5hY2NlcHRlZDogZmFsc2UsXG4gICAgaWdub3JlRGVjbGluZWQ6IGZhbHNlLFxuICAgIGlnbm9yZUVycm9yZWQ6IGZhbHNlLFxuICAgIG9uVW5hY2NlcHRlZChkYXRhKSB7XG4gICAgICAgIGNvbnN0IGNoYWluID0gW10uY29uY2F0KGRhdGEuY2hhaW4pO1xuICAgICAgICBjb25zdCBsYXN0ID0gY2hhaW5bY2hhaW4ubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKGxhc3QgPT09IDApIHtcbiAgICAgICAgICAgIGNoYWluLnBvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgbG9nLndhcm4oYElnbm9yZWQgYW4gdXBkYXRlIHRvIHVuYWNjZXB0ZWQgbW9kdWxlOiBgKTtcbiAgICAgICAgY2hhaW4uZm9yRWFjaChtb2QgPT4gbG9nLndhcm4oYCAgICAgICAgIOKerSAke21vZH1gKSk7XG4gICAgfSxcbiAgICBvbkRlY2xpbmVkKGRhdGEpIHtcbiAgICAgICAgbG9nLndhcm4oYElnbm9yZWQgYW4gdXBkYXRlIHRvIGRlY2xpbmVkIG1vZHVsZTpgKTtcbiAgICAgICAgZGF0YS5jaGFpbi5mb3JFYWNoKG1vZCA9PiBsb2cud2FybihgICAgICAgICAg4p6tICR7bW9kfWApKTtcbiAgICB9LFxuICAgIG9uRXJyb3JlZChkYXRhKSB7XG4gICAgICAgIGxvZy53YXJuKFxuICAgICAgICAgICAgYElnbm9yZWQgYW4gZXJyb3Igd2hpbGUgdXBkYXRpbmcgbW9kdWxlICR7ZGF0YS5tb2R1bGVJZH0gPCR7ZGF0YS50eXBlfT5gXG4gICAgICAgICk7XG4gICAgICAgIGxvZy53YXJuKGRhdGEuZXJyb3IpO1xuICAgIH0sXG59O1xuXG5sZXQgbmV4dEhhc2g7XG5sZXQgY3VycmVudEhhc2g7XG5cbmZ1bmN0aW9uIHVwVG9EYXRlKCkge1xuICAgIHJldHVybiBuZXh0SGFzaC5pbmRleE9mKF9fd2VicGFja19oYXNoX18pID49IDA7XG59XG5cbmZ1bmN0aW9uIHJlc3VsdChtb2R1bGVzLCBhcHBsaWVkTW9kdWxlcykge1xuICAgIGNvbnN0IHVuYWNjZXB0ZWQgPSBtb2R1bGVzLmZpbHRlcihcbiAgICAgICAgKG1vZHVsZUlkKSA9PiBhcHBsaWVkTW9kdWxlcyAmJiBhcHBsaWVkTW9kdWxlcy5pbmRleE9mKG1vZHVsZUlkKSA8IDBcbiAgICApO1xuXG4gICAgaWYgKHVuYWNjZXB0ZWQubGVuZ3RoID4gMCkge1xuICAgICAgICBsb2cud2FybignVGhlIGZvbGxvd2luZyBtb2R1bGVzIGNvdWxkIG5vdCBiZSB1cGRhdGVkOicpO1xuXG4gICAgICAgIGZvciAoY29uc3QgbW9kdWxlSWQgb2YgdW5hY2NlcHRlZCkge1xuICAgICAgICAgICAgbG9nLndhcm4oYCAgICAgICAgICDiprsgJHttb2R1bGVJZH1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICghKGFwcGxpZWRNb2R1bGVzIHx8IFtdKS5sZW5ndGgpIHtcbiAgICAgICAgbG9nLmluZm8oJ05vIE1vZHVsZXMgVXBkYXRlZC4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsb2cuaW5mbygnVGhlIGZvbGxvd2luZyBtb2R1bGVzIHdlcmUgdXBkYXRlZDonKTtcblxuICAgICAgICBmb3IgKGNvbnN0IG1vZHVsZUlkIG9mIGFwcGxpZWRNb2R1bGVzKSB7XG4gICAgICAgICAgICBsb2cuaW5mbyhgICAgICAgICAg4oa7ICR7bW9kdWxlSWR9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBudW1iZXJJZHMgPSBhcHBsaWVkTW9kdWxlcy5ldmVyeShcbiAgICAgICAgICAgIChtb2R1bGVJZCkgPT4gdHlwZW9mIG1vZHVsZUlkID09PSAnbnVtYmVyJ1xuICAgICAgICApO1xuICAgICAgICBpZiAobnVtYmVySWRzKSB7XG4gICAgICAgICAgICBsb2cuaW5mbyhcbiAgICAgICAgICAgICAgICAnUGxlYXNlIGNvbnNpZGVyIHVzaW5nIHRoZSBOYW1lZE1vZHVsZXNQbHVnaW4gZm9yIG1vZHVsZSBuYW1lcy4nXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjaGVjayhvcHRpb25zKSB7XG4gICAgcmV0dXJuIG1vZHVsZS5ob3RcbiAgICAgICAgLmNoZWNrKClcbiAgICAgICAgLnRoZW4oKG1vZHVsZXMpID0+IHtcbiAgICAgICAgICAgIGlmICghbW9kdWxlcykge1xuICAgICAgICAgICAgICAgIGxvZy53YXJuKFxuICAgICAgICAgICAgICAgICAgICBgQ2Fubm90IGZpbmQgdXBkYXRlLiAke3JlZnJlc2h9YFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBtb2R1bGUuaG90XG4gICAgICAgICAgICAgICAgLmFwcGx5KGhvdE9wdGlvbnMpXG4gICAgICAgICAgICAgICAgLnRoZW4oKGFwcGxpZWRNb2R1bGVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0Q2hlY2s7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdXBUb0RhdGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dENoZWNrID0gY2hlY2sob3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXN1bHQobW9kdWxlcywgYXBwbGllZE1vZHVsZXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cFRvRGF0ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEbyBub3QgbW9kaWZ5IG1lc3NhZ2UgLSBDTEkgZGVwZW5kcyBvbiB0aGlzIGV4YWN0IGNvbnRlbnQgdG8gZGV0ZXJtaW5lIGhtciBvcGVyYXRpb24gc3RhdHVzLlxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmluZm8oYFN1Y2Nlc3NmdWxseSBhcHBsaWVkIHVwZGF0ZSB3aXRoIGhtciBoYXNoICR7Y3VycmVudEhhc2h9LiBBcHAgaXMgdXAgdG8gZGF0ZS5gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0Q2hlY2sgfHwgbnVsbDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IG1vZHVsZS5ob3Quc3RhdHVzKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChbJ2Fib3J0JywgJ2ZhaWwnXS5pbmRleE9mKHN0YXR1cykgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90IG1vZGlmeSBtZXNzYWdlIC0gQ0xJIGRlcGVuZHMgb24gdGhpcyBleGFjdCBjb250ZW50IHRvIGRldGVybWluZSBobXIgb3BlcmF0aW9uIHN0YXR1cy5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5lcnJvcihgQ2Fubm90IGFwcGx5IHVwZGF0ZSB3aXRoIGhtciBoYXNoICR7Y3VycmVudEhhc2h9LmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmVycm9yKGVyci5tZXNzYWdlIHx8IGVyci5zdGFjayk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cuZXJyb3IoYFVwZGF0ZSBmYWlsZWQ6ICR7ZXJyLm1lc3NhZ2UgfHwgZXJyLnN0YWNrfWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdGF0dXMgPSBtb2R1bGUuaG90LnN0YXR1cygpO1xuICAgICAgICAgICAgaWYgKFsnYWJvcnQnLCAnZmFpbCddLmluZGV4T2Yoc3RhdHVzKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgbG9nLmVycm9yKGBDYW5ub3QgY2hlY2sgZm9yIHVwZGF0ZS4gJHtyZWZyZXNofWApO1xuICAgICAgICAgICAgICAgIGxvZy5lcnJvcihlcnIubWVzc2FnZSB8fCBlcnIuc3RhY2spO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2cuZXJyb3IoYFVwZGF0ZSBjaGVjayBmYWlsZWQ6ICR7ZXJyLm1lc3NhZ2UgfHwgZXJyLnN0YWNrfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbn1cblxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgICBsb2cuaW5mbygnSG90IE1vZHVsZSBSZXBsYWNlbWVudCBFbmFibGVkLiBXYWl0aW5nIGZvciBzaWduYWwuJyk7XG59IGVsc2Uge1xuICAgIGxvZy5lcnJvcignSG90IE1vZHVsZSBSZXBsYWNlbWVudCBpcyBkaXNhYmxlZC4nKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlKGxhdGVzdEhhc2gsIG9wdGlvbnMpIHtcbiAgICBuZXh0SGFzaCA9IGxhdGVzdEhhc2g7XG4gICAgaWYgKCF1cFRvRGF0ZSgpKSB7XG4gICAgICAgIGNvbnN0IHN0YXR1cyA9IG1vZHVsZS5ob3Quc3RhdHVzKCk7XG5cbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ2lkbGUnKSB7XG4gICAgICAgICAgICAvL0RvIG5vdCBtb2RpZnkgbWVzc2FnZSAtIENMSSBkZXBlbmRzIG9uIHRoaXMgZXhhY3QgY29udGVudCB0byBkZXRlcm1pbmUgaG1yIG9wZXJhdGlvbiBzdGF0dXMuXG4gICAgICAgICAgICBsb2cuaW5mbyhgQ2hlY2tpbmcgZm9yIHVwZGF0ZXMgdG8gdGhlIGJ1bmRsZSB3aXRoIGhtciBoYXNoICR7Y3VycmVudEhhc2h9LmApO1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrKG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2UgaWYgKFsnYWJvcnQnLCAnZmFpbCddLmluZGV4T2Yoc3RhdHVzKSA+PSAwKSB7XG4gICAgICAgICAgICBsb2cud2FybihcbiAgICAgICAgICAgICAgICBgQ2Fubm90IGFwcGx5IHVwZGF0ZS4gQSBwcmV2aW91cyB1cGRhdGUgJHtzdGF0dXN9ZWQuICR7cmVmcmVzaH1gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuZnVuY3Rpb24gZ2V0TmV4dEhhc2goaGFzaCwgZ2V0RmlsZUNvbnRlbnQpIHtcbiAgICBjb25zdCBmaWxlID0gZ2V0RmlsZUNvbnRlbnQoYCR7aGFzaH0uaG90LXVwZGF0ZS5qc29uYCk7XG4gICAgaWYgKCFmaWxlKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaGFzaCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbGUucmVhZFRleHQoKS50aGVuKGhvdFVwZGF0ZUNvbnRlbnQgPT4ge1xuICAgICAgICBpZiAoaG90VXBkYXRlQ29udGVudCkge1xuICAgICAgICAgICAgY29uc3QgbWFuaWZlc3QgPSBKU09OLnBhcnNlKGhvdFVwZGF0ZUNvbnRlbnQpO1xuICAgICAgICAgICAgY29uc3QgbmV3SGFzaCA9IG1hbmlmZXN0Lmg7XG4gICAgICAgICAgICByZXR1cm4gZ2V0TmV4dEhhc2gobmV3SGFzaCwgZ2V0RmlsZUNvbnRlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShoYXNoKTtcbiAgICAgICAgfVxuICAgIH0pLmNhdGNoKGVycm9yID0+IFByb21pc2UucmVqZWN0KGVycm9yKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2hlY2tTdGF0ZShpbml0aWFsSGFzaCwgZ2V0RmlsZUNvbnRlbnQpIHtcbiAgICBjdXJyZW50SGFzaCA9IGluaXRpYWxIYXNoO1xuICAgIHJldHVybiBnZXROZXh0SGFzaChpbml0aWFsSGFzaCwgZ2V0RmlsZUNvbnRlbnQpLnRoZW4obmV4dEhhc2ggPT4ge1xuICAgICAgICBpZiAobmV4dEhhc2ggIT0gaW5pdGlhbEhhc2gpIHtcbiAgICAgICAgICAgIHJldHVybiB1cGRhdGUobmV4dEhhc2gsIHt9KTtcbiAgICAgICAgfVxuICAgIH0pXG59XG4iLCJjb25zdCBsb2FkQ3NzID0gcmVxdWlyZShcIi4vbG9hZC1hcHBsaWNhdGlvbi1jc3NcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgbG9hZENzcyhmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgYXBwQ3NzQ29udGV4dCA9IHJlcXVpcmUuY29udGV4dChcIn4vXCIsIGZhbHNlLCAvXlxcLlxcL2FwcFxcLihjc3N8c2Nzc3xsZXNzfHNhc3MpJC8pO1xuICAgICAgICBnbG9iYWwucmVnaXN0ZXJXZWJwYWNrTW9kdWxlcyhhcHBDc3NDb250ZXh0KTtcbiAgICB9KTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxvYWRNb2R1bGVGbikge1xuICAgIGNvbnN0IGFwcGxpY2F0aW9uID0gcmVxdWlyZShcInRucy1jb3JlLW1vZHVsZXMvYXBwbGljYXRpb25cIik7XG4gICAgcmVxdWlyZShcInRucy1jb3JlLW1vZHVsZXMvdWkvc3R5bGluZy9zdHlsZS1zY29wZVwiKTtcblxuICAgIGxvYWRNb2R1bGVGbigpO1xuXG4gICAgYXBwbGljYXRpb24ubG9hZEFwcENzcygpO1xufVxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiXG4vKiFcbiAqIE5hdGl2ZVNjcmlwdC1WdWUgdjIuNC4wXG4gKiAoVXNpbmcgVnVlIHYyLjYuMTApXG4gKiAoYykgMjAxNy0yMDE5IHJpZ29yNzg5XG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbmdsb2JhbC5wcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3MgfHwge31cbmdsb2JhbC5wcm9jZXNzLmVudiA9IGdsb2JhbC5wcm9jZXNzLmVudiB8fCB7fVxuXG5cbnZhciBhcHBsaWNhdGlvbiA9IHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvYXBwbGljYXRpb24nKTtcbnJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvZnJhbWUnKTtcblxudmFyIGFycmF5TWFwID0gZnVuY3Rpb24gKHhzLCBmKSB7XG4gICAgaWYgKHhzLm1hcCkgeyByZXR1cm4geHMubWFwKGYpOyB9XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHggPSB4c1tpXTtcbiAgICAgICAgaWYgKGhhc093bi5jYWxsKHhzLCBpKSkgeyByZXMucHVzaChmKHgsIGksIHhzKSk7IH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn07XG5cbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgaW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbnZhciBpbmRleG9mID0gZnVuY3Rpb24oYXJyLCBvYmope1xuICBpZiAoaW5kZXhPZikgeyByZXR1cm4gYXJyLmluZGV4T2Yob2JqKTsgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7ICsraSkge1xuICAgIGlmIChhcnJbaV0gPT09IG9iaikgeyByZXR1cm4gaTsgfVxuICB9XG4gIHJldHVybiAtMTtcbn07XG5cbnZhciBpc2FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxudmFyIGhhc093biQxID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbnZhciBmb3JlYWNoID0gZnVuY3Rpb24gZm9yRWFjaCAob2JqLCBmbiwgY3R4KSB7XG4gICAgaWYgKHRvU3RyaW5nLmNhbGwoZm4pICE9PSAnW29iamVjdCBGdW5jdGlvbl0nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2l0ZXJhdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgIH1cbiAgICB2YXIgbCA9IG9iai5sZW5ndGg7XG4gICAgaWYgKGwgPT09ICtsKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBmbi5jYWxsKGN0eCwgb2JqW2ldLCBpLCBvYmopO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgayBpbiBvYmopIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24kMS5jYWxsKG9iaiwgaykpIHtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKGN0eCwgb2JqW2tdLCBrLCBvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIGhhc093biQyID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGFycmF5UmVkdWNlID0gZnVuY3Rpb24gKHhzLCBmLCBhY2MpIHtcbiAgICB2YXIgaGFzQWNjID0gYXJndW1lbnRzLmxlbmd0aCA+PSAzO1xuICAgIGlmIChoYXNBY2MgJiYgeHMucmVkdWNlKSB7IHJldHVybiB4cy5yZWR1Y2UoZiwgYWNjKTsgfVxuICAgIGlmICh4cy5yZWR1Y2UpIHsgcmV0dXJuIHhzLnJlZHVjZShmKTsgfVxuICAgIFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFoYXNPd24kMi5jYWxsKHhzLCBpKSkgeyBjb250aW51ZTsgfVxuICAgICAgICBpZiAoIWhhc0FjYykge1xuICAgICAgICAgICAgYWNjID0geHNbaV07XG4gICAgICAgICAgICBoYXNBY2MgPSB0cnVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgYWNjID0gZihhY2MsIHhzW2ldLCBpKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbn07XG5cbnZhciBoYXNPd24kMyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgdG9TdHJpbmckMSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKGZuKSB7XG5cdHJldHVybiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nICYmICEoZm4gaW5zdGFuY2VvZiBSZWdFeHApKSB8fCB0b1N0cmluZyQxLmNhbGwoZm4pID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufTtcblxudmFyIGZvcmVhY2gkMSA9IGZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuXHRpZiAoIWlzRnVuY3Rpb24oZm4pKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignaXRlcmF0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cdH1cblx0dmFyIGksIGssXG5cdFx0aXNTdHJpbmcgPSB0eXBlb2Ygb2JqID09PSAnc3RyaW5nJyxcblx0XHRsID0gb2JqLmxlbmd0aCxcblx0XHRjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiBudWxsO1xuXHRpZiAobCA9PT0gK2wpIHtcblx0XHRmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRpZiAoY29udGV4dCA9PT0gbnVsbCkge1xuXHRcdFx0XHRmbihpc1N0cmluZyA/IG9iai5jaGFyQXQoaSkgOiBvYmpbaV0sIGksIG9iaik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmbi5jYWxsKGNvbnRleHQsIGlzU3RyaW5nID8gb2JqLmNoYXJBdChpKSA6IG9ialtpXSwgaSwgb2JqKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Zm9yIChrIGluIG9iaikge1xuXHRcdFx0aWYgKGhhc093biQzLmNhbGwob2JqLCBrKSkge1xuXHRcdFx0XHRpZiAoY29udGV4dCA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdGZuKG9ialtrXSwgaywgb2JqKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRmbi5jYWxsKGNvbnRleHQsIG9ialtrXSwgaywgb2JqKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxudmFyIHRvU3RyaW5nJDIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG52YXIgaXNBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHR2YXIgc3RyID0gdG9TdHJpbmckMi5jYWxsKHZhbHVlKTtcblx0dmFyIGlzQXJndW1lbnRzID0gc3RyID09PSAnW29iamVjdCBBcmd1bWVudHNdJztcblx0aWYgKCFpc0FyZ3VtZW50cykge1xuXHRcdGlzQXJndW1lbnRzID0gc3RyICE9PSAnW29iamVjdCBBcnJheV0nXG5cdFx0XHQmJiB2YWx1ZSAhPT0gbnVsbFxuXHRcdFx0JiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0J1xuXHRcdFx0JiYgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcidcblx0XHRcdCYmIHZhbHVlLmxlbmd0aCA+PSAwXG5cdFx0XHQmJiB0b1N0cmluZyQyLmNhbGwodmFsdWUuY2FsbGVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0fVxuXHRyZXR1cm4gaXNBcmd1bWVudHM7XG59O1xuXG4vLyBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbVxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5cdHRvU3RyaW5nJDMgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLFxuXHRoYXNEb250RW51bUJ1ZyA9ICEoeyd0b1N0cmluZyc6IG51bGx9KS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgndG9TdHJpbmcnKSxcblx0aGFzUHJvdG9FbnVtQnVnID0gKGZ1bmN0aW9uICgpIHt9KS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgncHJvdG90eXBlJyksXG5cdGRvbnRFbnVtcyA9IFtcblx0XHRcInRvU3RyaW5nXCIsXG5cdFx0XCJ0b0xvY2FsZVN0cmluZ1wiLFxuXHRcdFwidmFsdWVPZlwiLFxuXHRcdFwiaGFzT3duUHJvcGVydHlcIixcblx0XHRcImlzUHJvdG90eXBlT2ZcIixcblx0XHRcInByb3BlcnR5SXNFbnVtZXJhYmxlXCIsXG5cdFx0XCJjb25zdHJ1Y3RvclwiXG5cdF07XG5cbnZhciBrZXlzU2hpbSA9IGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG5cdHZhciBpc09iamVjdCA9IG9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0Jyxcblx0XHRpc0Z1bmN0aW9uID0gdG9TdHJpbmckMy5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG5cdFx0aXNBcmd1bWVudHMkMSA9IGlzQXJndW1lbnRzKG9iamVjdCksXG5cdFx0dGhlS2V5cyA9IFtdO1xuXG5cdGlmICghaXNPYmplY3QgJiYgIWlzRnVuY3Rpb24gJiYgIWlzQXJndW1lbnRzJDEpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0LmtleXMgY2FsbGVkIG9uIGEgbm9uLW9iamVjdFwiKTtcblx0fVxuXG5cdGlmIChpc0FyZ3VtZW50cyQxKSB7XG5cdFx0Zm9yZWFjaCQxKG9iamVjdCwgZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuXHRcdFx0dGhlS2V5cy5wdXNoKGluZGV4KTtcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdHNraXBQcm90byA9IGhhc1Byb3RvRW51bUJ1ZyAmJiBpc0Z1bmN0aW9uO1xuXG5cdFx0Zm9yIChuYW1lIGluIG9iamVjdCkge1xuXHRcdFx0aWYgKCEoc2tpcFByb3RvICYmIG5hbWUgPT09ICdwcm90b3R5cGUnKSAmJiBoYXMuY2FsbChvYmplY3QsIG5hbWUpKSB7XG5cdFx0XHRcdHRoZUtleXMucHVzaChuYW1lKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoaGFzRG9udEVudW1CdWcpIHtcblx0XHR2YXIgY3RvciA9IG9iamVjdC5jb25zdHJ1Y3Rvcixcblx0XHRcdHNraXBDb25zdHJ1Y3RvciA9IGN0b3IgJiYgY3Rvci5wcm90b3R5cGUgPT09IG9iamVjdDtcblxuXHRcdGZvcmVhY2gkMShkb250RW51bXMsIGZ1bmN0aW9uIChkb250RW51bSkge1xuXHRcdFx0aWYgKCEoc2tpcENvbnN0cnVjdG9yICYmIGRvbnRFbnVtID09PSAnY29uc3RydWN0b3InKSAmJiBoYXMuY2FsbChvYmplY3QsIGRvbnRFbnVtKSkge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2goZG9udEVudW0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cdHJldHVybiB0aGVLZXlzO1xufTtcblxua2V5c1NoaW0uc2hpbSA9IGZ1bmN0aW9uIHNoaW1PYmplY3RLZXlzKCkge1xuXHRpZiAoIU9iamVjdC5rZXlzKSB7XG5cdFx0T2JqZWN0LmtleXMgPSBrZXlzU2hpbTtcblx0fVxuXHRyZXR1cm4gT2JqZWN0LmtleXMgfHwga2V5c1NoaW07XG59O1xuXG52YXIgb2JqZWN0S2V5cyA9IGtleXNTaGltO1xuXG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTtcblxuZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIG1vZHVsZSkge1xuXHRyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG59XG5cbnZhciBqc29uMyA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbihmdW5jdGlvbiAocm9vdCkge1xuICAvLyBEZXRlY3QgdGhlIGBkZWZpbmVgIGZ1bmN0aW9uIGV4cG9zZWQgYnkgYXN5bmNocm9ub3VzIG1vZHVsZSBsb2FkZXJzLiBUaGVcbiAgLy8gc3RyaWN0IGBkZWZpbmVgIGNoZWNrIGlzIG5lY2Vzc2FyeSBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIGByLmpzYC5cbiAgdmFyIGlzTG9hZGVyID0gdHlwZW9mIHVuZGVmaW5lZCA9PT0gXCJmdW5jdGlvblwiICYmIHVuZGVmaW5lZC5hbWQ7XG5cbiAgLy8gVXNlIHRoZSBgZ2xvYmFsYCBvYmplY3QgZXhwb3NlZCBieSBOb2RlIChpbmNsdWRpbmcgQnJvd3NlcmlmeSB2aWFcbiAgLy8gYGluc2VydC1tb2R1bGUtZ2xvYmFsc2ApLCBOYXJ3aGFsLCBhbmQgUmluZ28gYXMgdGhlIGRlZmF1bHQgY29udGV4dC5cbiAgLy8gUmhpbm8gZXhwb3J0cyBhIGBnbG9iYWxgIGZ1bmN0aW9uIGluc3RlYWQuXG4gIHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGNvbW1vbmpzR2xvYmFsID09IFwib2JqZWN0XCIgJiYgY29tbW9uanNHbG9iYWw7XG4gIGlmIChmcmVlR2xvYmFsICYmIChmcmVlR2xvYmFsW1wiZ2xvYmFsXCJdID09PSBmcmVlR2xvYmFsIHx8IGZyZWVHbG9iYWxbXCJ3aW5kb3dcIl0gPT09IGZyZWVHbG9iYWwpKSB7XG4gICAgcm9vdCA9IGZyZWVHbG9iYWw7XG4gIH1cblxuICAvLyBQdWJsaWM6IEluaXRpYWxpemVzIEpTT04gMyB1c2luZyB0aGUgZ2l2ZW4gYGNvbnRleHRgIG9iamVjdCwgYXR0YWNoaW5nIHRoZVxuICAvLyBgc3RyaW5naWZ5YCBhbmQgYHBhcnNlYCBmdW5jdGlvbnMgdG8gdGhlIHNwZWNpZmllZCBgZXhwb3J0c2Agb2JqZWN0LlxuICBmdW5jdGlvbiBydW5JbkNvbnRleHQoY29udGV4dCwgZXhwb3J0cykge1xuICAgIGNvbnRleHQgfHwgKGNvbnRleHQgPSByb290W1wiT2JqZWN0XCJdKCkpO1xuICAgIGV4cG9ydHMgfHwgKGV4cG9ydHMgPSByb290W1wiT2JqZWN0XCJdKCkpO1xuXG4gICAgLy8gTmF0aXZlIGNvbnN0cnVjdG9yIGFsaWFzZXMuXG4gICAgdmFyIE51bWJlciA9IGNvbnRleHRbXCJOdW1iZXJcIl0gfHwgcm9vdFtcIk51bWJlclwiXSxcbiAgICAgICAgU3RyaW5nID0gY29udGV4dFtcIlN0cmluZ1wiXSB8fCByb290W1wiU3RyaW5nXCJdLFxuICAgICAgICBPYmplY3QgPSBjb250ZXh0W1wiT2JqZWN0XCJdIHx8IHJvb3RbXCJPYmplY3RcIl0sXG4gICAgICAgIERhdGUgPSBjb250ZXh0W1wiRGF0ZVwiXSB8fCByb290W1wiRGF0ZVwiXSxcbiAgICAgICAgU3ludGF4RXJyb3IgPSBjb250ZXh0W1wiU3ludGF4RXJyb3JcIl0gfHwgcm9vdFtcIlN5bnRheEVycm9yXCJdLFxuICAgICAgICBUeXBlRXJyb3IgPSBjb250ZXh0W1wiVHlwZUVycm9yXCJdIHx8IHJvb3RbXCJUeXBlRXJyb3JcIl0sXG4gICAgICAgIE1hdGggPSBjb250ZXh0W1wiTWF0aFwiXSB8fCByb290W1wiTWF0aFwiXSxcbiAgICAgICAgbmF0aXZlSlNPTiA9IGNvbnRleHRbXCJKU09OXCJdIHx8IHJvb3RbXCJKU09OXCJdO1xuXG4gICAgLy8gRGVsZWdhdGUgdG8gdGhlIG5hdGl2ZSBgc3RyaW5naWZ5YCBhbmQgYHBhcnNlYCBpbXBsZW1lbnRhdGlvbnMuXG4gICAgaWYgKHR5cGVvZiBuYXRpdmVKU09OID09IFwib2JqZWN0XCIgJiYgbmF0aXZlSlNPTikge1xuICAgICAgZXhwb3J0cy5zdHJpbmdpZnkgPSBuYXRpdmVKU09OLnN0cmluZ2lmeTtcbiAgICAgIGV4cG9ydHMucGFyc2UgPSBuYXRpdmVKU09OLnBhcnNlO1xuICAgIH1cblxuICAgIC8vIENvbnZlbmllbmNlIGFsaWFzZXMuXG4gICAgdmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZSxcbiAgICAgICAgZ2V0Q2xhc3MgPSBvYmplY3RQcm90by50b1N0cmluZyxcbiAgICAgICAgaXNQcm9wZXJ0eSwgZm9yRWFjaCwgdW5kZWY7XG5cbiAgICAvLyBUZXN0IHRoZSBgRGF0ZSNnZXRVVEMqYCBtZXRob2RzLiBCYXNlZCBvbiB3b3JrIGJ5IEBZYWZmbGUuXG4gICAgdmFyIGlzRXh0ZW5kZWQgPSBuZXcgRGF0ZSgtMzUwOTgyNzMzNDU3MzI5Mik7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFRoZSBgZ2V0VVRDRnVsbFllYXJgLCBgTW9udGhgLCBhbmQgYERhdGVgIG1ldGhvZHMgcmV0dXJuIG5vbnNlbnNpY2FsXG4gICAgICAvLyByZXN1bHRzIGZvciBjZXJ0YWluIGRhdGVzIGluIE9wZXJhID49IDEwLjUzLlxuICAgICAgaXNFeHRlbmRlZCA9IGlzRXh0ZW5kZWQuZ2V0VVRDRnVsbFllYXIoKSA9PSAtMTA5MjUyICYmIGlzRXh0ZW5kZWQuZ2V0VVRDTW9udGgoKSA9PT0gMCAmJiBpc0V4dGVuZGVkLmdldFVUQ0RhdGUoKSA9PT0gMSAmJlxuICAgICAgICAvLyBTYWZhcmkgPCAyLjAuMiBzdG9yZXMgdGhlIGludGVybmFsIG1pbGxpc2Vjb25kIHRpbWUgdmFsdWUgY29ycmVjdGx5LFxuICAgICAgICAvLyBidXQgY2xpcHMgdGhlIHZhbHVlcyByZXR1cm5lZCBieSB0aGUgZGF0ZSBtZXRob2RzIHRvIHRoZSByYW5nZSBvZlxuICAgICAgICAvLyBzaWduZWQgMzItYml0IGludGVnZXJzIChbLTIgKiogMzEsIDIgKiogMzEgLSAxXSkuXG4gICAgICAgIGlzRXh0ZW5kZWQuZ2V0VVRDSG91cnMoKSA9PSAxMCAmJiBpc0V4dGVuZGVkLmdldFVUQ01pbnV0ZXMoKSA9PSAzNyAmJiBpc0V4dGVuZGVkLmdldFVUQ1NlY29uZHMoKSA9PSA2ICYmIGlzRXh0ZW5kZWQuZ2V0VVRDTWlsbGlzZWNvbmRzKCkgPT0gNzA4O1xuICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge31cblxuICAgIC8vIEludGVybmFsOiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIG5hdGl2ZSBgSlNPTi5zdHJpbmdpZnlgIGFuZCBgcGFyc2VgXG4gICAgLy8gaW1wbGVtZW50YXRpb25zIGFyZSBzcGVjLWNvbXBsaWFudC4gQmFzZWQgb24gd29yayBieSBLZW4gU255ZGVyLlxuICAgIGZ1bmN0aW9uIGhhcyhuYW1lKSB7XG4gICAgICBpZiAoaGFzW25hbWVdICE9PSB1bmRlZikge1xuICAgICAgICAvLyBSZXR1cm4gY2FjaGVkIGZlYXR1cmUgdGVzdCByZXN1bHQuXG4gICAgICAgIHJldHVybiBoYXNbbmFtZV07XG4gICAgICB9XG4gICAgICB2YXIgaXNTdXBwb3J0ZWQ7XG4gICAgICBpZiAobmFtZSA9PSBcImJ1Zy1zdHJpbmctY2hhci1pbmRleFwiKSB7XG4gICAgICAgIC8vIElFIDw9IDcgZG9lc24ndCBzdXBwb3J0IGFjY2Vzc2luZyBzdHJpbmcgY2hhcmFjdGVycyB1c2luZyBzcXVhcmVcbiAgICAgICAgLy8gYnJhY2tldCBub3RhdGlvbi4gSUUgOCBvbmx5IHN1cHBvcnRzIHRoaXMgZm9yIHByaW1pdGl2ZXMuXG4gICAgICAgIGlzU3VwcG9ydGVkID0gXCJhXCJbMF0gIT0gXCJhXCI7XG4gICAgICB9IGVsc2UgaWYgKG5hbWUgPT0gXCJqc29uXCIpIHtcbiAgICAgICAgLy8gSW5kaWNhdGVzIHdoZXRoZXIgYm90aCBgSlNPTi5zdHJpbmdpZnlgIGFuZCBgSlNPTi5wYXJzZWAgYXJlXG4gICAgICAgIC8vIHN1cHBvcnRlZC5cbiAgICAgICAgaXNTdXBwb3J0ZWQgPSBoYXMoXCJqc29uLXN0cmluZ2lmeVwiKSAmJiBoYXMoXCJqc29uLXBhcnNlXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHZhbHVlLCBzZXJpYWxpemVkID0gJ3tcImFcIjpbMSx0cnVlLGZhbHNlLG51bGwsXCJcXFxcdTAwMDBcXFxcYlxcXFxuXFxcXGZcXFxcclxcXFx0XCJdfSc7XG4gICAgICAgIC8vIFRlc3QgYEpTT04uc3RyaW5naWZ5YC5cbiAgICAgICAgaWYgKG5hbWUgPT0gXCJqc29uLXN0cmluZ2lmeVwiKSB7XG4gICAgICAgICAgdmFyIHN0cmluZ2lmeSA9IGV4cG9ydHMuc3RyaW5naWZ5LCBzdHJpbmdpZnlTdXBwb3J0ZWQgPSB0eXBlb2Ygc3RyaW5naWZ5ID09IFwiZnVuY3Rpb25cIiAmJiBpc0V4dGVuZGVkO1xuICAgICAgICAgIGlmIChzdHJpbmdpZnlTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgIC8vIEEgdGVzdCBmdW5jdGlvbiBvYmplY3Qgd2l0aCBhIGN1c3RvbSBgdG9KU09OYCBtZXRob2QuXG4gICAgICAgICAgICAodmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfSkudG9KU09OID0gdmFsdWU7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBzdHJpbmdpZnlTdXBwb3J0ZWQgPVxuICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggMy4xYjEgYW5kIGIyIHNlcmlhbGl6ZSBzdHJpbmcsIG51bWJlciwgYW5kIGJvb2xlYW5cbiAgICAgICAgICAgICAgICAvLyBwcmltaXRpdmVzIGFzIG9iamVjdCBsaXRlcmFscy5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoMCkgPT09IFwiMFwiICYmXG4gICAgICAgICAgICAgICAgLy8gRkYgMy4xYjEsIGIyLCBhbmQgSlNPTiAyIHNlcmlhbGl6ZSB3cmFwcGVkIHByaW1pdGl2ZXMgYXMgb2JqZWN0XG4gICAgICAgICAgICAgICAgLy8gbGl0ZXJhbHMuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KG5ldyBOdW1iZXIoKSkgPT09IFwiMFwiICYmXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KG5ldyBTdHJpbmcoKSkgPT0gJ1wiXCInICYmXG4gICAgICAgICAgICAgICAgLy8gRkYgMy4xYjEsIDIgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIHZhbHVlIGlzIGBudWxsYCwgYHVuZGVmaW5lZGAsIG9yXG4gICAgICAgICAgICAgICAgLy8gZG9lcyBub3QgZGVmaW5lIGEgY2Fub25pY2FsIEpTT04gcmVwcmVzZW50YXRpb24gKHRoaXMgYXBwbGllcyB0b1xuICAgICAgICAgICAgICAgIC8vIG9iamVjdHMgd2l0aCBgdG9KU09OYCBwcm9wZXJ0aWVzIGFzIHdlbGwsICp1bmxlc3MqIHRoZXkgYXJlIG5lc3RlZFxuICAgICAgICAgICAgICAgIC8vIHdpdGhpbiBhbiBvYmplY3Qgb3IgYXJyYXkpLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShnZXRDbGFzcykgPT09IHVuZGVmICYmXG4gICAgICAgICAgICAgICAgLy8gSUUgOCBzZXJpYWxpemVzIGB1bmRlZmluZWRgIGFzIGBcInVuZGVmaW5lZFwiYC4gU2FmYXJpIDw9IDUuMS43IGFuZFxuICAgICAgICAgICAgICAgIC8vIEZGIDMuMWIzIHBhc3MgdGhpcyB0ZXN0LlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeSh1bmRlZikgPT09IHVuZGVmICYmXG4gICAgICAgICAgICAgICAgLy8gU2FmYXJpIDw9IDUuMS43IGFuZCBGRiAzLjFiMyB0aHJvdyBgRXJyb3JgcyBhbmQgYFR5cGVFcnJvcmBzLFxuICAgICAgICAgICAgICAgIC8vIHJlc3BlY3RpdmVseSwgaWYgdGhlIHZhbHVlIGlzIG9taXR0ZWQgZW50aXJlbHkuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KCkgPT09IHVuZGVmICYmXG4gICAgICAgICAgICAgICAgLy8gRkYgMy4xYjEsIDIgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIG5vdCBhIG51bWJlcixcbiAgICAgICAgICAgICAgICAvLyBzdHJpbmcsIGFycmF5LCBvYmplY3QsIEJvb2xlYW4sIG9yIGBudWxsYCBsaXRlcmFsLiBUaGlzIGFwcGxpZXMgdG9cbiAgICAgICAgICAgICAgICAvLyBvYmplY3RzIHdpdGggY3VzdG9tIGB0b0pTT05gIG1ldGhvZHMgYXMgd2VsbCwgdW5sZXNzIHRoZXkgYXJlIG5lc3RlZFxuICAgICAgICAgICAgICAgIC8vIGluc2lkZSBvYmplY3Qgb3IgYXJyYXkgbGl0ZXJhbHMuIFlVSSAzLjAuMGIxIGlnbm9yZXMgY3VzdG9tIGB0b0pTT05gXG4gICAgICAgICAgICAgICAgLy8gbWV0aG9kcyBlbnRpcmVseS5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkodmFsdWUpID09PSBcIjFcIiAmJlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShbdmFsdWVdKSA9PSBcIlsxXVwiICYmXG4gICAgICAgICAgICAgICAgLy8gUHJvdG90eXBlIDw9IDEuNi4xIHNlcmlhbGl6ZXMgYFt1bmRlZmluZWRdYCBhcyBgXCJbXVwiYCBpbnN0ZWFkIG9mXG4gICAgICAgICAgICAgICAgLy8gYFwiW251bGxdXCJgLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShbdW5kZWZdKSA9PSBcIltudWxsXVwiICYmXG4gICAgICAgICAgICAgICAgLy8gWVVJIDMuMC4wYjEgZmFpbHMgdG8gc2VyaWFsaXplIGBudWxsYCBsaXRlcmFscy5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobnVsbCkgPT0gXCJudWxsXCIgJiZcbiAgICAgICAgICAgICAgICAvLyBGRiAzLjFiMSwgMiBoYWx0cyBzZXJpYWxpemF0aW9uIGlmIGFuIGFycmF5IGNvbnRhaW5zIGEgZnVuY3Rpb246XG4gICAgICAgICAgICAgICAgLy8gYFsxLCB0cnVlLCBnZXRDbGFzcywgMV1gIHNlcmlhbGl6ZXMgYXMgXCJbMSx0cnVlLF0sXCIuIEZGIDMuMWIzXG4gICAgICAgICAgICAgICAgLy8gZWxpZGVzIG5vbi1KU09OIHZhbHVlcyBmcm9tIG9iamVjdHMgYW5kIGFycmF5cywgdW5sZXNzIHRoZXlcbiAgICAgICAgICAgICAgICAvLyBkZWZpbmUgY3VzdG9tIGB0b0pTT05gIG1ldGhvZHMuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KFt1bmRlZiwgZ2V0Q2xhc3MsIG51bGxdKSA9PSBcIltudWxsLG51bGwsbnVsbF1cIiAmJlxuICAgICAgICAgICAgICAgIC8vIFNpbXBsZSBzZXJpYWxpemF0aW9uIHRlc3QuIEZGIDMuMWIxIHVzZXMgVW5pY29kZSBlc2NhcGUgc2VxdWVuY2VzXG4gICAgICAgICAgICAgICAgLy8gd2hlcmUgY2hhcmFjdGVyIGVzY2FwZSBjb2RlcyBhcmUgZXhwZWN0ZWQgKGUuZy4sIGBcXGJgID0+IGBcXHUwMDA4YCkuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KHsgXCJhXCI6IFt2YWx1ZSwgdHJ1ZSwgZmFsc2UsIG51bGwsIFwiXFx4MDBcXGJcXG5cXGZcXHJcXHRcIl0gfSkgPT0gc2VyaWFsaXplZCAmJlxuICAgICAgICAgICAgICAgIC8vIEZGIDMuMWIxIGFuZCBiMiBpZ25vcmUgdGhlIGBmaWx0ZXJgIGFuZCBgd2lkdGhgIGFyZ3VtZW50cy5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobnVsbCwgdmFsdWUpID09PSBcIjFcIiAmJlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShbMSwgMl0sIG51bGwsIDEpID09IFwiW1xcbiAxLFxcbiAyXFxuXVwiICYmXG4gICAgICAgICAgICAgICAgLy8gSlNPTiAyLCBQcm90b3R5cGUgPD0gMS43LCBhbmQgb2xkZXIgV2ViS2l0IGJ1aWxkcyBpbmNvcnJlY3RseVxuICAgICAgICAgICAgICAgIC8vIHNlcmlhbGl6ZSBleHRlbmRlZCB5ZWFycy5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobmV3IERhdGUoLTguNjRlMTUpKSA9PSAnXCItMjcxODIxLTA0LTIwVDAwOjAwOjAwLjAwMFpcIicgJiZcbiAgICAgICAgICAgICAgICAvLyBUaGUgbWlsbGlzZWNvbmRzIGFyZSBvcHRpb25hbCBpbiBFUyA1LCBidXQgcmVxdWlyZWQgaW4gNS4xLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShuZXcgRGF0ZSg4LjY0ZTE1KSkgPT0gJ1wiKzI3NTc2MC0wOS0xM1QwMDowMDowMC4wMDBaXCInICYmXG4gICAgICAgICAgICAgICAgLy8gRmlyZWZveCA8PSAxMS4wIGluY29ycmVjdGx5IHNlcmlhbGl6ZXMgeWVhcnMgcHJpb3IgdG8gMCBhcyBuZWdhdGl2ZVxuICAgICAgICAgICAgICAgIC8vIGZvdXItZGlnaXQgeWVhcnMgaW5zdGVhZCBvZiBzaXgtZGlnaXQgeWVhcnMuIENyZWRpdHM6IEBZYWZmbGUuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KG5ldyBEYXRlKC02MjE5ODc1NTJlNSkpID09ICdcIi0wMDAwMDEtMDEtMDFUMDA6MDA6MDAuMDAwWlwiJyAmJlxuICAgICAgICAgICAgICAgIC8vIFNhZmFyaSA8PSA1LjEuNSBhbmQgT3BlcmEgPj0gMTAuNTMgaW5jb3JyZWN0bHkgc2VyaWFsaXplIG1pbGxpc2Vjb25kXG4gICAgICAgICAgICAgICAgLy8gdmFsdWVzIGxlc3MgdGhhbiAxMDAwLiBDcmVkaXRzOiBAWWFmZmxlLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShuZXcgRGF0ZSgtMSkpID09ICdcIjE5NjktMTItMzFUMjM6NTk6NTkuOTk5WlwiJztcbiAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICBzdHJpbmdpZnlTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaXNTdXBwb3J0ZWQgPSBzdHJpbmdpZnlTdXBwb3J0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGVzdCBgSlNPTi5wYXJzZWAuXG4gICAgICAgIGlmIChuYW1lID09IFwianNvbi1wYXJzZVwiKSB7XG4gICAgICAgICAgdmFyIHBhcnNlID0gZXhwb3J0cy5wYXJzZTtcbiAgICAgICAgICBpZiAodHlwZW9mIHBhcnNlID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgLy8gRkYgMy4xYjEsIGIyIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGEgYmFyZSBsaXRlcmFsIGlzIHByb3ZpZGVkLlxuICAgICAgICAgICAgICAvLyBDb25mb3JtaW5nIGltcGxlbWVudGF0aW9ucyBzaG91bGQgYWxzbyBjb2VyY2UgdGhlIGluaXRpYWwgYXJndW1lbnQgdG9cbiAgICAgICAgICAgICAgLy8gYSBzdHJpbmcgcHJpb3IgdG8gcGFyc2luZy5cbiAgICAgICAgICAgICAgaWYgKHBhcnNlKFwiMFwiKSA9PT0gMCAmJiAhcGFyc2UoZmFsc2UpKSB7XG4gICAgICAgICAgICAgICAgLy8gU2ltcGxlIHBhcnNpbmcgdGVzdC5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlKHNlcmlhbGl6ZWQpO1xuICAgICAgICAgICAgICAgIHZhciBwYXJzZVN1cHBvcnRlZCA9IHZhbHVlW1wiYVwiXS5sZW5ndGggPT0gNSAmJiB2YWx1ZVtcImFcIl1bMF0gPT09IDE7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlU3VwcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTYWZhcmkgPD0gNS4xLjIgYW5kIEZGIDMuMWIxIGFsbG93IHVuZXNjYXBlZCB0YWJzIGluIHN0cmluZ3MuXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlU3VwcG9ydGVkID0gIXBhcnNlKCdcIlxcdFwiJyk7XG4gICAgICAgICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHt9XG4gICAgICAgICAgICAgICAgICBpZiAocGFyc2VTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBGRiA0LjAgYW5kIDQuMC4xIGFsbG93IGxlYWRpbmcgYCtgIHNpZ25zIGFuZCBsZWFkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgLy8gZGVjaW1hbCBwb2ludHMuIEZGIDQuMCwgNC4wLjEsIGFuZCBJRSA5LTEwIGFsc28gYWxsb3dcbiAgICAgICAgICAgICAgICAgICAgICAvLyBjZXJ0YWluIG9jdGFsIGxpdGVyYWxzLlxuICAgICAgICAgICAgICAgICAgICAgIHBhcnNlU3VwcG9ydGVkID0gcGFyc2UoXCIwMVwiKSAhPT0gMTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7fVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlU3VwcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gRkYgNC4wLCA0LjAuMSwgYW5kIFJoaW5vIDEuN1IzLVI0IGFsbG93IHRyYWlsaW5nIGRlY2ltYWxcbiAgICAgICAgICAgICAgICAgICAgICAvLyBwb2ludHMuIFRoZXNlIGVudmlyb25tZW50cywgYWxvbmcgd2l0aCBGRiAzLjFiMSBhbmQgMixcbiAgICAgICAgICAgICAgICAgICAgICAvLyBhbHNvIGFsbG93IHRyYWlsaW5nIGNvbW1hcyBpbiBKU09OIG9iamVjdHMgYW5kIGFycmF5cy5cbiAgICAgICAgICAgICAgICAgICAgICBwYXJzZVN1cHBvcnRlZCA9IHBhcnNlKFwiMS5cIikgIT09IDE7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge31cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICBwYXJzZVN1cHBvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpc1N1cHBvcnRlZCA9IHBhcnNlU3VwcG9ydGVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzW25hbWVdID0gISFpc1N1cHBvcnRlZDtcbiAgICB9XG5cbiAgICBpZiAoIWhhcyhcImpzb25cIikpIHtcbiAgICAgIC8vIENvbW1vbiBgW1tDbGFzc11dYCBuYW1lIGFsaWFzZXMuXG4gICAgICB2YXIgZnVuY3Rpb25DbGFzcyA9IFwiW29iamVjdCBGdW5jdGlvbl1cIixcbiAgICAgICAgICBkYXRlQ2xhc3MgPSBcIltvYmplY3QgRGF0ZV1cIixcbiAgICAgICAgICBudW1iZXJDbGFzcyA9IFwiW29iamVjdCBOdW1iZXJdXCIsXG4gICAgICAgICAgc3RyaW5nQ2xhc3MgPSBcIltvYmplY3QgU3RyaW5nXVwiLFxuICAgICAgICAgIGFycmF5Q2xhc3MgPSBcIltvYmplY3QgQXJyYXldXCIsXG4gICAgICAgICAgYm9vbGVhbkNsYXNzID0gXCJbb2JqZWN0IEJvb2xlYW5dXCI7XG5cbiAgICAgIC8vIERldGVjdCBpbmNvbXBsZXRlIHN1cHBvcnQgZm9yIGFjY2Vzc2luZyBzdHJpbmcgY2hhcmFjdGVycyBieSBpbmRleC5cbiAgICAgIHZhciBjaGFySW5kZXhCdWdneSA9IGhhcyhcImJ1Zy1zdHJpbmctY2hhci1pbmRleFwiKTtcblxuICAgICAgLy8gRGVmaW5lIGFkZGl0aW9uYWwgdXRpbGl0eSBtZXRob2RzIGlmIHRoZSBgRGF0ZWAgbWV0aG9kcyBhcmUgYnVnZ3kuXG4gICAgICBpZiAoIWlzRXh0ZW5kZWQpIHtcbiAgICAgICAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgICAgICAgLy8gQSBtYXBwaW5nIGJldHdlZW4gdGhlIG1vbnRocyBvZiB0aGUgeWVhciBhbmQgdGhlIG51bWJlciBvZiBkYXlzIGJldHdlZW5cbiAgICAgICAgLy8gSmFudWFyeSAxc3QgYW5kIHRoZSBmaXJzdCBvZiB0aGUgcmVzcGVjdGl2ZSBtb250aC5cbiAgICAgICAgdmFyIE1vbnRocyA9IFswLCAzMSwgNTksIDkwLCAxMjAsIDE1MSwgMTgxLCAyMTIsIDI0MywgMjczLCAzMDQsIDMzNF07XG4gICAgICAgIC8vIEludGVybmFsOiBDYWxjdWxhdGVzIHRoZSBudW1iZXIgb2YgZGF5cyBiZXR3ZWVuIHRoZSBVbml4IGVwb2NoIGFuZCB0aGVcbiAgICAgICAgLy8gZmlyc3QgZGF5IG9mIHRoZSBnaXZlbiBtb250aC5cbiAgICAgICAgdmFyIGdldERheSA9IGZ1bmN0aW9uICh5ZWFyLCBtb250aCkge1xuICAgICAgICAgIHJldHVybiBNb250aHNbbW9udGhdICsgMzY1ICogKHllYXIgLSAxOTcwKSArIGZsb29yKCh5ZWFyIC0gMTk2OSArIChtb250aCA9ICsobW9udGggPiAxKSkpIC8gNCkgLSBmbG9vcigoeWVhciAtIDE5MDEgKyBtb250aCkgLyAxMDApICsgZmxvb3IoKHllYXIgLSAxNjAxICsgbW9udGgpIC8gNDAwKTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gSW50ZXJuYWw6IERldGVybWluZXMgaWYgYSBwcm9wZXJ0eSBpcyBhIGRpcmVjdCBwcm9wZXJ0eSBvZiB0aGUgZ2l2ZW5cbiAgICAgIC8vIG9iamVjdC4gRGVsZWdhdGVzIHRvIHRoZSBuYXRpdmUgYE9iamVjdCNoYXNPd25Qcm9wZXJ0eWAgbWV0aG9kLlxuICAgICAgaWYgKCEoaXNQcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5KSkge1xuICAgICAgICBpc1Byb3BlcnR5ID0gZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgdmFyIG1lbWJlcnMgPSB7fSwgY29uc3RydWN0b3I7XG4gICAgICAgICAgaWYgKChtZW1iZXJzLl9fcHJvdG9fXyA9IG51bGwsIG1lbWJlcnMuX19wcm90b19fID0ge1xuICAgICAgICAgICAgLy8gVGhlICpwcm90byogcHJvcGVydHkgY2Fubm90IGJlIHNldCBtdWx0aXBsZSB0aW1lcyBpbiByZWNlbnRcbiAgICAgICAgICAgIC8vIHZlcnNpb25zIG9mIEZpcmVmb3ggYW5kIFNlYU1vbmtleS5cbiAgICAgICAgICAgIFwidG9TdHJpbmdcIjogMVxuICAgICAgICAgIH0sIG1lbWJlcnMpLnRvU3RyaW5nICE9IGdldENsYXNzKSB7XG4gICAgICAgICAgICAvLyBTYWZhcmkgPD0gMi4wLjMgZG9lc24ndCBpbXBsZW1lbnQgYE9iamVjdCNoYXNPd25Qcm9wZXJ0eWAsIGJ1dFxuICAgICAgICAgICAgLy8gc3VwcG9ydHMgdGhlIG11dGFibGUgKnByb3RvKiBwcm9wZXJ0eS5cbiAgICAgICAgICAgIGlzUHJvcGVydHkgPSBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgLy8gQ2FwdHVyZSBhbmQgYnJlYWsgdGhlIG9iamVjdGdzIHByb3RvdHlwZSBjaGFpbiAoc2VlIHNlY3Rpb24gOC42LjJcbiAgICAgICAgICAgICAgLy8gb2YgdGhlIEVTIDUuMSBzcGVjKS4gVGhlIHBhcmVudGhlc2l6ZWQgZXhwcmVzc2lvbiBwcmV2ZW50cyBhblxuICAgICAgICAgICAgICAvLyB1bnNhZmUgdHJhbnNmb3JtYXRpb24gYnkgdGhlIENsb3N1cmUgQ29tcGlsZXIuXG4gICAgICAgICAgICAgIHZhciBvcmlnaW5hbCA9IHRoaXMuX19wcm90b19fLCByZXN1bHQgPSBwcm9wZXJ0eSBpbiAodGhpcy5fX3Byb3RvX18gPSBudWxsLCB0aGlzKTtcbiAgICAgICAgICAgICAgLy8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgcHJvdG90eXBlIGNoYWluLlxuICAgICAgICAgICAgICB0aGlzLl9fcHJvdG9fXyA9IG9yaWdpbmFsO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQ2FwdHVyZSBhIHJlZmVyZW5jZSB0byB0aGUgdG9wLWxldmVsIGBPYmplY3RgIGNvbnN0cnVjdG9yLlxuICAgICAgICAgICAgY29uc3RydWN0b3IgPSBtZW1iZXJzLmNvbnN0cnVjdG9yO1xuICAgICAgICAgICAgLy8gVXNlIHRoZSBgY29uc3RydWN0b3JgIHByb3BlcnR5IHRvIHNpbXVsYXRlIGBPYmplY3QjaGFzT3duUHJvcGVydHlgIGluXG4gICAgICAgICAgICAvLyBvdGhlciBlbnZpcm9ubWVudHMuXG4gICAgICAgICAgICBpc1Byb3BlcnR5ID0gZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgIHZhciBwYXJlbnQgPSAodGhpcy5jb25zdHJ1Y3RvciB8fCBjb25zdHJ1Y3RvcikucHJvdG90eXBlO1xuICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydHkgaW4gdGhpcyAmJiAhKHByb3BlcnR5IGluIHBhcmVudCAmJiB0aGlzW3Byb3BlcnR5XSA9PT0gcGFyZW50W3Byb3BlcnR5XSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBtZW1iZXJzID0gbnVsbDtcbiAgICAgICAgICByZXR1cm4gaXNQcm9wZXJ0eS5jYWxsKHRoaXMsIHByb3BlcnR5KTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gSW50ZXJuYWw6IEEgc2V0IG9mIHByaW1pdGl2ZSB0eXBlcyB1c2VkIGJ5IGBpc0hvc3RUeXBlYC5cbiAgICAgIHZhciBQcmltaXRpdmVUeXBlcyA9IHtcbiAgICAgICAgXCJib29sZWFuXCI6IDEsXG4gICAgICAgIFwibnVtYmVyXCI6IDEsXG4gICAgICAgIFwic3RyaW5nXCI6IDEsXG4gICAgICAgIFwidW5kZWZpbmVkXCI6IDFcbiAgICAgIH07XG5cbiAgICAgIC8vIEludGVybmFsOiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiBvYmplY3QgYHByb3BlcnR5YCB2YWx1ZSBpcyBhXG4gICAgICAvLyBub24tcHJpbWl0aXZlLlxuICAgICAgdmFyIGlzSG9zdFR5cGUgPSBmdW5jdGlvbiAob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiBvYmplY3RbcHJvcGVydHldO1xuICAgICAgICByZXR1cm4gdHlwZSA9PSBcIm9iamVjdFwiID8gISFvYmplY3RbcHJvcGVydHldIDogIVByaW1pdGl2ZVR5cGVzW3R5cGVdO1xuICAgICAgfTtcblxuICAgICAgLy8gSW50ZXJuYWw6IE5vcm1hbGl6ZXMgdGhlIGBmb3IuLi5pbmAgaXRlcmF0aW9uIGFsZ29yaXRobSBhY3Jvc3NcbiAgICAgIC8vIGVudmlyb25tZW50cy4gRWFjaCBlbnVtZXJhdGVkIGtleSBpcyB5aWVsZGVkIHRvIGEgYGNhbGxiYWNrYCBmdW5jdGlvbi5cbiAgICAgIGZvckVhY2ggPSBmdW5jdGlvbiAob2JqZWN0LCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgc2l6ZSA9IDAsIFByb3BlcnRpZXMsIG1lbWJlcnMsIHByb3BlcnR5O1xuXG4gICAgICAgIC8vIFRlc3RzIGZvciBidWdzIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50J3MgYGZvci4uLmluYCBhbGdvcml0aG0uIFRoZVxuICAgICAgICAvLyBgdmFsdWVPZmAgcHJvcGVydHkgaW5oZXJpdHMgdGhlIG5vbi1lbnVtZXJhYmxlIGZsYWcgZnJvbVxuICAgICAgICAvLyBgT2JqZWN0LnByb3RvdHlwZWAgaW4gb2xkZXIgdmVyc2lvbnMgb2YgSUUsIE5ldHNjYXBlLCBhbmQgTW96aWxsYS5cbiAgICAgICAgKFByb3BlcnRpZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy52YWx1ZU9mID0gMDtcbiAgICAgICAgfSkucHJvdG90eXBlLnZhbHVlT2YgPSAwO1xuXG4gICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgYFByb3BlcnRpZXNgIGNsYXNzLlxuICAgICAgICBtZW1iZXJzID0gbmV3IFByb3BlcnRpZXMoKTtcbiAgICAgICAgZm9yIChwcm9wZXJ0eSBpbiBtZW1iZXJzKSB7XG4gICAgICAgICAgLy8gSWdub3JlIGFsbCBwcm9wZXJ0aWVzIGluaGVyaXRlZCBmcm9tIGBPYmplY3QucHJvdG90eXBlYC5cbiAgICAgICAgICBpZiAoaXNQcm9wZXJ0eS5jYWxsKG1lbWJlcnMsIHByb3BlcnR5KSkge1xuICAgICAgICAgICAgc2l6ZSsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBQcm9wZXJ0aWVzID0gbWVtYmVycyA9IG51bGw7XG5cbiAgICAgICAgLy8gTm9ybWFsaXplIHRoZSBpdGVyYXRpb24gYWxnb3JpdGhtLlxuICAgICAgICBpZiAoIXNpemUpIHtcbiAgICAgICAgICAvLyBBIGxpc3Qgb2Ygbm9uLWVudW1lcmFibGUgcHJvcGVydGllcyBpbmhlcml0ZWQgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAuXG4gICAgICAgICAgbWVtYmVycyA9IFtcInZhbHVlT2ZcIiwgXCJ0b1N0cmluZ1wiLCBcInRvTG9jYWxlU3RyaW5nXCIsIFwicHJvcGVydHlJc0VudW1lcmFibGVcIiwgXCJpc1Byb3RvdHlwZU9mXCIsIFwiaGFzT3duUHJvcGVydHlcIiwgXCJjb25zdHJ1Y3RvclwiXTtcbiAgICAgICAgICAvLyBJRSA8PSA4LCBNb3ppbGxhIDEuMCwgYW5kIE5ldHNjYXBlIDYuMiBpZ25vcmUgc2hhZG93ZWQgbm9uLWVudW1lcmFibGVcbiAgICAgICAgICAvLyBwcm9wZXJ0aWVzLlxuICAgICAgICAgIGZvckVhY2ggPSBmdW5jdGlvbiAob2JqZWN0LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIGlzRnVuY3Rpb24gPSBnZXRDbGFzcy5jYWxsKG9iamVjdCkgPT0gZnVuY3Rpb25DbGFzcywgcHJvcGVydHksIGxlbmd0aDtcbiAgICAgICAgICAgIHZhciBoYXNQcm9wZXJ0eSA9ICFpc0Z1bmN0aW9uICYmIHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgIT0gXCJmdW5jdGlvblwiICYmIGlzSG9zdFR5cGUob2JqZWN0LCBcImhhc093blByb3BlcnR5XCIpID8gb2JqZWN0Lmhhc093blByb3BlcnR5IDogaXNQcm9wZXJ0eTtcbiAgICAgICAgICAgIGZvciAocHJvcGVydHkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICAgIC8vIEdlY2tvIDw9IDEuMCBlbnVtZXJhdGVzIHRoZSBgcHJvdG90eXBlYCBwcm9wZXJ0eSBvZiBmdW5jdGlvbnMgdW5kZXJcbiAgICAgICAgICAgICAgLy8gY2VydGFpbiBjb25kaXRpb25zOyBJRSBkb2VzIG5vdC5cbiAgICAgICAgICAgICAgaWYgKCEoaXNGdW5jdGlvbiAmJiBwcm9wZXJ0eSA9PSBcInByb3RvdHlwZVwiKSAmJiBoYXNQcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socHJvcGVydHkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNYW51YWxseSBpbnZva2UgdGhlIGNhbGxiYWNrIGZvciBlYWNoIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5LlxuICAgICAgICAgICAgZm9yIChsZW5ndGggPSBtZW1iZXJzLmxlbmd0aDsgcHJvcGVydHkgPSBtZW1iZXJzWy0tbGVuZ3RoXTsgaGFzUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSAmJiBjYWxsYmFjayhwcm9wZXJ0eSkpeyB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChzaXplID09IDIpIHtcbiAgICAgICAgICAvLyBTYWZhcmkgPD0gMi4wLjQgZW51bWVyYXRlcyBzaGFkb3dlZCBwcm9wZXJ0aWVzIHR3aWNlLlxuICAgICAgICAgIGZvckVhY2ggPSBmdW5jdGlvbiAob2JqZWN0LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgc2V0IG9mIGl0ZXJhdGVkIHByb3BlcnRpZXMuXG4gICAgICAgICAgICB2YXIgbWVtYmVycyA9IHt9LCBpc0Z1bmN0aW9uID0gZ2V0Q2xhc3MuY2FsbChvYmplY3QpID09IGZ1bmN0aW9uQ2xhc3MsIHByb3BlcnR5O1xuICAgICAgICAgICAgZm9yIChwcm9wZXJ0eSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgICAgLy8gU3RvcmUgZWFjaCBwcm9wZXJ0eSBuYW1lIHRvIHByZXZlbnQgZG91YmxlIGVudW1lcmF0aW9uLiBUaGVcbiAgICAgICAgICAgICAgLy8gYHByb3RvdHlwZWAgcHJvcGVydHkgb2YgZnVuY3Rpb25zIGlzIG5vdCBlbnVtZXJhdGVkIGR1ZSB0byBjcm9zcy1cbiAgICAgICAgICAgICAgLy8gZW52aXJvbm1lbnQgaW5jb25zaXN0ZW5jaWVzLlxuICAgICAgICAgICAgICBpZiAoIShpc0Z1bmN0aW9uICYmIHByb3BlcnR5ID09IFwicHJvdG90eXBlXCIpICYmICFpc1Byb3BlcnR5LmNhbGwobWVtYmVycywgcHJvcGVydHkpICYmIChtZW1iZXJzW3Byb3BlcnR5XSA9IDEpICYmIGlzUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTm8gYnVncyBkZXRlY3RlZDsgdXNlIHRoZSBzdGFuZGFyZCBgZm9yLi4uaW5gIGFsZ29yaXRobS5cbiAgICAgICAgICBmb3JFYWNoID0gZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBpc0Z1bmN0aW9uID0gZ2V0Q2xhc3MuY2FsbChvYmplY3QpID09IGZ1bmN0aW9uQ2xhc3MsIHByb3BlcnR5LCBpc0NvbnN0cnVjdG9yO1xuICAgICAgICAgICAgZm9yIChwcm9wZXJ0eSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgICAgaWYgKCEoaXNGdW5jdGlvbiAmJiBwcm9wZXJ0eSA9PSBcInByb3RvdHlwZVwiKSAmJiBpc1Byb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkgJiYgIShpc0NvbnN0cnVjdG9yID0gcHJvcGVydHkgPT09IFwiY29uc3RydWN0b3JcIikpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhwcm9wZXJ0eSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE1hbnVhbGx5IGludm9rZSB0aGUgY2FsbGJhY2sgZm9yIHRoZSBgY29uc3RydWN0b3JgIHByb3BlcnR5IGR1ZSB0b1xuICAgICAgICAgICAgLy8gY3Jvc3MtZW52aXJvbm1lbnQgaW5jb25zaXN0ZW5jaWVzLlxuICAgICAgICAgICAgaWYgKGlzQ29uc3RydWN0b3IgfHwgaXNQcm9wZXJ0eS5jYWxsKG9iamVjdCwgKHByb3BlcnR5ID0gXCJjb25zdHJ1Y3RvclwiKSkpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2socHJvcGVydHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvckVhY2gob2JqZWN0LCBjYWxsYmFjayk7XG4gICAgICB9O1xuXG4gICAgICAvLyBQdWJsaWM6IFNlcmlhbGl6ZXMgYSBKYXZhU2NyaXB0IGB2YWx1ZWAgYXMgYSBKU09OIHN0cmluZy4gVGhlIG9wdGlvbmFsXG4gICAgICAvLyBgZmlsdGVyYCBhcmd1bWVudCBtYXkgc3BlY2lmeSBlaXRoZXIgYSBmdW5jdGlvbiB0aGF0IGFsdGVycyBob3cgb2JqZWN0IGFuZFxuICAgICAgLy8gYXJyYXkgbWVtYmVycyBhcmUgc2VyaWFsaXplZCwgb3IgYW4gYXJyYXkgb2Ygc3RyaW5ncyBhbmQgbnVtYmVycyB0aGF0XG4gICAgICAvLyBpbmRpY2F0ZXMgd2hpY2ggcHJvcGVydGllcyBzaG91bGQgYmUgc2VyaWFsaXplZC4gVGhlIG9wdGlvbmFsIGB3aWR0aGBcbiAgICAgIC8vIGFyZ3VtZW50IG1heSBiZSBlaXRoZXIgYSBzdHJpbmcgb3IgbnVtYmVyIHRoYXQgc3BlY2lmaWVzIHRoZSBpbmRlbnRhdGlvblxuICAgICAgLy8gbGV2ZWwgb2YgdGhlIG91dHB1dC5cbiAgICAgIGlmICghaGFzKFwianNvbi1zdHJpbmdpZnlcIikpIHtcbiAgICAgICAgLy8gSW50ZXJuYWw6IEEgbWFwIG9mIGNvbnRyb2wgY2hhcmFjdGVycyBhbmQgdGhlaXIgZXNjYXBlZCBlcXVpdmFsZW50cy5cbiAgICAgICAgdmFyIEVzY2FwZXMgPSB7XG4gICAgICAgICAgOTI6IFwiXFxcXFxcXFxcIixcbiAgICAgICAgICAzNDogJ1xcXFxcIicsXG4gICAgICAgICAgODogXCJcXFxcYlwiLFxuICAgICAgICAgIDEyOiBcIlxcXFxmXCIsXG4gICAgICAgICAgMTA6IFwiXFxcXG5cIixcbiAgICAgICAgICAxMzogXCJcXFxcclwiLFxuICAgICAgICAgIDk6IFwiXFxcXHRcIlxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEludGVybmFsOiBDb252ZXJ0cyBgdmFsdWVgIGludG8gYSB6ZXJvLXBhZGRlZCBzdHJpbmcgc3VjaCB0aGF0IGl0c1xuICAgICAgICAvLyBsZW5ndGggaXMgYXQgbGVhc3QgZXF1YWwgdG8gYHdpZHRoYC4gVGhlIGB3aWR0aGAgbXVzdCBiZSA8PSA2LlxuICAgICAgICB2YXIgbGVhZGluZ1plcm9lcyA9IFwiMDAwMDAwXCI7XG4gICAgICAgIHZhciB0b1BhZGRlZFN0cmluZyA9IGZ1bmN0aW9uICh3aWR0aCwgdmFsdWUpIHtcbiAgICAgICAgICAvLyBUaGUgYHx8IDBgIGV4cHJlc3Npb24gaXMgbmVjZXNzYXJ5IHRvIHdvcmsgYXJvdW5kIGEgYnVnIGluXG4gICAgICAgICAgLy8gT3BlcmEgPD0gNy41NHUyIHdoZXJlIGAwID09IC0wYCwgYnV0IGBTdHJpbmcoLTApICE9PSBcIjBcImAuXG4gICAgICAgICAgcmV0dXJuIChsZWFkaW5nWmVyb2VzICsgKHZhbHVlIHx8IDApKS5zbGljZSgtd2lkdGgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEludGVybmFsOiBEb3VibGUtcXVvdGVzIGEgc3RyaW5nIGB2YWx1ZWAsIHJlcGxhY2luZyBhbGwgQVNDSUkgY29udHJvbFxuICAgICAgICAvLyBjaGFyYWN0ZXJzIChjaGFyYWN0ZXJzIHdpdGggY29kZSB1bml0IHZhbHVlcyBiZXR3ZWVuIDAgYW5kIDMxKSB3aXRoXG4gICAgICAgIC8vIHRoZWlyIGVzY2FwZWQgZXF1aXZhbGVudHMuIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhlXG4gICAgICAgIC8vIGBRdW90ZSh2YWx1ZSlgIG9wZXJhdGlvbiBkZWZpbmVkIGluIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMuXG4gICAgICAgIHZhciB1bmljb2RlUHJlZml4ID0gXCJcXFxcdTAwXCI7XG4gICAgICAgIHZhciBxdW90ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSAnXCInLCBpbmRleCA9IDAsIGxlbmd0aCA9IHZhbHVlLmxlbmd0aCwgdXNlQ2hhckluZGV4ID0gIWNoYXJJbmRleEJ1Z2d5IHx8IGxlbmd0aCA+IDEwO1xuICAgICAgICAgIHZhciBzeW1ib2xzID0gdXNlQ2hhckluZGV4ICYmIChjaGFySW5kZXhCdWdneSA/IHZhbHVlLnNwbGl0KFwiXCIpIDogdmFsdWUpO1xuICAgICAgICAgIGZvciAoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgdmFyIGNoYXJDb2RlID0gdmFsdWUuY2hhckNvZGVBdChpbmRleCk7XG4gICAgICAgICAgICAvLyBJZiB0aGUgY2hhcmFjdGVyIGlzIGEgY29udHJvbCBjaGFyYWN0ZXIsIGFwcGVuZCBpdHMgVW5pY29kZSBvclxuICAgICAgICAgICAgLy8gc2hvcnRoYW5kIGVzY2FwZSBzZXF1ZW5jZTsgb3RoZXJ3aXNlLCBhcHBlbmQgdGhlIGNoYXJhY3RlciBhcy1pcy5cbiAgICAgICAgICAgIHN3aXRjaCAoY2hhckNvZGUpIHtcbiAgICAgICAgICAgICAgY2FzZSA4OiBjYXNlIDk6IGNhc2UgMTA6IGNhc2UgMTI6IGNhc2UgMTM6IGNhc2UgMzQ6IGNhc2UgOTI6XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IEVzY2FwZXNbY2hhckNvZGVdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA8IDMyKSB7XG4gICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdW5pY29kZVByZWZpeCArIHRvUGFkZGVkU3RyaW5nKDIsIGNoYXJDb2RlLnRvU3RyaW5nKDE2KSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHVzZUNoYXJJbmRleCA/IHN5bWJvbHNbaW5kZXhdIDogdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdcIic7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IFJlY3Vyc2l2ZWx5IHNlcmlhbGl6ZXMgYW4gb2JqZWN0LiBJbXBsZW1lbnRzIHRoZVxuICAgICAgICAvLyBgU3RyKGtleSwgaG9sZGVyKWAsIGBKTyh2YWx1ZSlgLCBhbmQgYEpBKHZhbHVlKWAgb3BlcmF0aW9ucy5cbiAgICAgICAgdmFyIHNlcmlhbGl6ZSA9IGZ1bmN0aW9uIChwcm9wZXJ0eSwgb2JqZWN0LCBjYWxsYmFjaywgcHJvcGVydGllcywgd2hpdGVzcGFjZSwgaW5kZW50YXRpb24sIHN0YWNrKSB7XG4gICAgICAgICAgdmFyIHZhbHVlLCBjbGFzc05hbWUsIHllYXIsIG1vbnRoLCBkYXRlLCB0aW1lLCBob3VycywgbWludXRlcywgc2Vjb25kcywgbWlsbGlzZWNvbmRzLCByZXN1bHRzLCBlbGVtZW50LCBpbmRleCwgbGVuZ3RoLCBwcmVmaXgsIHJlc3VsdDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gTmVjZXNzYXJ5IGZvciBob3N0IG9iamVjdCBzdXBwb3J0LlxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3RbcHJvcGVydHldO1xuICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge31cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9IGdldENsYXNzLmNhbGwodmFsdWUpO1xuICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSA9PSBkYXRlQ2xhc3MgJiYgIWlzUHJvcGVydHkuY2FsbCh2YWx1ZSwgXCJ0b0pTT05cIikpIHtcbiAgICAgICAgICAgICAgaWYgKHZhbHVlID4gLTEgLyAwICYmIHZhbHVlIDwgMSAvIDApIHtcbiAgICAgICAgICAgICAgICAvLyBEYXRlcyBhcmUgc2VyaWFsaXplZCBhY2NvcmRpbmcgdG8gdGhlIGBEYXRlI3RvSlNPTmAgbWV0aG9kXG4gICAgICAgICAgICAgICAgLy8gc3BlY2lmaWVkIGluIEVTIDUuMSBzZWN0aW9uIDE1LjkuNS40NC4gU2VlIHNlY3Rpb24gMTUuOS4xLjE1XG4gICAgICAgICAgICAgICAgLy8gZm9yIHRoZSBJU08gODYwMSBkYXRlIHRpbWUgc3RyaW5nIGZvcm1hdC5cbiAgICAgICAgICAgICAgICBpZiAoZ2V0RGF5KSB7XG4gICAgICAgICAgICAgICAgICAvLyBNYW51YWxseSBjb21wdXRlIHRoZSB5ZWFyLCBtb250aCwgZGF0ZSwgaG91cnMsIG1pbnV0ZXMsXG4gICAgICAgICAgICAgICAgICAvLyBzZWNvbmRzLCBhbmQgbWlsbGlzZWNvbmRzIGlmIHRoZSBgZ2V0VVRDKmAgbWV0aG9kcyBhcmVcbiAgICAgICAgICAgICAgICAgIC8vIGJ1Z2d5LiBBZGFwdGVkIGZyb20gQFlhZmZsZSdzIGBkYXRlLXNoaW1gIHByb2plY3QuXG4gICAgICAgICAgICAgICAgICBkYXRlID0gZmxvb3IodmFsdWUgLyA4NjRlNSk7XG4gICAgICAgICAgICAgICAgICBmb3IgKHllYXIgPSBmbG9vcihkYXRlIC8gMzY1LjI0MjUpICsgMTk3MCAtIDE7IGdldERheSh5ZWFyICsgMSwgMCkgPD0gZGF0ZTsgeWVhcisrKXsgfVxuICAgICAgICAgICAgICAgICAgZm9yIChtb250aCA9IGZsb29yKChkYXRlIC0gZ2V0RGF5KHllYXIsIDApKSAvIDMwLjQyKTsgZ2V0RGF5KHllYXIsIG1vbnRoICsgMSkgPD0gZGF0ZTsgbW9udGgrKyl7IH1cbiAgICAgICAgICAgICAgICAgIGRhdGUgPSAxICsgZGF0ZSAtIGdldERheSh5ZWFyLCBtb250aCk7XG4gICAgICAgICAgICAgICAgICAvLyBUaGUgYHRpbWVgIHZhbHVlIHNwZWNpZmllcyB0aGUgdGltZSB3aXRoaW4gdGhlIGRheSAoc2VlIEVTXG4gICAgICAgICAgICAgICAgICAvLyA1LjEgc2VjdGlvbiAxNS45LjEuMikuIFRoZSBmb3JtdWxhIGAoQSAlIEIgKyBCKSAlIEJgIGlzIHVzZWRcbiAgICAgICAgICAgICAgICAgIC8vIHRvIGNvbXB1dGUgYEEgbW9kdWxvIEJgLCBhcyB0aGUgYCVgIG9wZXJhdG9yIGRvZXMgbm90XG4gICAgICAgICAgICAgICAgICAvLyBjb3JyZXNwb25kIHRvIHRoZSBgbW9kdWxvYCBvcGVyYXRpb24gZm9yIG5lZ2F0aXZlIG51bWJlcnMuXG4gICAgICAgICAgICAgICAgICB0aW1lID0gKHZhbHVlICUgODY0ZTUgKyA4NjRlNSkgJSA4NjRlNTtcbiAgICAgICAgICAgICAgICAgIC8vIFRoZSBob3VycywgbWludXRlcywgc2Vjb25kcywgYW5kIG1pbGxpc2Vjb25kcyBhcmUgb2J0YWluZWQgYnlcbiAgICAgICAgICAgICAgICAgIC8vIGRlY29tcG9zaW5nIHRoZSB0aW1lIHdpdGhpbiB0aGUgZGF5LiBTZWUgc2VjdGlvbiAxNS45LjEuMTAuXG4gICAgICAgICAgICAgICAgICBob3VycyA9IGZsb29yKHRpbWUgLyAzNmU1KSAlIDI0O1xuICAgICAgICAgICAgICAgICAgbWludXRlcyA9IGZsb29yKHRpbWUgLyA2ZTQpICUgNjA7XG4gICAgICAgICAgICAgICAgICBzZWNvbmRzID0gZmxvb3IodGltZSAvIDFlMykgJSA2MDtcbiAgICAgICAgICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IHRpbWUgJSAxZTM7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHllYXIgPSB2YWx1ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgICAgICAgICAgICAgbW9udGggPSB2YWx1ZS5nZXRVVENNb250aCgpO1xuICAgICAgICAgICAgICAgICAgZGF0ZSA9IHZhbHVlLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgICAgICAgICAgIGhvdXJzID0gdmFsdWUuZ2V0VVRDSG91cnMoKTtcbiAgICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSB2YWx1ZS5nZXRVVENNaW51dGVzKCk7XG4gICAgICAgICAgICAgICAgICBzZWNvbmRzID0gdmFsdWUuZ2V0VVRDU2Vjb25kcygpO1xuICAgICAgICAgICAgICAgICAgbWlsbGlzZWNvbmRzID0gdmFsdWUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFNlcmlhbGl6ZSBleHRlbmRlZCB5ZWFycyBjb3JyZWN0bHkuXG4gICAgICAgICAgICAgICAgdmFsdWUgPSAoeWVhciA8PSAwIHx8IHllYXIgPj0gMWU0ID8gKHllYXIgPCAwID8gXCItXCIgOiBcIitcIikgKyB0b1BhZGRlZFN0cmluZyg2LCB5ZWFyIDwgMCA/IC15ZWFyIDogeWVhcikgOiB0b1BhZGRlZFN0cmluZyg0LCB5ZWFyKSkgK1xuICAgICAgICAgICAgICAgICAgXCItXCIgKyB0b1BhZGRlZFN0cmluZygyLCBtb250aCArIDEpICsgXCItXCIgKyB0b1BhZGRlZFN0cmluZygyLCBkYXRlKSArXG4gICAgICAgICAgICAgICAgICAvLyBNb250aHMsIGRhdGVzLCBob3VycywgbWludXRlcywgYW5kIHNlY29uZHMgc2hvdWxkIGhhdmUgdHdvXG4gICAgICAgICAgICAgICAgICAvLyBkaWdpdHM7IG1pbGxpc2Vjb25kcyBzaG91bGQgaGF2ZSB0aHJlZS5cbiAgICAgICAgICAgICAgICAgIFwiVFwiICsgdG9QYWRkZWRTdHJpbmcoMiwgaG91cnMpICsgXCI6XCIgKyB0b1BhZGRlZFN0cmluZygyLCBtaW51dGVzKSArIFwiOlwiICsgdG9QYWRkZWRTdHJpbmcoMiwgc2Vjb25kcykgK1xuICAgICAgICAgICAgICAgICAgLy8gTWlsbGlzZWNvbmRzIGFyZSBvcHRpb25hbCBpbiBFUyA1LjAsIGJ1dCByZXF1aXJlZCBpbiA1LjEuXG4gICAgICAgICAgICAgICAgICBcIi5cIiArIHRvUGFkZGVkU3RyaW5nKDMsIG1pbGxpc2Vjb25kcykgKyBcIlpcIjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlLnRvSlNPTiA9PSBcImZ1bmN0aW9uXCIgJiYgKChjbGFzc05hbWUgIT0gbnVtYmVyQ2xhc3MgJiYgY2xhc3NOYW1lICE9IHN0cmluZ0NsYXNzICYmIGNsYXNzTmFtZSAhPSBhcnJheUNsYXNzKSB8fCBpc1Byb3BlcnR5LmNhbGwodmFsdWUsIFwidG9KU09OXCIpKSkge1xuICAgICAgICAgICAgICAvLyBQcm90b3R5cGUgPD0gMS42LjEgYWRkcyBub24tc3RhbmRhcmQgYHRvSlNPTmAgbWV0aG9kcyB0byB0aGVcbiAgICAgICAgICAgICAgLy8gYE51bWJlcmAsIGBTdHJpbmdgLCBgRGF0ZWAsIGFuZCBgQXJyYXlgIHByb3RvdHlwZXMuIEpTT04gM1xuICAgICAgICAgICAgICAvLyBpZ25vcmVzIGFsbCBgdG9KU09OYCBtZXRob2RzIG9uIHRoZXNlIG9iamVjdHMgdW5sZXNzIHRoZXkgYXJlXG4gICAgICAgICAgICAgIC8vIGRlZmluZWQgZGlyZWN0bHkgb24gYW4gaW5zdGFuY2UuXG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9KU09OKHByb3BlcnR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLyBJZiBhIHJlcGxhY2VtZW50IGZ1bmN0aW9uIHdhcyBwcm92aWRlZCwgY2FsbCBpdCB0byBvYnRhaW4gdGhlIHZhbHVlXG4gICAgICAgICAgICAvLyBmb3Igc2VyaWFsaXphdGlvbi5cbiAgICAgICAgICAgIHZhbHVlID0gY2FsbGJhY2suY2FsbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIFwibnVsbFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjbGFzc05hbWUgPSBnZXRDbGFzcy5jYWxsKHZhbHVlKTtcbiAgICAgICAgICBpZiAoY2xhc3NOYW1lID09IGJvb2xlYW5DbGFzcykge1xuICAgICAgICAgICAgLy8gQm9vbGVhbnMgYXJlIHJlcHJlc2VudGVkIGxpdGVyYWxseS5cbiAgICAgICAgICAgIHJldHVybiBcIlwiICsgdmFsdWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChjbGFzc05hbWUgPT0gbnVtYmVyQ2xhc3MpIHtcbiAgICAgICAgICAgIC8vIEpTT04gbnVtYmVycyBtdXN0IGJlIGZpbml0ZS4gYEluZmluaXR5YCBhbmQgYE5hTmAgYXJlIHNlcmlhbGl6ZWQgYXNcbiAgICAgICAgICAgIC8vIGBcIm51bGxcImAuXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPiAtMSAvIDAgJiYgdmFsdWUgPCAxIC8gMCA/IFwiXCIgKyB2YWx1ZSA6IFwibnVsbFwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2xhc3NOYW1lID09IHN0cmluZ0NsYXNzKSB7XG4gICAgICAgICAgICAvLyBTdHJpbmdzIGFyZSBkb3VibGUtcXVvdGVkIGFuZCBlc2NhcGVkLlxuICAgICAgICAgICAgcmV0dXJuIHF1b3RlKFwiXCIgKyB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHNlcmlhbGl6ZSBvYmplY3RzIGFuZCBhcnJheXMuXG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgY3ljbGljIHN0cnVjdHVyZXMuIFRoaXMgaXMgYSBsaW5lYXIgc2VhcmNoOyBwZXJmb3JtYW5jZVxuICAgICAgICAgICAgLy8gaXMgaW52ZXJzZWx5IHByb3BvcnRpb25hbCB0byB0aGUgbnVtYmVyIG9mIHVuaXF1ZSBuZXN0ZWQgb2JqZWN0cy5cbiAgICAgICAgICAgIGZvciAobGVuZ3RoID0gc3RhY2subGVuZ3RoOyBsZW5ndGgtLTspIHtcbiAgICAgICAgICAgICAgaWYgKHN0YWNrW2xlbmd0aF0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgLy8gQ3ljbGljIHN0cnVjdHVyZXMgY2Fubm90IGJlIHNlcmlhbGl6ZWQgYnkgYEpTT04uc3RyaW5naWZ5YC5cbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQWRkIHRoZSBvYmplY3QgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAgICAgICAgc3RhY2sucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgICAvLyBTYXZlIHRoZSBjdXJyZW50IGluZGVudGF0aW9uIGxldmVsIGFuZCBpbmRlbnQgb25lIGFkZGl0aW9uYWwgbGV2ZWwuXG4gICAgICAgICAgICBwcmVmaXggPSBpbmRlbnRhdGlvbjtcbiAgICAgICAgICAgIGluZGVudGF0aW9uICs9IHdoaXRlc3BhY2U7XG4gICAgICAgICAgICBpZiAoY2xhc3NOYW1lID09IGFycmF5Q2xhc3MpIHtcbiAgICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgc2VyaWFsaXplIGFycmF5IGVsZW1lbnRzLlxuICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdmFsdWUubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBzZXJpYWxpemUoaW5kZXgsIHZhbHVlLCBjYWxsYmFjaywgcHJvcGVydGllcywgd2hpdGVzcGFjZSwgaW5kZW50YXRpb24sIHN0YWNrKTtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goZWxlbWVudCA9PT0gdW5kZWYgPyBcIm51bGxcIiA6IGVsZW1lbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdHMubGVuZ3RoID8gKHdoaXRlc3BhY2UgPyBcIltcXG5cIiArIGluZGVudGF0aW9uICsgcmVzdWx0cy5qb2luKFwiLFxcblwiICsgaW5kZW50YXRpb24pICsgXCJcXG5cIiArIHByZWZpeCArIFwiXVwiIDogKFwiW1wiICsgcmVzdWx0cy5qb2luKFwiLFwiKSArIFwiXVwiKSkgOiBcIltdXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBzZXJpYWxpemUgb2JqZWN0IG1lbWJlcnMuIE1lbWJlcnMgYXJlIHNlbGVjdGVkIGZyb21cbiAgICAgICAgICAgICAgLy8gZWl0aGVyIGEgdXNlci1zcGVjaWZpZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lcywgb3IgdGhlIG9iamVjdFxuICAgICAgICAgICAgICAvLyBpdHNlbGYuXG4gICAgICAgICAgICAgIGZvckVhY2gocHJvcGVydGllcyB8fCB2YWx1ZSwgZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBzZXJpYWxpemUocHJvcGVydHksIHZhbHVlLCBjYWxsYmFjaywgcHJvcGVydGllcywgd2hpdGVzcGFjZSwgaW5kZW50YXRpb24sIHN0YWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCAhPT0gdW5kZWYpIHtcbiAgICAgICAgICAgICAgICAgIC8vIEFjY29yZGluZyB0byBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zOiBcIklmIGBnYXBgIHt3aGl0ZXNwYWNlfVxuICAgICAgICAgICAgICAgICAgLy8gaXMgbm90IHRoZSBlbXB0eSBzdHJpbmcsIGxldCBgbWVtYmVyYCB7cXVvdGUocHJvcGVydHkpICsgXCI6XCJ9XG4gICAgICAgICAgICAgICAgICAvLyBiZSB0aGUgY29uY2F0ZW5hdGlvbiBvZiBgbWVtYmVyYCBhbmQgdGhlIGBzcGFjZWAgY2hhcmFjdGVyLlwiXG4gICAgICAgICAgICAgICAgICAvLyBUaGUgXCJgc3BhY2VgIGNoYXJhY3RlclwiIHJlZmVycyB0byB0aGUgbGl0ZXJhbCBzcGFjZVxuICAgICAgICAgICAgICAgICAgLy8gY2hhcmFjdGVyLCBub3QgdGhlIGBzcGFjZWAge3dpZHRofSBhcmd1bWVudCBwcm92aWRlZCB0b1xuICAgICAgICAgICAgICAgICAgLy8gYEpTT04uc3RyaW5naWZ5YC5cbiAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChxdW90ZShwcm9wZXJ0eSkgKyBcIjpcIiArICh3aGl0ZXNwYWNlID8gXCIgXCIgOiBcIlwiKSArIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdHMubGVuZ3RoID8gKHdoaXRlc3BhY2UgPyBcIntcXG5cIiArIGluZGVudGF0aW9uICsgcmVzdWx0cy5qb2luKFwiLFxcblwiICsgaW5kZW50YXRpb24pICsgXCJcXG5cIiArIHByZWZpeCArIFwifVwiIDogKFwie1wiICsgcmVzdWx0cy5qb2luKFwiLFwiKSArIFwifVwiKSkgOiBcInt9XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIG9iamVjdCBmcm9tIHRoZSB0cmF2ZXJzZWQgb2JqZWN0IHN0YWNrLlxuICAgICAgICAgICAgc3RhY2sucG9wKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBQdWJsaWM6IGBKU09OLnN0cmluZ2lmeWAuIFNlZSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLlxuICAgICAgICBleHBvcnRzLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIChzb3VyY2UsIGZpbHRlciwgd2lkdGgpIHtcbiAgICAgICAgICB2YXIgd2hpdGVzcGFjZSwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIGNsYXNzTmFtZTtcbiAgICAgICAgICBpZiAodHlwZW9mIGZpbHRlciA9PSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIGZpbHRlciA9PSBcIm9iamVjdFwiICYmIGZpbHRlcikge1xuICAgICAgICAgICAgaWYgKChjbGFzc05hbWUgPSBnZXRDbGFzcy5jYWxsKGZpbHRlcikpID09IGZ1bmN0aW9uQ2xhc3MpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2sgPSBmaWx0ZXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNsYXNzTmFtZSA9PSBhcnJheUNsYXNzKSB7XG4gICAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIHByb3BlcnR5IG5hbWVzIGFycmF5IGludG8gYSBtYWtlc2hpZnQgc2V0LlxuICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0ge307XG4gICAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMCwgbGVuZ3RoID0gZmlsdGVyLmxlbmd0aCwgdmFsdWU7IGluZGV4IDwgbGVuZ3RoOyB2YWx1ZSA9IGZpbHRlcltpbmRleCsrXSwgKChjbGFzc05hbWUgPSBnZXRDbGFzcy5jYWxsKHZhbHVlKSksIGNsYXNzTmFtZSA9PSBzdHJpbmdDbGFzcyB8fCBjbGFzc05hbWUgPT0gbnVtYmVyQ2xhc3MpICYmIChwcm9wZXJ0aWVzW3ZhbHVlXSA9IDEpKXsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAod2lkdGgpIHtcbiAgICAgICAgICAgIGlmICgoY2xhc3NOYW1lID0gZ2V0Q2xhc3MuY2FsbCh3aWR0aCkpID09IG51bWJlckNsYXNzKSB7XG4gICAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIGB3aWR0aGAgdG8gYW4gaW50ZWdlciBhbmQgY3JlYXRlIGEgc3RyaW5nIGNvbnRhaW5pbmdcbiAgICAgICAgICAgICAgLy8gYHdpZHRoYCBudW1iZXIgb2Ygc3BhY2UgY2hhcmFjdGVycy5cbiAgICAgICAgICAgICAgaWYgKCh3aWR0aCAtPSB3aWR0aCAlIDEpID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAod2hpdGVzcGFjZSA9IFwiXCIsIHdpZHRoID4gMTAgJiYgKHdpZHRoID0gMTApOyB3aGl0ZXNwYWNlLmxlbmd0aCA8IHdpZHRoOyB3aGl0ZXNwYWNlICs9IFwiIFwiKXsgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNsYXNzTmFtZSA9PSBzdHJpbmdDbGFzcykge1xuICAgICAgICAgICAgICB3aGl0ZXNwYWNlID0gd2lkdGgubGVuZ3RoIDw9IDEwID8gd2lkdGggOiB3aWR0aC5zbGljZSgwLCAxMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIE9wZXJhIDw9IDcuNTR1MiBkaXNjYXJkcyB0aGUgdmFsdWVzIGFzc29jaWF0ZWQgd2l0aCBlbXB0eSBzdHJpbmcga2V5c1xuICAgICAgICAgIC8vIChgXCJcImApIG9ubHkgaWYgdGhleSBhcmUgdXNlZCBkaXJlY3RseSB3aXRoaW4gYW4gb2JqZWN0IG1lbWJlciBsaXN0XG4gICAgICAgICAgLy8gKGUuZy4sIGAhKFwiXCIgaW4geyBcIlwiOiAxfSlgKS5cbiAgICAgICAgICByZXR1cm4gc2VyaWFsaXplKFwiXCIsICh2YWx1ZSA9IHt9LCB2YWx1ZVtcIlwiXSA9IHNvdXJjZSwgdmFsdWUpLCBjYWxsYmFjaywgcHJvcGVydGllcywgd2hpdGVzcGFjZSwgXCJcIiwgW10pO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBQdWJsaWM6IFBhcnNlcyBhIEpTT04gc291cmNlIHN0cmluZy5cbiAgICAgIGlmICghaGFzKFwianNvbi1wYXJzZVwiKSkge1xuICAgICAgICB2YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogQSBtYXAgb2YgZXNjYXBlZCBjb250cm9sIGNoYXJhY3RlcnMgYW5kIHRoZWlyIHVuZXNjYXBlZFxuICAgICAgICAvLyBlcXVpdmFsZW50cy5cbiAgICAgICAgdmFyIFVuZXNjYXBlcyA9IHtcbiAgICAgICAgICA5MjogXCJcXFxcXCIsXG4gICAgICAgICAgMzQ6ICdcIicsXG4gICAgICAgICAgNDc6IFwiL1wiLFxuICAgICAgICAgIDk4OiBcIlxcYlwiLFxuICAgICAgICAgIDExNjogXCJcXHRcIixcbiAgICAgICAgICAxMTA6IFwiXFxuXCIsXG4gICAgICAgICAgMTAyOiBcIlxcZlwiLFxuICAgICAgICAgIDExNDogXCJcXHJcIlxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEludGVybmFsOiBTdG9yZXMgdGhlIHBhcnNlciBzdGF0ZS5cbiAgICAgICAgdmFyIEluZGV4LCBTb3VyY2U7XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IFJlc2V0cyB0aGUgcGFyc2VyIHN0YXRlIGFuZCB0aHJvd3MgYSBgU3ludGF4RXJyb3JgLlxuICAgICAgICB2YXIgYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgSW5kZXggPSBTb3VyY2UgPSBudWxsO1xuICAgICAgICAgIHRocm93IFN5bnRheEVycm9yKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IFJldHVybnMgdGhlIG5leHQgdG9rZW4sIG9yIGBcIiRcImAgaWYgdGhlIHBhcnNlciBoYXMgcmVhY2hlZFxuICAgICAgICAvLyB0aGUgZW5kIG9mIHRoZSBzb3VyY2Ugc3RyaW5nLiBBIHRva2VuIG1heSBiZSBhIHN0cmluZywgbnVtYmVyLCBgbnVsbGBcbiAgICAgICAgLy8gbGl0ZXJhbCwgb3IgQm9vbGVhbiBsaXRlcmFsLlxuICAgICAgICB2YXIgbGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBTb3VyY2UsIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGgsIHZhbHVlLCBiZWdpbiwgcG9zaXRpb24sIGlzU2lnbmVkLCBjaGFyQ29kZTtcbiAgICAgICAgICB3aGlsZSAoSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpO1xuICAgICAgICAgICAgc3dpdGNoIChjaGFyQ29kZSkge1xuICAgICAgICAgICAgICBjYXNlIDk6IGNhc2UgMTA6IGNhc2UgMTM6IGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgLy8gU2tpcCB3aGl0ZXNwYWNlIHRva2VucywgaW5jbHVkaW5nIHRhYnMsIGNhcnJpYWdlIHJldHVybnMsIGxpbmVcbiAgICAgICAgICAgICAgICAvLyBmZWVkcywgYW5kIHNwYWNlIGNoYXJhY3RlcnMuXG4gICAgICAgICAgICAgICAgSW5kZXgrKztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxMjM6IGNhc2UgMTI1OiBjYXNlIDkxOiBjYXNlIDkzOiBjYXNlIDU4OiBjYXNlIDQ0OlxuICAgICAgICAgICAgICAgIC8vIFBhcnNlIGEgcHVuY3R1YXRvciB0b2tlbiAoYHtgLCBgfWAsIGBbYCwgYF1gLCBgOmAsIG9yIGAsYCkgYXRcbiAgICAgICAgICAgICAgICAvLyB0aGUgY3VycmVudCBwb3NpdGlvbi5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGNoYXJJbmRleEJ1Z2d5ID8gc291cmNlLmNoYXJBdChJbmRleCkgOiBzb3VyY2VbSW5kZXhdO1xuICAgICAgICAgICAgICAgIEluZGV4Kys7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgICAgIC8vIGBcImAgZGVsaW1pdHMgYSBKU09OIHN0cmluZzsgYWR2YW5jZSB0byB0aGUgbmV4dCBjaGFyYWN0ZXIgYW5kXG4gICAgICAgICAgICAgICAgLy8gYmVnaW4gcGFyc2luZyB0aGUgc3RyaW5nLiBTdHJpbmcgdG9rZW5zIGFyZSBwcmVmaXhlZCB3aXRoIHRoZVxuICAgICAgICAgICAgICAgIC8vIHNlbnRpbmVsIGBAYCBjaGFyYWN0ZXIgdG8gZGlzdGluZ3Vpc2ggdGhlbSBmcm9tIHB1bmN0dWF0b3JzIGFuZFxuICAgICAgICAgICAgICAgIC8vIGVuZC1vZi1zdHJpbmcgdG9rZW5zLlxuICAgICAgICAgICAgICAgIGZvciAodmFsdWUgPSBcIkBcIiwgSW5kZXgrKzsgSW5kZXggPCBsZW5ndGg7KSB7XG4gICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KTtcbiAgICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA8IDMyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVuZXNjYXBlZCBBU0NJSSBjb250cm9sIGNoYXJhY3RlcnMgKHRob3NlIHdpdGggYSBjb2RlIHVuaXRcbiAgICAgICAgICAgICAgICAgICAgLy8gbGVzcyB0aGFuIHRoZSBzcGFjZSBjaGFyYWN0ZXIpIGFyZSBub3QgcGVybWl0dGVkLlxuICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGFyQ29kZSA9PSA5Mikge1xuICAgICAgICAgICAgICAgICAgICAvLyBBIHJldmVyc2Ugc29saWR1cyAoYFxcYCkgbWFya3MgdGhlIGJlZ2lubmluZyBvZiBhbiBlc2NhcGVkXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnRyb2wgY2hhcmFjdGVyIChpbmNsdWRpbmcgYFwiYCwgYFxcYCwgYW5kIGAvYCkgb3IgVW5pY29kZVxuICAgICAgICAgICAgICAgICAgICAvLyBlc2NhcGUgc2VxdWVuY2UuXG4gICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoKytJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY2hhckNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDkyOiBjYXNlIDM0OiBjYXNlIDQ3OiBjYXNlIDk4OiBjYXNlIDExNjogY2FzZSAxMTA6IGNhc2UgMTAyOiBjYXNlIDExNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJldml2ZSBlc2NhcGVkIGNvbnRyb2wgY2hhcmFjdGVycy5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IFVuZXNjYXBlc1tjaGFyQ29kZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTc6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBgXFx1YCBtYXJrcyB0aGUgYmVnaW5uaW5nIG9mIGEgVW5pY29kZSBlc2NhcGUgc2VxdWVuY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZHZhbmNlIHRvIHRoZSBmaXJzdCBjaGFyYWN0ZXIgYW5kIHZhbGlkYXRlIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm91ci1kaWdpdCBjb2RlIHBvaW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSArK0luZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChwb3NpdGlvbiA9IEluZGV4ICsgNDsgSW5kZXggPCBwb3NpdGlvbjsgSW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQSB2YWxpZCBzZXF1ZW5jZSBjb21wcmlzZXMgZm91ciBoZXhkaWdpdHMgKGNhc2UtXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluc2Vuc2l0aXZlKSB0aGF0IGZvcm0gYSBzaW5nbGUgaGV4YWRlY2ltYWwgdmFsdWUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGNoYXJDb2RlID49IDQ4ICYmIGNoYXJDb2RlIDw9IDU3IHx8IGNoYXJDb2RlID49IDk3ICYmIGNoYXJDb2RlIDw9IDEwMiB8fCBjaGFyQ29kZSA+PSA2NSAmJiBjaGFyQ29kZSA8PSA3MCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbnZhbGlkIFVuaWNvZGUgZXNjYXBlIHNlcXVlbmNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJldml2ZSB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSBmcm9tQ2hhckNvZGUoXCIweFwiICsgc291cmNlLnNsaWNlKGJlZ2luLCBJbmRleCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEludmFsaWQgZXNjYXBlIHNlcXVlbmNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID09IDM0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gQW4gdW5lc2NhcGVkIGRvdWJsZS1xdW90ZSBjaGFyYWN0ZXIgbWFya3MgdGhlIGVuZCBvZiB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAvLyBzdHJpbmcuXG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGJlZ2luID0gSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9wdGltaXplIGZvciB0aGUgY29tbW9uIGNhc2Ugd2hlcmUgYSBzdHJpbmcgaXMgdmFsaWQuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjaGFyQ29kZSA+PSAzMiAmJiBjaGFyQ29kZSAhPSA5MiAmJiBjaGFyQ29kZSAhPSAzNCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoKytJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gQXBwZW5kIHRoZSBzdHJpbmcgYXMtaXMuXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IHNvdXJjZS5zbGljZShiZWdpbiwgSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpID09IDM0KSB7XG4gICAgICAgICAgICAgICAgICAvLyBBZHZhbmNlIHRvIHRoZSBuZXh0IGNoYXJhY3RlciBhbmQgcmV0dXJuIHRoZSByZXZpdmVkIHN0cmluZy5cbiAgICAgICAgICAgICAgICAgIEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFVudGVybWluYXRlZCBzdHJpbmcuXG4gICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyBQYXJzZSBudW1iZXJzIGFuZCBsaXRlcmFscy5cbiAgICAgICAgICAgICAgICBiZWdpbiA9IEluZGV4O1xuICAgICAgICAgICAgICAgIC8vIEFkdmFuY2UgcGFzdCB0aGUgbmVnYXRpdmUgc2lnbiwgaWYgb25lIGlzIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPT0gNDUpIHtcbiAgICAgICAgICAgICAgICAgIGlzU2lnbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoKytJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFBhcnNlIGFuIGludGVnZXIgb3IgZmxvYXRpbmctcG9pbnQgdmFsdWUuXG4gICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID49IDQ4ICYmIGNoYXJDb2RlIDw9IDU3KSB7XG4gICAgICAgICAgICAgICAgICAvLyBMZWFkaW5nIHplcm9lcyBhcmUgaW50ZXJwcmV0ZWQgYXMgb2N0YWwgbGl0ZXJhbHMuXG4gICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPT0gNDggJiYgKChjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4ICsgMSkpLCBjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1NykpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWxsZWdhbCBvY3RhbCBsaXRlcmFsLlxuICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaXNTaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBpbnRlZ2VyIGNvbXBvbmVudC5cbiAgICAgICAgICAgICAgICAgIGZvciAoOyBJbmRleCA8IGxlbmd0aCAmJiAoKGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpKSwgY2hhckNvZGUgPj0gNDggJiYgY2hhckNvZGUgPD0gNTcpOyBJbmRleCsrKXsgfVxuICAgICAgICAgICAgICAgICAgLy8gRmxvYXRzIGNhbm5vdCBjb250YWluIGEgbGVhZGluZyBkZWNpbWFsIHBvaW50OyBob3dldmVyLCB0aGlzXG4gICAgICAgICAgICAgICAgICAvLyBjYXNlIGlzIGFscmVhZHkgYWNjb3VudGVkIGZvciBieSB0aGUgcGFyc2VyLlxuICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KSA9PSA0Nikge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9ICsrSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBkZWNpbWFsIGNvbXBvbmVudC5cbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IHBvc2l0aW9uIDwgbGVuZ3RoICYmICgoY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChwb3NpdGlvbikpLCBjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1Nyk7IHBvc2l0aW9uKyspeyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PSBJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIElsbGVnYWwgdHJhaWxpbmcgZGVjaW1hbC5cbiAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIEluZGV4ID0gcG9zaXRpb247XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAvLyBQYXJzZSBleHBvbmVudHMuIFRoZSBgZWAgZGVub3RpbmcgdGhlIGV4cG9uZW50IGlzXG4gICAgICAgICAgICAgICAgICAvLyBjYXNlLWluc2Vuc2l0aXZlLlxuICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCk7XG4gICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPT0gMTAxIHx8IGNoYXJDb2RlID09IDY5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoKytJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNraXAgcGFzdCB0aGUgc2lnbiBmb2xsb3dpbmcgdGhlIGV4cG9uZW50LCBpZiBvbmUgaXNcbiAgICAgICAgICAgICAgICAgICAgLy8gc3BlY2lmaWVkLlxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPT0gNDMgfHwgY2hhckNvZGUgPT0gNDUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBleHBvbmVudGlhbCBjb21wb25lbnQuXG4gICAgICAgICAgICAgICAgICAgIGZvciAocG9zaXRpb24gPSBJbmRleDsgcG9zaXRpb24gPCBsZW5ndGggJiYgKChjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KHBvc2l0aW9uKSksIGNoYXJDb2RlID49IDQ4ICYmIGNoYXJDb2RlIDw9IDU3KTsgcG9zaXRpb24rKyl7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09IEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gSWxsZWdhbCBlbXB0eSBleHBvbmVudC5cbiAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIEluZGV4ID0gcG9zaXRpb247XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAvLyBDb2VyY2UgdGhlIHBhcnNlZCB2YWx1ZSB0byBhIEphdmFTY3JpcHQgbnVtYmVyLlxuICAgICAgICAgICAgICAgICAgcmV0dXJuICtzb3VyY2Uuc2xpY2UoYmVnaW4sIEluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQSBuZWdhdGl2ZSBzaWduIG1heSBvbmx5IHByZWNlZGUgbnVtYmVycy5cbiAgICAgICAgICAgICAgICBpZiAoaXNTaWduZWQpIHtcbiAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGB0cnVlYCwgYGZhbHNlYCwgYW5kIGBudWxsYCBsaXRlcmFscy5cbiAgICAgICAgICAgICAgICBpZiAoc291cmNlLnNsaWNlKEluZGV4LCBJbmRleCArIDQpID09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICAgICAgICBJbmRleCArPSA0O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzb3VyY2Uuc2xpY2UoSW5kZXgsIEluZGV4ICsgNSkgPT0gXCJmYWxzZVwiKSB7XG4gICAgICAgICAgICAgICAgICBJbmRleCArPSA1O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc291cmNlLnNsaWNlKEluZGV4LCBJbmRleCArIDQpID09IFwibnVsbFwiKSB7XG4gICAgICAgICAgICAgICAgICBJbmRleCArPSA0O1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFVucmVjb2duaXplZCB0b2tlbi5cbiAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBSZXR1cm4gdGhlIHNlbnRpbmVsIGAkYCBjaGFyYWN0ZXIgaWYgdGhlIHBhcnNlciBoYXMgcmVhY2hlZCB0aGUgZW5kXG4gICAgICAgICAgLy8gb2YgdGhlIHNvdXJjZSBzdHJpbmcuXG4gICAgICAgICAgcmV0dXJuIFwiJFwiO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEludGVybmFsOiBQYXJzZXMgYSBKU09OIGB2YWx1ZWAgdG9rZW4uXG4gICAgICAgIHZhciBnZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0cywgaGFzTWVtYmVycztcbiAgICAgICAgICBpZiAodmFsdWUgPT0gXCIkXCIpIHtcbiAgICAgICAgICAgIC8vIFVuZXhwZWN0ZWQgZW5kIG9mIGlucHV0LlxuICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBpZiAoKGNoYXJJbmRleEJ1Z2d5ID8gdmFsdWUuY2hhckF0KDApIDogdmFsdWVbMF0pID09IFwiQFwiKSB7XG4gICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgc2VudGluZWwgYEBgIGNoYXJhY3Rlci5cbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnNsaWNlKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUGFyc2Ugb2JqZWN0IGFuZCBhcnJheSBsaXRlcmFscy5cbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIltcIikge1xuICAgICAgICAgICAgICAvLyBQYXJzZXMgYSBKU09OIGFycmF5LCByZXR1cm5pbmcgYSBuZXcgSmF2YVNjcmlwdCBhcnJheS5cbiAgICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgICBmb3IgKDs7IGhhc01lbWJlcnMgfHwgKGhhc01lbWJlcnMgPSB0cnVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbGV4KCk7XG4gICAgICAgICAgICAgICAgLy8gQSBjbG9zaW5nIHNxdWFyZSBicmFja2V0IG1hcmtzIHRoZSBlbmQgb2YgdGhlIGFycmF5IGxpdGVyYWwuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiXVwiKSB7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGFycmF5IGxpdGVyYWwgY29udGFpbnMgZWxlbWVudHMsIHRoZSBjdXJyZW50IHRva2VuXG4gICAgICAgICAgICAgICAgLy8gc2hvdWxkIGJlIGEgY29tbWEgc2VwYXJhdGluZyB0aGUgcHJldmlvdXMgZWxlbWVudCBmcm9tIHRoZVxuICAgICAgICAgICAgICAgIC8vIG5leHQuXG4gICAgICAgICAgICAgICAgaWYgKGhhc01lbWJlcnMpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIixcIikge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGxleCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCJdXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBVbmV4cGVjdGVkIHRyYWlsaW5nIGAsYCBpbiBhcnJheSBsaXRlcmFsLlxuICAgICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEEgYCxgIG11c3Qgc2VwYXJhdGUgZWFjaCBhcnJheSBlbGVtZW50LlxuICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBFbGlzaW9ucyBhbmQgbGVhZGluZyBjb21tYXMgYXJlIG5vdCBwZXJtaXR0ZWQuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiLFwiKSB7XG4gICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goZ2V0KHZhbHVlKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09IFwie1wiKSB7XG4gICAgICAgICAgICAgIC8vIFBhcnNlcyBhIEpTT04gb2JqZWN0LCByZXR1cm5pbmcgYSBuZXcgSmF2YVNjcmlwdCBvYmplY3QuXG4gICAgICAgICAgICAgIHJlc3VsdHMgPSB7fTtcbiAgICAgICAgICAgICAgZm9yICg7OyBoYXNNZW1iZXJzIHx8IChoYXNNZW1iZXJzID0gdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGxleCgpO1xuICAgICAgICAgICAgICAgIC8vIEEgY2xvc2luZyBjdXJseSBicmFjZSBtYXJrcyB0aGUgZW5kIG9mIHRoZSBvYmplY3QgbGl0ZXJhbC5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCJ9XCIpIHtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgb2JqZWN0IGxpdGVyYWwgY29udGFpbnMgbWVtYmVycywgdGhlIGN1cnJlbnQgdG9rZW5cbiAgICAgICAgICAgICAgICAvLyBzaG91bGQgYmUgYSBjb21tYSBzZXBhcmF0b3IuXG4gICAgICAgICAgICAgICAgaWYgKGhhc01lbWJlcnMpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIixcIikge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGxleCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCJ9XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBVbmV4cGVjdGVkIHRyYWlsaW5nIGAsYCBpbiBvYmplY3QgbGl0ZXJhbC5cbiAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBBIGAsYCBtdXN0IHNlcGFyYXRlIGVhY2ggb2JqZWN0IG1lbWJlci5cbiAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gTGVhZGluZyBjb21tYXMgYXJlIG5vdCBwZXJtaXR0ZWQsIG9iamVjdCBwcm9wZXJ0eSBuYW1lcyBtdXN0IGJlXG4gICAgICAgICAgICAgICAgLy8gZG91YmxlLXF1b3RlZCBzdHJpbmdzLCBhbmQgYSBgOmAgbXVzdCBzZXBhcmF0ZSBlYWNoIHByb3BlcnR5XG4gICAgICAgICAgICAgICAgLy8gbmFtZSBhbmQgdmFsdWUuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiLFwiIHx8IHR5cGVvZiB2YWx1ZSAhPSBcInN0cmluZ1wiIHx8IChjaGFySW5kZXhCdWdneSA/IHZhbHVlLmNoYXJBdCgwKSA6IHZhbHVlWzBdKSAhPSBcIkBcIiB8fCBsZXgoKSAhPSBcIjpcIikge1xuICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0c1t2YWx1ZS5zbGljZSgxKV0gPSBnZXQobGV4KCkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVW5leHBlY3RlZCB0b2tlbiBlbmNvdW50ZXJlZC5cbiAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogVXBkYXRlcyBhIHRyYXZlcnNlZCBvYmplY3QgbWVtYmVyLlxuICAgICAgICB2YXIgdXBkYXRlID0gZnVuY3Rpb24gKHNvdXJjZSwgcHJvcGVydHksIGNhbGxiYWNrKSB7XG4gICAgICAgICAgdmFyIGVsZW1lbnQgPSB3YWxrKHNvdXJjZSwgcHJvcGVydHksIGNhbGxiYWNrKTtcbiAgICAgICAgICBpZiAoZWxlbWVudCA9PT0gdW5kZWYpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBzb3VyY2VbcHJvcGVydHldO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzb3VyY2VbcHJvcGVydHldID0gZWxlbWVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IFJlY3Vyc2l2ZWx5IHRyYXZlcnNlcyBhIHBhcnNlZCBKU09OIG9iamVjdCwgaW52b2tpbmcgdGhlXG4gICAgICAgIC8vIGBjYWxsYmFja2AgZnVuY3Rpb24gZm9yIGVhY2ggdmFsdWUuIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhlXG4gICAgICAgIC8vIGBXYWxrKGhvbGRlciwgbmFtZSlgIG9wZXJhdGlvbiBkZWZpbmVkIGluIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjIuXG4gICAgICAgIHZhciB3YWxrID0gZnVuY3Rpb24gKHNvdXJjZSwgcHJvcGVydHksIGNhbGxiYWNrKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gc291cmNlW3Byb3BlcnR5XSwgbGVuZ3RoO1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIiAmJiB2YWx1ZSkge1xuICAgICAgICAgICAgLy8gYGZvckVhY2hgIGNhbid0IGJlIHVzZWQgdG8gdHJhdmVyc2UgYW4gYXJyYXkgaW4gT3BlcmEgPD0gOC41NFxuICAgICAgICAgICAgLy8gYmVjYXVzZSBpdHMgYE9iamVjdCNoYXNPd25Qcm9wZXJ0eWAgaW1wbGVtZW50YXRpb24gcmV0dXJucyBgZmFsc2VgXG4gICAgICAgICAgICAvLyBmb3IgYXJyYXkgaW5kaWNlcyAoZS5nLiwgYCFbMSwgMiwgM10uaGFzT3duUHJvcGVydHkoXCIwXCIpYCkuXG4gICAgICAgICAgICBpZiAoZ2V0Q2xhc3MuY2FsbCh2YWx1ZSkgPT0gYXJyYXlDbGFzcykge1xuICAgICAgICAgICAgICBmb3IgKGxlbmd0aCA9IHZhbHVlLmxlbmd0aDsgbGVuZ3RoLS07KSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlKHZhbHVlLCBsZW5ndGgsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlKHZhbHVlLCBwcm9wZXJ0eSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoc291cmNlLCBwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFB1YmxpYzogYEpTT04ucGFyc2VgLiBTZWUgRVMgNS4xIHNlY3Rpb24gMTUuMTIuMi5cbiAgICAgICAgZXhwb3J0cy5wYXJzZSA9IGZ1bmN0aW9uIChzb3VyY2UsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCwgdmFsdWU7XG4gICAgICAgICAgSW5kZXggPSAwO1xuICAgICAgICAgIFNvdXJjZSA9IFwiXCIgKyBzb3VyY2U7XG4gICAgICAgICAgcmVzdWx0ID0gZ2V0KGxleCgpKTtcbiAgICAgICAgICAvLyBJZiBhIEpTT04gc3RyaW5nIGNvbnRhaW5zIG11bHRpcGxlIHRva2VucywgaXQgaXMgaW52YWxpZC5cbiAgICAgICAgICBpZiAobGV4KCkgIT0gXCIkXCIpIHtcbiAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFJlc2V0IHRoZSBwYXJzZXIgc3RhdGUuXG4gICAgICAgICAgSW5kZXggPSBTb3VyY2UgPSBudWxsO1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayAmJiBnZXRDbGFzcy5jYWxsKGNhbGxiYWNrKSA9PSBmdW5jdGlvbkNsYXNzID8gd2FsaygodmFsdWUgPSB7fSwgdmFsdWVbXCJcIl0gPSByZXN1bHQsIHZhbHVlKSwgXCJcIiwgY2FsbGJhY2spIDogcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydHNbXCJydW5JbkNvbnRleHRcIl0gPSBydW5JbkNvbnRleHQ7XG4gICAgcmV0dXJuIGV4cG9ydHM7XG4gIH1cblxuICBpZiAoZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiAhaXNMb2FkZXIpIHtcbiAgICAvLyBFeHBvcnQgZm9yIENvbW1vbkpTIGVudmlyb25tZW50cy5cbiAgICBydW5JbkNvbnRleHQocm9vdCwgZXhwb3J0cyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gRXhwb3J0IGZvciB3ZWIgYnJvd3NlcnMgYW5kIEphdmFTY3JpcHQgZW5naW5lcy5cbiAgICB2YXIgbmF0aXZlSlNPTiA9IHJvb3QuSlNPTjtcbiAgICB2YXIgSlNPTjMgPSBydW5JbkNvbnRleHQocm9vdCwgKHJvb3RbXCJKU09OM1wiXSA9IHtcbiAgICAgIC8vIFB1YmxpYzogUmVzdG9yZXMgdGhlIG9yaWdpbmFsIHZhbHVlIG9mIHRoZSBnbG9iYWwgYEpTT05gIG9iamVjdCBhbmRcbiAgICAgIC8vIHJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIGBKU09OM2Agb2JqZWN0LlxuICAgICAgXCJub0NvbmZsaWN0XCI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcm9vdC5KU09OID0gbmF0aXZlSlNPTjtcbiAgICAgICAgcmV0dXJuIEpTT04zO1xuICAgICAgfVxuICAgIH0pKTtcblxuICAgIHJvb3QuSlNPTiA9IHtcbiAgICAgIFwicGFyc2VcIjogSlNPTjMucGFyc2UsXG4gICAgICBcInN0cmluZ2lmeVwiOiBKU09OMy5zdHJpbmdpZnlcbiAgICB9O1xuICB9XG59KGNvbW1vbmpzR2xvYmFsKSk7XG59KTtcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cblxuXG5cblxuXG5cblxuXG4vKipcbiAqIE1ha2Ugc3VyZSBgT2JqZWN0LmtleXNgIHdvcmsgZm9yIGB1bmRlZmluZWRgXG4gKiB2YWx1ZXMgdGhhdCBhcmUgc3RpbGwgdGhlcmUsIGxpa2UgYGRvY3VtZW50LmFsbGAuXG4gKiBodHRwOi8vbGlzdHMudzMub3JnL0FyY2hpdmVzL1B1YmxpYy9wdWJsaWMtaHRtbC8yMDA5SnVuLzA1NDYuaHRtbFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG9iamVjdEtleXMkMSh2YWwpe1xuICBpZiAoT2JqZWN0LmtleXMpIHsgcmV0dXJuIE9iamVjdC5rZXlzKHZhbCk7IH1cbiAgcmV0dXJuIG9iamVjdEtleXModmFsKTtcbn1cblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG52YXIgdXRpbEluc3BlY3QgPSBpbnNwZWN0O1xuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICogQGxpY2Vuc2UgTUlUICjCqSBKb3llbnQpXG4gKi9cbi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9cblxuZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBjdHggPSB7XG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcbiAgfTtcbiAgLy8gbGVnYWN5Li4uXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIHsgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdOyB9XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIHsgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTsgfVxuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgX2V4dGVuZChjdHgsIG9wdHMpO1xuICB9XG4gIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgeyBjdHguc2hvd0hpZGRlbiA9IGZhbHNlOyB9XG4gIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSB7IGN0eC5kZXB0aCA9IDI7IH1cbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSB7IGN0eC5jb2xvcnMgPSBmYWxzZTsgfVxuICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSB7IGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTsgfVxuICBpZiAoY3R4LmNvbG9ycykgeyBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7IH1cbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgcmV0dXJuIHN0cjtcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbiQxKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuXG5mdW5jdGlvbiBoYXNPd24kNChvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmXG4gICAgICAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgdmFyIGhhc2ggPSB7fTtcblxuICBmb3JlYWNoKGFycmF5LCBmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoaGFzT3duJDQodmFsdWUsIFN0cmluZyhpKSkpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH1cbiAgZm9yZWFjaChrZXlzLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoIWtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAga2V5LCB0cnVlKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XG4gIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cbiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxuICAgICAgdmFsdWUgJiZcbiAgICAgIGlzRnVuY3Rpb24kMSh2YWx1ZS5pbnNwZWN0KSAmJlxuICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG4gICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBpbnNwZWN0ICYmXG4gICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcbiAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7XG4gICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9XG5cbiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuICB2YXIga2V5cyA9IG9iamVjdEtleXMkMSh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbiAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcykge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGluZGV4b2Yoa2V5cywgJ21lc3NhZ2UnKSA+PSAwIHx8IGluZGV4b2Yoa2V5cywgJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgLy8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0dGVkLlxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaXNGdW5jdGlvbiQxKHZhbHVlKSkge1xuICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfVxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddO1xuXG4gIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcbiAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgYXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcbiAgaWYgKGlzRnVuY3Rpb24kMSh2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGFycmF5TWFwKGtleXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0geyB2YWx1ZTogdmFsdWVba2V5XSB9O1xuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcikge1xuICAgIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IGRlc2M7XG4gIH1cbiAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoIWhhc093biQ0KHZpc2libGVLZXlzLCBrZXkpKSB7XG4gICAgbmFtZSA9ICdbJyArIGtleSArICddJztcbiAgfVxuICBpZiAoIXN0cikge1xuICAgIGlmIChpbmRleG9mKGN0eC5zZWVuLCBkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBhcnJheU1hcChzdHIuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgYXJyYXlNYXAoc3RyLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0ganNvbjMuc3RyaW5naWZ5KCcnICsga2V5KTtcbiAgICBpZiAobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxLCBuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXG4gICAgeyByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTsgfVxuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsganNvbjMuc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArICdcXCcnO1xuICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcbiAgfVxuICBpZiAoaXNOdW1iZXIodmFsdWUpKVxuICAgIHsgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTsgfVxuICBpZiAoaXNCb29sZWFuKHZhbHVlKSlcbiAgICB7IHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpOyB9XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgeyByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpOyB9XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheVJlZHVjZShvdXRwdXQsIGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgO1xuICAgIHJldHVybiBwcmV2ICsgY3VyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLCAnJykubGVuZ3RoICsgMTtcbiAgfSwgMCk7XG5cbiAgaWYgKGxlbmd0aCA+IDYwKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArXG4gICAgICAgICAgIChiYXNlID09PSAnJyA/ICcnIDogYmFzZSArICdcXG4gJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBvdXRwdXQuam9pbignLFxcbiAgJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBicmFjZXNbMV07XG4gIH1cblxuICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArICcgJyArIG91dHB1dC5qb2luKCcsICcpICsgJyAnICsgYnJhY2VzWzFdO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kKG9yaWdpbiwgYWRkKSB7XG4gIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3RcbiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHsgcmV0dXJuIG9yaWdpbjsgfVxuXG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyQxKGFkZCk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07XG4gIH1cbiAgcmV0dXJuIG9yaWdpbjtcbn1cblxuLyogICovXG5cbnZhciBlbXB0eU9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuXG4vLyBUaGVzZSBoZWxwZXJzIHByb2R1Y2UgYmV0dGVyIFZNIGNvZGUgaW4gSlMgZW5naW5lcyBkdWUgdG8gdGhlaXJcbi8vIGV4cGxpY2l0bmVzcyBhbmQgZnVuY3Rpb24gaW5saW5pbmcuXG5mdW5jdGlvbiBpc1VuZGVmICh2KSB7XG4gIHJldHVybiB2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc0RlZiAodikge1xuICByZXR1cm4gdiAhPT0gdW5kZWZpbmVkICYmIHYgIT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNUcnVlICh2KSB7XG4gIHJldHVybiB2ID09PSB0cnVlXG59XG5cbmZ1bmN0aW9uIGlzRmFsc2UgKHYpIHtcbiAgcmV0dXJuIHYgPT09IGZhbHNlXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgcHJpbWl0aXZlLlxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSAodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJ1xuICApXG59XG5cbi8qKlxuICogUXVpY2sgb2JqZWN0IGNoZWNrIC0gdGhpcyBpcyBwcmltYXJpbHkgdXNlZCB0byB0ZWxsXG4gKiBPYmplY3RzIGZyb20gcHJpbWl0aXZlIHZhbHVlcyB3aGVuIHdlIGtub3cgdGhlIHZhbHVlXG4gKiBpcyBhIEpTT04tY29tcGxpYW50IHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0JDEgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSwgZS5nLiwgW29iamVjdCBPYmplY3RdLlxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAkMSAodikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsIGlzIGEgdmFsaWQgYXJyYXkgaW5kZXguXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRBcnJheUluZGV4ICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KFN0cmluZyh2YWwpKTtcbiAgcmV0dXJuIG4gPj0gMCAmJiBNYXRoLmZsb29yKG4pID09PSBuICYmIGlzRmluaXRlKHZhbClcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHtcbiAgcmV0dXJuIChcbiAgICBpc0RlZih2YWwpICYmXG4gICAgdHlwZW9mIHZhbC50aGVuID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHZhbC5jYXRjaCA9PT0gJ2Z1bmN0aW9uJ1xuICApXG59XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nJDQgKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGxcbiAgICA/ICcnXG4gICAgOiBBcnJheS5pc0FycmF5KHZhbCkgfHwgKGlzUGxhaW5PYmplY3QodmFsKSAmJiB2YWwudG9TdHJpbmcgPT09IF90b1N0cmluZylcbiAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCBudWxsLCAyKVxuICAgICAgOiBTdHJpbmcodmFsKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gaW5wdXQgdmFsdWUgdG8gYSBudW1iZXIgZm9yIHBlcnNpc3RlbmNlLlxuICogSWYgdGhlIGNvbnZlcnNpb24gZmFpbHMsIHJldHVybiBvcmlnaW5hbCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KHZhbCk7XG4gIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG5cbn1cblxuLyoqXG4gKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXlcbiAqIGlzIGluIHRoYXQgbWFwLlxuICovXG5mdW5jdGlvbiBtYWtlTWFwIChcbiAgc3RyLFxuICBleHBlY3RzTG93ZXJDYXNlXG4pIHtcbiAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2VcbiAgICA/IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWwudG9Mb3dlckNhc2UoKV07IH1cbiAgICA6IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWxdOyB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB0YWcgaXMgYSBidWlsdC1pbiB0YWcuXG4gKi9cbnZhciBpc0J1aWx0SW5UYWcgPSBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcsIHRydWUpO1xuXG4vKipcbiAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZS5cbiAqL1xudmFyIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUgPSBtYWtlTWFwKCdrZXkscmVmLHNsb3Qsc2xvdC1zY29wZSxpcycpO1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpdGVtIGZyb20gYW4gYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZSAoYXJyLCBpdGVtKSB7XG4gIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyB0aGUgcHJvcGVydHkuXG4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBoYXNPd24kNSAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9KVxufVxuXG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gKi9cbnZhciBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pXG59KTtcblxuLyoqXG4gKiBDYXBpdGFsaXplIGEgc3RyaW5nLlxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn0pO1xuXG4vKipcbiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gKi9cbnZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LFxuICogZS5nLiwgUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBhbnltb3JlXG4gKiBzaW5jZSBuYXRpdmUgYmluZCBpcyBub3cgcGVyZm9ybWFudCBlbm91Z2ggaW4gbW9zdCBicm93c2Vycy5cbiAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW5cbiAqIFBoYW50b21KUyAxLngsIHNvIHRoaXMgbXVzdCBiZSBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cbiAqL1xuZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoYSwgYiwgYykgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHNhbWUgdmFsdWUuXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgc3RyaW5nIGNvbnRhaW5pbmcgc3RhdGljIGtleXMgZnJvbSBjb21waWxlciBtb2R1bGVzLlxuICovXG5mdW5jdGlvbiBnZW5TdGF0aWNLZXlzIChtb2R1bGVzKSB7XG4gIHJldHVybiBtb2R1bGVzLnJlZHVjZShmdW5jdGlvbiAoa2V5cywgbSkge1xuICAgIHJldHVybiBrZXlzLmNvbmNhdChtLnN0YXRpY0tleXMgfHwgW10pXG4gIH0sIFtdKS5qb2luKCcsJylcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0d28gdmFsdWVzIGFyZSBsb29zZWx5IGVxdWFsIC0gdGhhdCBpcyxcbiAqIGlmIHRoZXkgYXJlIHBsYWluIG9iamVjdHMsIGRvIHRoZXkgaGF2ZSB0aGUgc2FtZSBzaGFwZT9cbiAqL1xuZnVuY3Rpb24gbG9vc2VFcXVhbCAoYSwgYikge1xuICBpZiAoYSA9PT0gYikgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpc09iamVjdEEgPSBpc09iamVjdCQxKGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QkMShiKTtcbiAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGlzQXJyYXlBID0gQXJyYXkuaXNBcnJheShhKTtcbiAgICAgIHZhciBpc0FycmF5QiA9IEFycmF5LmlzQXJyYXkoYik7XG4gICAgICBpZiAoaXNBcnJheUEgJiYgaXNBcnJheUIpIHtcbiAgICAgICAgcmV0dXJuIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoZSwgYltpXSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAoYSBpbnN0YW5jZW9mIERhdGUgJiYgYiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKVxuICAgICAgfSBlbHNlIGlmICghaXNBcnJheUEgJiYgIWlzQXJyYXlCKSB7XG4gICAgICAgIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKGEpO1xuICAgICAgICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhiKTtcbiAgICAgICAgcmV0dXJuIGtleXNBLmxlbmd0aCA9PT0ga2V5c0IubGVuZ3RoICYmIGtleXNBLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChhW2tleV0sIGJba2V5XSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWlzT2JqZWN0QSAmJiAhaXNPYmplY3RCKSB7XG4gICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGZpcnN0IGluZGV4IGF0IHdoaWNoIGEgbG9vc2VseSBlcXVhbCB2YWx1ZSBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBhcnJheSAoaWYgdmFsdWUgaXMgYSBwbGFpbiBvYmplY3QsIHRoZSBhcnJheSBtdXN0XG4gKiBjb250YWluIGFuIG9iamVjdCBvZiB0aGUgc2FtZSBzaGFwZSksIG9yIC0xIGlmIGl0IGlzIG5vdCBwcmVzZW50LlxuICovXG5mdW5jdGlvbiBsb29zZUluZGV4T2YgKGFyciwgdmFsKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxvb3NlRXF1YWwoYXJyW2ldLCB2YWwpKSB7IHJldHVybiBpIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuLyoqXG4gKiBFbnN1cmUgYSBmdW5jdGlvbiBpcyBjYWxsZWQgb25seSBvbmNlLlxuICovXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiB1bmljb2RlIGxldHRlcnMgdXNlZCBmb3IgcGFyc2luZyBodG1sIHRhZ3MsIGNvbXBvbmVudCBuYW1lcyBhbmQgcHJvcGVydHkgcGF0aHMuXG4gKiB1c2luZyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUzL3NlbWFudGljcy1zY3JpcHRpbmcuaHRtbCNwb3RlbnRpYWxjdXN0b21lbGVtZW50bmFtZVxuICogc2tpcHBpbmcgXFx1MTAwMDAtXFx1RUZGRkYgZHVlIHRvIGl0IGZyZWV6aW5nIHVwIFBoYW50b21KU1xuICovXG52YXIgdW5pY29kZVJlZ0V4cCA9IC9hLXpBLVpcXHUwMEI3XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjAzRi1cXHUyMDQwXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZELztcblxuLyoqXG4gKiBDaGVjayBpZiBhIHN0cmluZyBzdGFydHMgd2l0aCAkIG9yIF9cbiAqL1xuZnVuY3Rpb24gaXNSZXNlcnZlZCAoc3RyKSB7XG4gIHZhciBjID0gKHN0ciArICcnKS5jaGFyQ29kZUF0KDApO1xuICByZXR1cm4gYyA9PT0gMHgyNCB8fCBjID09PSAweDVGXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGRlZiAob2JqLCBrZXksIHZhbCwgZW51bWVyYWJsZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICB2YWx1ZTogdmFsLFxuICAgIGVudW1lcmFibGU6ICEhZW51bWVyYWJsZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogUGFyc2Ugc2ltcGxlIHBhdGguXG4gKi9cbnZhciBiYWlsUkUgPSBuZXcgUmVnRXhwKChcIlteXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCIuJF9cXFxcZF1cIikpO1xuZnVuY3Rpb24gcGFyc2VQYXRoIChwYXRoKSB7XG4gIGlmIChiYWlsUkUudGVzdChwYXRoKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIW9iaikgeyByZXR1cm4gfVxuICAgICAgb2JqID0gb2JqW3NlZ21lbnRzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIG9ialxuICB9XG59XG5cbi8qICAqL1xuXG4vLyBjYW4gd2UgdXNlIF9fcHJvdG9fXz9cbnZhciBoYXNQcm90byA9ICdfX3Byb3RvX18nIGluIHt9O1xuXG4vLyBCcm93c2VyIGVudmlyb25tZW50IHNuaWZmaW5nXG52YXIgaW5Ccm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgaW5XZWV4ID0gdHlwZW9mIFdYRW52aXJvbm1lbnQgIT09ICd1bmRlZmluZWQnICYmICEhV1hFbnZpcm9ubWVudC5wbGF0Zm9ybTtcbnZhciB3ZWV4UGxhdGZvcm0gPSBpbldlZXggJiYgV1hFbnZpcm9ubWVudC5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpO1xudmFyIFVBID0gaW5Ccm93c2VyICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG52YXIgaXNJRSA9IFVBICYmIC9tc2llfHRyaWRlbnQvLnRlc3QoVUEpO1xudmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XG52YXIgaXNFZGdlID0gVUEgJiYgVUEuaW5kZXhPZignZWRnZS8nKSA+IDA7XG52YXIgaXNBbmRyb2lkID0gKFVBICYmIFVBLmluZGV4T2YoJ2FuZHJvaWQnKSA+IDApIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdhbmRyb2lkJyk7XG52YXIgaXNJT1MgPSAoVUEgJiYgL2lwaG9uZXxpcGFkfGlwb2R8aW9zLy50ZXN0KFVBKSkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2lvcycpO1xudmFyIGlzQ2hyb21lID0gVUEgJiYgL2Nocm9tZVxcL1xcZCsvLnRlc3QoVUEpICYmICFpc0VkZ2U7XG52YXIgaXNQaGFudG9tSlMgPSBVQSAmJiAvcGhhbnRvbWpzLy50ZXN0KFVBKTtcbnZhciBpc0ZGID0gVUEgJiYgVUEubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKTtcblxuLy8gRmlyZWZveCBoYXMgYSBcIndhdGNoXCIgZnVuY3Rpb24gb24gT2JqZWN0LnByb3RvdHlwZS4uLlxudmFyIG5hdGl2ZVdhdGNoID0gKHt9KS53YXRjaDtcbmlmIChpbkJyb3dzZXIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgb3B0cyA9IHt9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRzLCAncGFzc2l2ZScsICh7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICB9XG4gICAgfSkpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QtcGFzc2l2ZScsIG51bGwsIG9wdHMpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG4vLyB0aGlzIG5lZWRzIHRvIGJlIGxhenktZXZhbGVkIGJlY2F1c2UgdnVlIG1heSBiZSByZXF1aXJlZCBiZWZvcmVcbi8vIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgY2FuIHNldCBWVUVfRU5WXG52YXIgX2lzU2VydmVyID0gZmFsc2U7XG52YXIgaXNTZXJ2ZXJSZW5kZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChfaXNTZXJ2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghaW5Ccm93c2VyICYmICFpbldlZXggJiYgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGRldGVjdCBwcmVzZW5jZSBvZiB2dWUtc2VydmVyLXJlbmRlcmVyIGFuZCBhdm9pZFxuICAgICAgLy8gV2VicGFjayBzaGltbWluZyB0aGUgcHJvY2Vzc1xuICAgICAgX2lzU2VydmVyID0gZ2xvYmFsWydwcm9jZXNzJ10gJiYgZ2xvYmFsWydwcm9jZXNzJ10uZW52LlZVRV9FTlYgPT09ICdzZXJ2ZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICBfaXNTZXJ2ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9pc1NlcnZlclxufTtcblxuLy8gZGV0ZWN0IGRldnRvb2xzXG52YXIgZGV2dG9vbHMgPSBpbkJyb3dzZXIgJiYgd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBpc05hdGl2ZSAoQ3Rvcikge1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KEN0b3IudG9TdHJpbmcoKSlcbn1cblxudmFyIGhhc1N5bWJvbCA9XG4gIHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFN5bWJvbCkgJiZcbiAgdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFJlZmxlY3Qub3duS2V5cyk7XG5cbnZhciBfU2V0O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovIC8vICRmbG93LWRpc2FibGUtbGluZVxuaWYgKHR5cGVvZiBTZXQgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFNldCkpIHtcbiAgLy8gdXNlIG5hdGl2ZSBTZXQgd2hlbiBhdmFpbGFibGUuXG4gIF9TZXQgPSBTZXQ7XG59IGVsc2Uge1xuICAvLyBhIG5vbi1zdGFuZGFyZCBTZXQgcG9seWZpbGwgdGhhdCBvbmx5IHdvcmtzIHdpdGggcHJpbWl0aXZlIGtleXMuXG4gIF9TZXQgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXQgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRba2V5XSA9PT0gdHJ1ZVxuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGtleSkge1xuICAgICAgdGhpcy5zZXRba2V5XSA9IHRydWU7XG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2V0O1xuICB9KCkpO1xufVxuXG52YXIgU1NSX0FUVFIgPSAnZGF0YS1zZXJ2ZXItcmVuZGVyZWQnO1xuXG52YXIgQVNTRVRfVFlQRVMgPSBbXG4gICdjb21wb25lbnQnLFxuICAnZGlyZWN0aXZlJyxcbiAgJ2ZpbHRlcidcbl07XG5cbnZhciBMSUZFQ1lDTEVfSE9PS1MgPSBbXG4gICdiZWZvcmVDcmVhdGUnLFxuICAnY3JlYXRlZCcsXG4gICdiZWZvcmVNb3VudCcsXG4gICdtb3VudGVkJyxcbiAgJ2JlZm9yZVVwZGF0ZScsXG4gICd1cGRhdGVkJyxcbiAgJ2JlZm9yZURlc3Ryb3knLFxuICAnZGVzdHJveWVkJyxcbiAgJ2FjdGl2YXRlZCcsXG4gICdkZWFjdGl2YXRlZCcsXG4gICdlcnJvckNhcHR1cmVkJyxcbiAgJ3NlcnZlclByZWZldGNoJ1xuXTtcblxuLyogICovXG5cblxuXG52YXIgY29uZmlnID0gKHtcbiAgLyoqXG4gICAqIE9wdGlvbiBtZXJnZSBzdHJhdGVnaWVzICh1c2VkIGluIGNvcmUvdXRpbC9vcHRpb25zKVxuICAgKi9cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIG9wdGlvbk1lcmdlU3RyYXRlZ2llczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogV2hldGhlciB0byBzdXBwcmVzcyB3YXJuaW5ncy5cbiAgICovXG4gIHNpbGVudDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFNob3cgcHJvZHVjdGlvbiBtb2RlIHRpcCBtZXNzYWdlIG9uIGJvb3Q/XG4gICAqL1xuICBwcm9kdWN0aW9uVGlwOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBkZXZ0b29sc1xuICAgKi9cbiAgZGV2dG9vbHM6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gcmVjb3JkIHBlcmZcbiAgICovXG4gIHBlcmZvcm1hbmNlOiBmYWxzZSxcblxuICAvKipcbiAgICogRXJyb3IgaGFuZGxlciBmb3Igd2F0Y2hlciBlcnJvcnNcbiAgICovXG4gIGVycm9ySGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogV2FybiBoYW5kbGVyIGZvciB3YXRjaGVyIHdhcm5zXG4gICAqL1xuICB3YXJuSGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogSWdub3JlIGNlcnRhaW4gY3VzdG9tIGVsZW1lbnRzXG4gICAqL1xuICBpZ25vcmVkRWxlbWVudHM6IFtdLFxuXG4gIC8qKlxuICAgKiBDdXN0b20gdXNlciBrZXkgYWxpYXNlcyBmb3Igdi1vblxuICAgKi9cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGtleUNvZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSByZWdpc3RlcmVkIGFzIGFcbiAgICogY29tcG9uZW50LiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZFRhZzogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSB1c2VkIGFzIGEgY29tcG9uZW50XG4gICAqIHByb3AuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkQXR0cjogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIGFuIHVua25vd24gZWxlbWVudC5cbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgaXNVbmtub3duRWxlbWVudDogbm8sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmFtZXNwYWNlIG9mIGFuIGVsZW1lbnRcbiAgICovXG4gIGdldFRhZ05hbWVzcGFjZTogbm9vcCxcblxuICAvKipcbiAgICogUGFyc2UgdGhlIHJlYWwgdGFnIG5hbWUgZm9yIHRoZSBzcGVjaWZpYyBwbGF0Zm9ybS5cbiAgICovXG4gIHBhcnNlUGxhdGZvcm1UYWdOYW1lOiBpZGVudGl0eSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIG11c3QgYmUgYm91bmQgdXNpbmcgcHJvcGVydHksIGUuZy4gdmFsdWVcbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgbXVzdFVzZVByb3A6IG5vLFxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIHVwZGF0ZXMgYXN5bmNocm9ub3VzbHkuIEludGVuZGVkIHRvIGJlIHVzZWQgYnkgVnVlIFRlc3QgVXRpbHNcbiAgICogVGhpcyB3aWxsIHNpZ25pZmljYW50bHkgcmVkdWNlIHBlcmZvcm1hbmNlIGlmIHNldCB0byBmYWxzZS5cbiAgICovXG4gIGFzeW5jOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciBsZWdhY3kgcmVhc29uc1xuICAgKi9cbiAgX2xpZmVjeWNsZUhvb2tzOiBMSUZFQ1lDTEVfSE9PS1Ncbn0pO1xuXG4vKiAgKi9cblxudmFyIHdhcm4gPSBub29wO1xudmFyIHRpcCA9IG5vb3A7XG52YXIgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IChub29wKTsgLy8gd29yayBhcm91bmQgZmxvdyBjaGVja1xudmFyIGZvcm1hdENvbXBvbmVudE5hbWUgPSAobm9vcCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBoYXNDb25zb2xlID0gdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnO1xuICB2YXIgY2xhc3NpZnlSRSA9IC8oPzpefFstX10pKFxcdykvZztcbiAgdmFyIGNsYXNzaWZ5ID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gc3RyXG4gICAgLnJlcGxhY2UoY2xhc3NpZnlSRSwgZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudG9VcHBlckNhc2UoKTsgfSlcbiAgICAucmVwbGFjZSgvWy1fXS9nLCAnJyk7IH07XG5cbiAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgdmFyIHRyYWNlID0gdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnO1xuXG4gICAgaWYgKGNvbmZpZy53YXJuSGFuZGxlcikge1xuICAgICAgY29uZmlnLndhcm5IYW5kbGVyLmNhbGwobnVsbCwgbXNnLCB2bSwgdHJhY2UpO1xuICAgIH0gZWxzZSBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIltWdWUgd2Fybl06IFwiICsgbXNnICsgdHJhY2UpKTtcbiAgICB9XG4gIH07XG5cbiAgdGlwID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJbVnVlIHRpcF06IFwiICsgbXNnICsgKFxuICAgICAgICB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJydcbiAgICAgICkpO1xuICAgIH1cbiAgfTtcblxuICBmb3JtYXRDb21wb25lbnROYW1lID0gZnVuY3Rpb24gKHZtLCBpbmNsdWRlRmlsZSkge1xuICAgIGlmICh2bS4kcm9vdCA9PT0gdm0pIHtcbiAgICAgIHJldHVybiAnPFJvb3Q+J1xuICAgIH1cbiAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiB2bSA9PT0gJ2Z1bmN0aW9uJyAmJiB2bS5jaWQgIT0gbnVsbFxuICAgICAgPyB2bS5vcHRpb25zXG4gICAgICA6IHZtLl9pc1Z1ZVxuICAgICAgICA/IHZtLiRvcHRpb25zIHx8IHZtLmNvbnN0cnVjdG9yLm9wdGlvbnNcbiAgICAgICAgOiB2bTtcbiAgICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSB8fCBvcHRpb25zLl9jb21wb25lbnRUYWc7XG4gICAgdmFyIGZpbGUgPSBvcHRpb25zLl9fZmlsZTtcbiAgICBpZiAoIW5hbWUgJiYgZmlsZSkge1xuICAgICAgdmFyIG1hdGNoID0gZmlsZS5tYXRjaCgvKFteL1xcXFxdKylcXC52dWUkLyk7XG4gICAgICBuYW1lID0gbWF0Y2ggJiYgbWF0Y2hbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIChuYW1lID8gKFwiPFwiICsgKGNsYXNzaWZ5KG5hbWUpKSArIFwiPlwiKSA6IFwiPEFub255bW91cz5cIikgK1xuICAgICAgKGZpbGUgJiYgaW5jbHVkZUZpbGUgIT09IGZhbHNlID8gKFwiIGF0IFwiICsgZmlsZSkgOiAnJylcbiAgICApXG4gIH07XG5cbiAgdmFyIHJlcGVhdCA9IGZ1bmN0aW9uIChzdHIsIG4pIHtcbiAgICB2YXIgcmVzID0gJyc7XG4gICAgd2hpbGUgKG4pIHtcbiAgICAgIGlmIChuICUgMiA9PT0gMSkgeyByZXMgKz0gc3RyOyB9XG4gICAgICBpZiAobiA+IDEpIHsgc3RyICs9IHN0cjsgfVxuICAgICAgbiA+Pj0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9O1xuXG4gIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSBmdW5jdGlvbiAodm0pIHtcbiAgICBpZiAodm0uX2lzVnVlICYmIHZtLiRwYXJlbnQpIHtcbiAgICAgIHZhciB0cmVlID0gW107XG4gICAgICB2YXIgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgIHdoaWxlICh2bSkge1xuICAgICAgICBpZiAodHJlZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIGxhc3QgPSB0cmVlW3RyZWUubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaWYgKGxhc3QuY29uc3RydWN0b3IgPT09IHZtLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UrKztcbiAgICAgICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPiAwKSB7XG4gICAgICAgICAgICB0cmVlW3RyZWUubGVuZ3RoIC0gMV0gPSBbbGFzdCwgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlXTtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRyZWUucHVzaCh2bSk7XG4gICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnXFxuXFxuZm91bmQgaW5cXG5cXG4nICsgdHJlZVxuICAgICAgICAubWFwKGZ1bmN0aW9uICh2bSwgaSkgeyByZXR1cm4gKFwiXCIgKyAoaSA9PT0gMCA/ICctLS0+ICcgOiByZXBlYXQoJyAnLCA1ICsgaSAqIDIpKSArIChBcnJheS5pc0FycmF5KHZtKVxuICAgICAgICAgICAgPyAoKGZvcm1hdENvbXBvbmVudE5hbWUodm1bMF0pKSArIFwiLi4uIChcIiArICh2bVsxXSkgKyBcIiByZWN1cnNpdmUgY2FsbHMpXCIpXG4gICAgICAgICAgICA6IGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSk7IH0pXG4gICAgICAgIC5qb2luKCdcXG4nKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKFwiXFxuXFxuKGZvdW5kIGluIFwiICsgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiKVwiKVxuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQgPSAwO1xuXG4vKipcbiAqIEEgZGVwIGlzIGFuIG9ic2VydmFibGUgdGhhdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICogZGlyZWN0aXZlcyBzdWJzY3JpYmluZyB0byBpdC5cbiAqL1xudmFyIERlcCA9IGZ1bmN0aW9uIERlcCAoKSB7XG4gIHRoaXMuaWQgPSB1aWQrKztcbiAgdGhpcy5zdWJzID0gW107XG59O1xuXG5EZXAucHJvdG90eXBlLmFkZFN1YiA9IGZ1bmN0aW9uIGFkZFN1YiAoc3ViKSB7XG4gIHRoaXMuc3Vicy5wdXNoKHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIHJlbW92ZVN1YiAoc3ViKSB7XG4gIHJlbW92ZSh0aGlzLnN1YnMsIHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgRGVwLnRhcmdldC5hZGREZXAodGhpcyk7XG4gIH1cbn07XG5cbkRlcC5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5ICgpIHtcbiAgLy8gc3RhYmlsaXplIHRoZSBzdWJzY3JpYmVyIGxpc3QgZmlyc3RcbiAgdmFyIHN1YnMgPSB0aGlzLnN1YnMuc2xpY2UoKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykge1xuICAgIC8vIHN1YnMgYXJlbid0IHNvcnRlZCBpbiBzY2hlZHVsZXIgaWYgbm90IHJ1bm5pbmcgYXN5bmNcbiAgICAvLyB3ZSBuZWVkIHRvIHNvcnQgdGhlbSBub3cgdG8gbWFrZSBzdXJlIHRoZXkgZmlyZSBpbiBjb3JyZWN0XG4gICAgLy8gb3JkZXJcbiAgICBzdWJzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbCA9IHN1YnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgc3Vic1tpXS51cGRhdGUoKTtcbiAgfVxufTtcblxuLy8gVGhlIGN1cnJlbnQgdGFyZ2V0IHdhdGNoZXIgYmVpbmcgZXZhbHVhdGVkLlxuLy8gVGhpcyBpcyBnbG9iYWxseSB1bmlxdWUgYmVjYXVzZSBvbmx5IG9uZSB3YXRjaGVyXG4vLyBjYW4gYmUgZXZhbHVhdGVkIGF0IGEgdGltZS5cbkRlcC50YXJnZXQgPSBudWxsO1xudmFyIHRhcmdldFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIHB1c2hUYXJnZXQgKHRhcmdldCkge1xuICB0YXJnZXRTdGFjay5wdXNoKHRhcmdldCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHBvcFRhcmdldCAoKSB7XG4gIHRhcmdldFN0YWNrLnBvcCgpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0U3RhY2tbdGFyZ2V0U3RhY2subGVuZ3RoIC0gMV07XG59XG5cbi8qICAqL1xuXG52YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIHRleHQsXG4gIGVsbSxcbiAgY29udGV4dCxcbiAgY29tcG9uZW50T3B0aW9ucyxcbiAgYXN5bmNGYWN0b3J5XG4pIHtcbiAgdGhpcy50YWcgPSB0YWc7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgdGhpcy5lbG0gPSBlbG07XG4gIHRoaXMubnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuZm5Db250ZXh0ID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMua2V5ID0gZGF0YSAmJiBkYXRhLmtleTtcbiAgdGhpcy5jb21wb25lbnRPcHRpb25zID0gY29tcG9uZW50T3B0aW9ucztcbiAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHRoaXMucmF3ID0gZmFsc2U7XG4gIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcbiAgdGhpcy5pc1Jvb3RJbnNlcnQgPSB0cnVlO1xuICB0aGlzLmlzQ29tbWVudCA9IGZhbHNlO1xuICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG4gIHRoaXMuaXNPbmNlID0gZmFsc2U7XG4gIHRoaXMuYXN5bmNGYWN0b3J5ID0gYXN5bmNGYWN0b3J5O1xuICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXIgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8vIERFUFJFQ0FURUQ6IGFsaWFzIGZvciBjb21wb25lbnRJbnN0YW5jZSBmb3IgYmFja3dhcmRzIGNvbXBhdC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuY2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgaWYgKCB0ZXh0ID09PSB2b2lkIDAgKSB0ZXh0ID0gJyc7XG5cbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gdGV4dDtcbiAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuICByZXR1cm4gbm9kZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlICh2YWwpIHtcbiAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSlcbn1cblxuLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncbi8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbmZ1bmN0aW9uIGNsb25lVk5vZGUgKHZub2RlKSB7XG4gIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgdm5vZGUudGFnLFxuICAgIHZub2RlLmRhdGEsXG4gICAgLy8gIzc5NzVcbiAgICAvLyBjbG9uZSBjaGlsZHJlbiBhcnJheSB0byBhdm9pZCBtdXRhdGluZyBvcmlnaW5hbCBpbiBjYXNlIG9mIGNsb25pbmdcbiAgICAvLyBhIGNoaWxkLlxuICAgIHZub2RlLmNoaWxkcmVuICYmIHZub2RlLmNoaWxkcmVuLnNsaWNlKCksXG4gICAgdm5vZGUudGV4dCxcbiAgICB2bm9kZS5lbG0sXG4gICAgdm5vZGUuY29udGV4dCxcbiAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zLFxuICAgIHZub2RlLmFzeW5jRmFjdG9yeVxuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XG4gIGNsb25lZC5mbkNvbnRleHQgPSB2bm9kZS5mbkNvbnRleHQ7XG4gIGNsb25lZC5mbk9wdGlvbnMgPSB2bm9kZS5mbk9wdGlvbnM7XG4gIGNsb25lZC5mblNjb3BlSWQgPSB2bm9kZS5mblNjb3BlSWQ7XG4gIGNsb25lZC5hc3luY01ldGEgPSB2bm9kZS5hc3luY01ldGE7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtcblxudmFyIG1ldGhvZHNUb1BhdGNoID0gW1xuICAncHVzaCcsXG4gICdwb3AnLFxuICAnc2hpZnQnLFxuICAndW5zaGlmdCcsXG4gICdzcGxpY2UnLFxuICAnc29ydCcsXG4gICdyZXZlcnNlJ1xuXTtcblxuLyoqXG4gKiBJbnRlcmNlcHQgbXV0YXRpbmcgbWV0aG9kcyBhbmQgZW1pdCBldmVudHNcbiAqL1xubWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogSW4gc29tZSBjYXNlcyB3ZSBtYXkgd2FudCB0byBkaXNhYmxlIG9ic2VydmF0aW9uIGluc2lkZSBhIGNvbXBvbmVudCdzXG4gKiB1cGRhdGUgY29tcHV0YXRpb24uXG4gKi9cbnZhciBzaG91bGRPYnNlcnZlID0gdHJ1ZTtcblxuZnVuY3Rpb24gdG9nZ2xlT2JzZXJ2aW5nICh2YWx1ZSkge1xuICBzaG91bGRPYnNlcnZlID0gdmFsdWU7XG59XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBpcyBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoIHVwZGF0ZXMuXG4gKi9cbnZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICB0aGlzLnZtQ291bnQgPSAwO1xuICBkZWYodmFsdWUsICdfX29iX18nLCB0aGlzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgaWYgKGhhc1Byb3RvKSB7XG4gICAgICBwcm90b0F1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvcHlBdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7XG4gICAgfVxuICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndhbGsodmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIFdhbGsgdGhyb3VnaCBhbGwgcHJvcGVydGllcyBhbmQgY29udmVydCB0aGVtIGludG9cbiAqIGdldHRlci9zZXR0ZXJzLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlblxuICogdmFsdWUgdHlwZSBpcyBPYmplY3QuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gd2FsayAob2JqKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUob2JqLCBrZXlzW2ldKTtcbiAgfVxufTtcblxuLyoqXG4gKiBPYnNlcnZlIGEgbGlzdCBvZiBBcnJheSBpdGVtcy5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IGZ1bmN0aW9uIG9ic2VydmVBcnJheSAoaXRlbXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvYnNlcnZlKGl0ZW1zW2ldKTtcbiAgfVxufTtcblxuLy8gaGVscGVyc1xuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG59XG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgZGVmaW5pbmdcbiAqIGhpZGRlbiBwcm9wZXJ0aWVzLlxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gY29weUF1Z21lbnQgKHRhcmdldCwgc3JjLCBrZXlzKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHQgdG8gY3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGZvciBhIHZhbHVlLFxuICogcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGlmIHN1Y2Nlc3NmdWxseSBvYnNlcnZlZCxcbiAqIG9yIHRoZSBleGlzdGluZyBvYnNlcnZlciBpZiB0aGUgdmFsdWUgYWxyZWFkeSBoYXMgb25lLlxuICovXG5mdW5jdGlvbiBvYnNlcnZlICh2YWx1ZSwgYXNSb290RGF0YSkge1xuICBpZiAoIWlzT2JqZWN0JDEodmFsdWUpIHx8IHZhbHVlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2I7XG4gIGlmIChoYXNPd24kNSh2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgc2hvdWxkT2JzZXJ2ZSAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlcixcbiAgc2hhbGxvd1xuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgdmFyIHNldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LnNldDtcbiAgaWYgKCghZ2V0dGVyIHx8IHNldHRlcikgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHZhbCA9IG9ialtrZXldO1xuICB9XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICAvLyAjNzk4MTogZm9yIGFjY2Vzc29yIHByb3BlcnRpZXMgd2l0aG91dCBzZXR0ZXJcbiAgICAgIGlmIChnZXR0ZXIgJiYgIXNldHRlcikgeyByZXR1cm4gfVxuICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICBzZXR0ZXIuY2FsbChvYmosIG5ld1ZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBuZXdWYWw7XG4gICAgICB9XG4gICAgICBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZShuZXdWYWwpO1xuICAgICAgZGVwLm5vdGlmeSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG4gKiB0cmlnZ2VycyBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0XG4gKiBhbHJlYWR5IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWwpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IHNldCByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0Lmxlbmd0aCA9IE1hdGgubWF4KHRhcmdldC5sZW5ndGgsIGtleSk7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEsIHZhbCk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmIChrZXkgaW4gdGFyZ2V0ICYmICEoa2V5IGluIE9iamVjdC5wcm90b3R5cGUpKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGFkZGluZyByZWFjdGl2ZSBwcm9wZXJ0aWVzIHRvIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLidcbiAgICApO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoIW9iKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGRlZmluZVJlYWN0aXZlKG9iLnZhbHVlLCBrZXksIHZhbCk7XG4gIG9iLmRlcC5ub3RpZnkoKTtcbiAgcmV0dXJuIHZhbFxufVxuXG4vKipcbiAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIGRlbCAodGFyZ2V0LCBrZXkpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IGRlbGV0ZSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEpO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGRlbGV0aW5nIHByb3BlcnRpZXMgb24gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnLSBqdXN0IHNldCBpdCB0byBudWxsLidcbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICghaGFzT3duJDUodGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XG4gICAgaWYgKCF2bSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiICtcbiAgICAgICAgJ2NyZWF0aW9uIHdpdGggdGhlIGBuZXdgIGtleXdvcmQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRTdHJhdChwYXJlbnQsIGNoaWxkKVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuICovXG5mdW5jdGlvbiBtZXJnZURhdGEgKHRvLCBmcm9tKSB7XG4gIGlmICghZnJvbSkgeyByZXR1cm4gdG8gfVxuICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDtcblxuICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgID8gUmVmbGVjdC5vd25LZXlzKGZyb20pXG4gICAgOiBPYmplY3Qua2V5cyhmcm9tKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIC8vIGluIGNhc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IG9ic2VydmVkLi4uXG4gICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgIHRvVmFsID0gdG9ba2V5XTtcbiAgICBmcm9tVmFsID0gZnJvbVtrZXldO1xuICAgIGlmICghaGFzT3duJDUodG8sIGtleSkpIHtcbiAgICAgIHNldCh0bywga2V5LCBmcm9tVmFsKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgdG9WYWwgIT09IGZyb21WYWwgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QodG9WYWwpICYmXG4gICAgICBpc1BsYWluT2JqZWN0KGZyb21WYWwpXG4gICAgKSB7XG4gICAgICBtZXJnZURhdGEodG9WYWwsIGZyb21WYWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBEYXRhXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YU9yRm4gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICAvLyBpbiBhIFZ1ZS5leHRlbmQgbWVyZ2UsIGJvdGggc2hvdWxkIGJlIGZ1bmN0aW9uc1xuICAgIGlmICghY2hpbGRWYWwpIHtcbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgIH1cbiAgICAvLyB3aGVuIHBhcmVudFZhbCAmIGNoaWxkVmFsIGFyZSBib3RoIHByZXNlbnQsXG4gICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gICAgLy8gbWVyZ2VkIHJlc3VsdCBvZiBib3RoIGZ1bmN0aW9ucy4uLiBubyBuZWVkIHRvXG4gICAgLy8gY2hlY2sgaWYgcGFyZW50VmFsIGlzIGEgZnVuY3Rpb24gaGVyZSBiZWNhdXNlXG4gICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbiAoKSB7XG4gICAgICByZXR1cm4gbWVyZ2VEYXRhKFxuICAgICAgICB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbicgPyBjaGlsZFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogY2hpbGRWYWwsXG4gICAgICAgIHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbicgPyBwYXJlbnRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IHBhcmVudFZhbFxuICAgICAgKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkSW5zdGFuY2VEYXRhRm4gKCkge1xuICAgICAgLy8gaW5zdGFuY2UgbWVyZ2VcbiAgICAgIHZhciBpbnN0YW5jZURhdGEgPSB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBjaGlsZFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBjaGlsZFZhbDtcbiAgICAgIHZhciBkZWZhdWx0RGF0YSA9IHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwYXJlbnRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogcGFyZW50VmFsO1xuICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VEYXRhKGluc3RhbmNlRGF0YSwgZGVmYXVsdERhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdERhdGFcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuc3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIGlmIChjaGlsZFZhbCAmJiB0eXBlb2YgY2hpbGRWYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ1RoZSBcImRhdGFcIiBvcHRpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb24gJyArXG4gICAgICAgICd0aGF0IHJldHVybnMgYSBwZXItaW5zdGFuY2UgdmFsdWUgaW4gY29tcG9uZW50ICcgK1xuICAgICAgICAnZGVmaW5pdGlvbnMuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbClcbiAgfVxuXG4gIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKVxufTtcblxuLyoqXG4gKiBIb29rcyBhbmQgcHJvcHMgYXJlIG1lcmdlZCBhcyBhcnJheXMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlSG9vayAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWxcbikge1xuICB2YXIgcmVzID0gY2hpbGRWYWxcbiAgICA/IHBhcmVudFZhbFxuICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkVmFsKVxuICAgICAgICA/IGNoaWxkVmFsXG4gICAgICAgIDogW2NoaWxkVmFsXVxuICAgIDogcGFyZW50VmFsO1xuICByZXR1cm4gcmVzXG4gICAgPyBkZWR1cGVIb29rcyhyZXMpXG4gICAgOiByZXNcbn1cblxuZnVuY3Rpb24gZGVkdXBlSG9va3MgKGhvb2tzKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChyZXMuaW5kZXhPZihob29rc1tpXSkgPT09IC0xKSB7XG4gICAgICByZXMucHVzaChob29rc1tpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuTElGRUNZQ0xFX0hPT0tTLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgc3RyYXRzW2hvb2tdID0gbWVyZ2VIb29rO1xufSk7XG5cbi8qKlxuICogQXNzZXRzXG4gKlxuICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICogb3B0aW9ucyBhbmQgcGFyZW50IG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQXNzZXRzIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKTtcbiAgaWYgKGNoaWxkVmFsKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgICByZXR1cm4gZXh0ZW5kKHJlcywgY2hpbGRWYWwpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbkFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7XG59KTtcblxuLyoqXG4gKiBXYXRjaGVycy5cbiAqXG4gKiBXYXRjaGVycyBoYXNoZXMgc2hvdWxkIG5vdCBvdmVyd3JpdGUgb25lXG4gKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAqL1xuc3RyYXRzLndhdGNoID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgLy8gd29yayBhcm91bmQgRmlyZWZveCdzIE9iamVjdC5wcm90b3R5cGUud2F0Y2guLi5cbiAgaWYgKHBhcmVudFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgcGFyZW50VmFsID0gdW5kZWZpbmVkOyB9XG4gIGlmIChjaGlsZFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgY2hpbGRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0ge307XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGZvciAodmFyIGtleSQxIGluIGNoaWxkVmFsKSB7XG4gICAgdmFyIHBhcmVudCA9IHJldFtrZXkkMV07XG4gICAgdmFyIGNoaWxkID0gY2hpbGRWYWxba2V5JDFdO1xuICAgIGlmIChwYXJlbnQgJiYgIUFycmF5LmlzQXJyYXkocGFyZW50KSkge1xuICAgICAgcGFyZW50ID0gW3BhcmVudF07XG4gICAgfVxuICAgIHJldFtrZXkkMV0gPSBwYXJlbnRcbiAgICAgID8gcGFyZW50LmNvbmNhdChjaGlsZClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZCkgPyBjaGlsZCA6IFtjaGlsZF07XG4gIH1cbiAgcmV0dXJuIHJldFxufTtcblxuLyoqXG4gKiBPdGhlciBvYmplY3QgaGFzaGVzLlxuICovXG5zdHJhdHMucHJvcHMgPVxuc3RyYXRzLm1ldGhvZHMgPVxuc3RyYXRzLmluamVjdCA9XG5zdHJhdHMuY29tcHV0ZWQgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICBpZiAoY2hpbGRWYWwgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBpZiAoY2hpbGRWYWwpIHsgZXh0ZW5kKHJldCwgY2hpbGRWYWwpOyB9XG4gIHJldHVybiByZXRcbn07XG5zdHJhdHMucHJvdmlkZSA9IG1lcmdlRGF0YU9yRm47XG5cbi8qKlxuICogRGVmYXVsdCBzdHJhdGVneS5cbiAqL1xudmFyIGRlZmF1bHRTdHJhdCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsKSB7XG4gIHJldHVybiBjaGlsZFZhbCA9PT0gdW5kZWZpbmVkXG4gICAgPyBwYXJlbnRWYWxcbiAgICA6IGNoaWxkVmFsXG59O1xuXG4vKipcbiAqIFZhbGlkYXRlIGNvbXBvbmVudCBuYW1lc1xuICovXG5mdW5jdGlvbiBjaGVja0NvbXBvbmVudHMgKG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMuY29tcG9uZW50cykge1xuICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ29tcG9uZW50TmFtZSAobmFtZSkge1xuICBpZiAoIW5ldyBSZWdFeHAoKFwiXlthLXpBLVpdW1xcXFwtXFxcXC4wLTlfXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCJdKiRcIikpLnRlc3QobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgY29tcG9uZW50IG5hbWU6IFwiJyArIG5hbWUgKyAnXCIuIENvbXBvbmVudCBuYW1lcyAnICtcbiAgICAgICdzaG91bGQgY29uZm9ybSB0byB2YWxpZCBjdXN0b20gZWxlbWVudCBuYW1lIGluIGh0bWw1IHNwZWNpZmljYXRpb24uJ1xuICAgICk7XG4gIH1cbiAgaWYgKGlzQnVpbHRJblRhZyhuYW1lKSB8fCBjb25maWcuaXNSZXNlcnZlZFRhZyhuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCAnICtcbiAgICAgICdpZDogJyArIG5hbWVcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogRW5zdXJlIGFsbCBwcm9wcyBvcHRpb24gc3ludGF4IGFyZSBub3JtYWxpemVkIGludG8gdGhlXG4gKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyAob3B0aW9ucywgdm0pIHtcbiAgdmFyIHByb3BzID0gb3B0aW9ucy5wcm9wcztcbiAgaWYgKCFwcm9wcykgeyByZXR1cm4gfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBpLCB2YWwsIG5hbWU7XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFsID0gcHJvcHNbaV07XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbmFtZSA9IGNhbWVsaXplKHZhbCk7XG4gICAgICAgIHJlc1tuYW1lXSA9IHsgdHlwZTogbnVsbCB9O1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oJ3Byb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIHZhbCA9IHByb3BzW2tleV07XG4gICAgICBuYW1lID0gY2FtZWxpemUoa2V5KTtcbiAgICAgIHJlc1tuYW1lXSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IHZhbFxuICAgICAgICA6IHsgdHlwZTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcInByb3BzXFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHByb3BzKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICBvcHRpb25zLnByb3BzID0gcmVzO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhbGwgaW5qZWN0aW9ucyBpbnRvIE9iamVjdC1iYXNlZCBmb3JtYXRcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0IChvcHRpb25zLCB2bSkge1xuICB2YXIgaW5qZWN0ID0gb3B0aW9ucy5pbmplY3Q7XG4gIGlmICghaW5qZWN0KSB7IHJldHVybiB9XG4gIHZhciBub3JtYWxpemVkID0gb3B0aW9ucy5pbmplY3QgPSB7fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5qZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBub3JtYWxpemVkW2luamVjdFtpXV0gPSB7IGZyb206IGluamVjdFtpXSB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5qZWN0KSB7XG4gICAgICB2YXIgdmFsID0gaW5qZWN0W2tleV07XG4gICAgICBub3JtYWxpemVkW2tleV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyBleHRlbmQoeyBmcm9tOiBrZXkgfSwgdmFsKVxuICAgICAgICA6IHsgZnJvbTogdmFsIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcImluamVjdFxcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShpbmplY3QpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTm9ybWFsaXplIHJhdyBmdW5jdGlvbiBkaXJlY3RpdmVzIGludG8gb2JqZWN0IGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyAob3B0aW9ucykge1xuICB2YXIgZGlycyA9IG9wdGlvbnMuZGlyZWN0aXZlcztcbiAgaWYgKGRpcnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGlycykge1xuICAgICAgdmFyIGRlZiA9IGRpcnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGRpcnNba2V5XSA9IHsgYmluZDogZGVmLCB1cGRhdGU6IGRlZiB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRPYmplY3RUeXBlIChuYW1lLCB2YWx1ZSwgdm0pIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiOiBleHBlY3RlZCBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUodmFsdWUpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9wdGlvbiBvYmplY3RzIGludG8gYSBuZXcgb25lLlxuICogQ29yZSB1dGlsaXR5IHVzZWQgaW4gYm90aCBpbnN0YW50aWF0aW9uIGFuZCBpbmhlcml0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VPcHRpb25zIChcbiAgcGFyZW50LFxuICBjaGlsZCxcbiAgdm1cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNoZWNrQ29tcG9uZW50cyhjaGlsZCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGNoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2hpbGQgPSBjaGlsZC5vcHRpb25zO1xuICB9XG5cbiAgbm9ybWFsaXplUHJvcHMoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplSW5qZWN0KGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZURpcmVjdGl2ZXMoY2hpbGQpO1xuXG4gIC8vIEFwcGx5IGV4dGVuZHMgYW5kIG1peGlucyBvbiB0aGUgY2hpbGQgb3B0aW9ucyxcbiAgLy8gYnV0IG9ubHkgaWYgaXQgaXMgYSByYXcgb3B0aW9ucyBvYmplY3QgdGhhdCBpc24ndFxuICAvLyB0aGUgcmVzdWx0IG9mIGFub3RoZXIgbWVyZ2VPcHRpb25zIGNhbGwuXG4gIC8vIE9ubHkgbWVyZ2VkIG9wdGlvbnMgaGFzIHRoZSBfYmFzZSBwcm9wZXJ0eS5cbiAgaWYgKCFjaGlsZC5fYmFzZSkge1xuICAgIGlmIChjaGlsZC5leHRlbmRzKSB7XG4gICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5leHRlbmRzLCB2bSk7XG4gICAgfVxuICAgIGlmIChjaGlsZC5taXhpbnMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBwYXJlbnQgPSBtZXJnZU9wdGlvbnMocGFyZW50LCBjaGlsZC5taXhpbnNbaV0sIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IHt9O1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBwYXJlbnQpIHtcbiAgICBtZXJnZUZpZWxkKGtleSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gY2hpbGQpIHtcbiAgICBpZiAoIWhhc093biQ1KHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093biQ1KGFzc2V0cywgaWQpKSB7IHJldHVybiBhc3NldHNbaWRdIH1cbiAgdmFyIGNhbWVsaXplZElkID0gY2FtZWxpemUoaWQpO1xuICBpZiAoaGFzT3duJDUoYXNzZXRzLCBjYW1lbGl6ZWRJZCkpIHsgcmV0dXJuIGFzc2V0c1tjYW1lbGl6ZWRJZF0gfVxuICB2YXIgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7XG4gIGlmIChoYXNPd24kNShhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuICB2YXIgYWJzZW50ID0gIWhhc093biQ1KHByb3BzRGF0YSwga2V5KTtcbiAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gIC8vIGJvb2xlYW4gY2FzdGluZ1xuICB2YXIgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7XG4gIGlmIChib29sZWFuSW5kZXggPiAtMSkge1xuICAgIGlmIChhYnNlbnQgJiYgIWhhc093biQ1KHByb3AsICdkZWZhdWx0JykpIHtcbiAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSB7XG4gICAgICAvLyBvbmx5IGNhc3QgZW1wdHkgc3RyaW5nIC8gc2FtZSBuYW1lIHRvIGJvb2xlYW4gaWZcbiAgICAgIC8vIGJvb2xlYW4gaGFzIGhpZ2hlciBwcmlvcml0eVxuICAgICAgdmFyIHN0cmluZ0luZGV4ID0gZ2V0VHlwZUluZGV4KFN0cmluZywgcHJvcC50eXBlKTtcbiAgICAgIGlmIChzdHJpbmdJbmRleCA8IDAgfHwgYm9vbGVhbkluZGV4IDwgc3RyaW5nSW5kZXgpIHtcbiAgICAgICAgdmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBjaGVjayBkZWZhdWx0IHZhbHVlXG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsdWUgPSBnZXRQcm9wRGVmYXVsdFZhbHVlKHZtLCBwcm9wLCBrZXkpO1xuICAgIC8vIHNpbmNlIHRoZSBkZWZhdWx0IHZhbHVlIGlzIGEgZnJlc2ggY29weSxcbiAgICAvLyBtYWtlIHN1cmUgdG8gb2JzZXJ2ZSBpdC5cbiAgICB2YXIgcHJldlNob3VsZE9ic2VydmUgPSBzaG91bGRPYnNlcnZlO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICBvYnNlcnZlKHZhbHVlKTtcbiAgICB0b2dnbGVPYnNlcnZpbmcocHJldlNob3VsZE9ic2VydmUpO1xuICB9XG4gIGlmIChcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgLy8gc2tpcCB2YWxpZGF0aW9uIGZvciB3ZWV4IHJlY3ljbGUtbGlzdCBjaGlsZCBjb21wb25lbnQgcHJvcHNcbiAgICAhKGZhbHNlKVxuICApIHtcbiAgICBhc3NlcnRQcm9wKHByb3AsIGtleSwgdmFsdWUsIHZtLCBhYnNlbnQpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUgKHZtLCBwcm9wLCBrZXkpIHtcbiAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICBpZiAoIWhhc093biQ1KHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc09iamVjdCQxKGRlZikpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgZGVmYXVsdCB2YWx1ZSBmb3IgcHJvcCBcIicgKyBrZXkgKyAnXCI6ICcgK1xuICAgICAgJ1Byb3BzIHdpdGggdHlwZSBPYmplY3QvQXJyYXkgbXVzdCB1c2UgYSBmYWN0b3J5IGZ1bmN0aW9uICcgK1xuICAgICAgJ3RvIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZS4nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHRoZSByYXcgcHJvcCB2YWx1ZSB3YXMgYWxzbyB1bmRlZmluZWQgZnJvbSBwcmV2aW91cyByZW5kZXIsXG4gIC8vIHJldHVybiBwcmV2aW91cyBkZWZhdWx0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdhdGNoZXIgdHJpZ2dlclxuICBpZiAodm0gJiYgdm0uJG9wdGlvbnMucHJvcHNEYXRhICYmXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhW2tleV0gPT09IHVuZGVmaW5lZCAmJlxuICAgIHZtLl9wcm9wc1trZXldICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgcmV0dXJuIHZtLl9wcm9wc1trZXldXG4gIH1cbiAgLy8gY2FsbCBmYWN0b3J5IGZ1bmN0aW9uIGZvciBub24tRnVuY3Rpb24gdHlwZXNcbiAgLy8gYSB2YWx1ZSBpcyBGdW5jdGlvbiBpZiBpdHMgcHJvdG90eXBlIGlzIGZ1bmN0aW9uIGV2ZW4gYWNyb3NzIGRpZmZlcmVudCBleGVjdXRpb24gY29udGV4dFxuICByZXR1cm4gdHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBnZXRUeXBlKHByb3AudHlwZSkgIT09ICdGdW5jdGlvbidcbiAgICA/IGRlZi5jYWxsKHZtKVxuICAgIDogZGVmXG59XG5cbi8qKlxuICogQXNzZXJ0IHdoZXRoZXIgYSBwcm9wIGlzIHZhbGlkLlxuICovXG5mdW5jdGlvbiBhc3NlcnRQcm9wIChcbiAgcHJvcCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIHZtLFxuICBhYnNlbnRcbikge1xuICBpZiAocHJvcC5yZXF1aXJlZCAmJiBhYnNlbnQpIHtcbiAgICB3YXJuKFxuICAgICAgJ01pc3NpbmcgcmVxdWlyZWQgcHJvcDogXCInICsgbmFtZSArICdcIicsXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdHlwZSA9IHByb3AudHlwZTtcbiAgdmFyIHZhbGlkID0gIXR5cGUgfHwgdHlwZSA9PT0gdHJ1ZTtcbiAgdmFyIGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgaWYgKHR5cGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICAgIHR5cGUgPSBbdHlwZV07XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZS5sZW5ndGggJiYgIXZhbGlkOyBpKyspIHtcbiAgICAgIHZhciBhc3NlcnRlZFR5cGUgPSBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlW2ldKTtcbiAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChhc3NlcnRlZFR5cGUuZXhwZWN0ZWRUeXBlIHx8ICcnKTtcbiAgICAgIHZhbGlkID0gYXNzZXJ0ZWRUeXBlLnZhbGlkO1xuICAgIH1cbiAgfVxuXG4gIGlmICghdmFsaWQpIHtcbiAgICB3YXJuKFxuICAgICAgZ2V0SW52YWxpZFR5cGVNZXNzYWdlKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdmFsaWRhdG9yID0gcHJvcC52YWxpZGF0b3I7XG4gIGlmICh2YWxpZGF0b3IpIHtcbiAgICBpZiAoIXZhbGlkYXRvcih2YWx1ZSkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdJbnZhbGlkIHByb3A6IGN1c3RvbSB2YWxpZGF0b3IgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJyArIG5hbWUgKyAnXCIuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbnZhciBzaW1wbGVDaGVja1JFID0gL14oU3RyaW5nfE51bWJlcnxCb29sZWFufEZ1bmN0aW9ufFN5bWJvbCkkLztcblxuZnVuY3Rpb24gYXNzZXJ0VHlwZSAodmFsdWUsIHR5cGUpIHtcbiAgdmFyIHZhbGlkO1xuICB2YXIgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZSh0eXBlKTtcbiAgaWYgKHNpbXBsZUNoZWNrUkUudGVzdChleHBlY3RlZFR5cGUpKSB7XG4gICAgdmFyIHQgPSB0eXBlb2YgdmFsdWU7XG4gICAgdmFsaWQgPSB0ID09PSBleHBlY3RlZFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAvLyBmb3IgcHJpbWl0aXZlIHdyYXBwZXIgb2JqZWN0c1xuICAgIGlmICghdmFsaWQgJiYgdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdPYmplY3QnKSB7XG4gICAgdmFsaWQgPSBpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdBcnJheScpIHtcbiAgICB2YWxpZCA9IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICB9XG4gIHJldHVybiB7XG4gICAgdmFsaWQ6IHZhbGlkLFxuICAgIGV4cGVjdGVkVHlwZTogZXhwZWN0ZWRUeXBlXG4gIH1cbn1cblxuLyoqXG4gKiBVc2UgZnVuY3Rpb24gc3RyaW5nIG5hbWUgdG8gY2hlY2sgYnVpbHQtaW4gdHlwZXMsXG4gKiBiZWNhdXNlIGEgc2ltcGxlIGVxdWFsaXR5IGNoZWNrIHdpbGwgZmFpbCB3aGVuIHJ1bm5pbmdcbiAqIGFjcm9zcyBkaWZmZXJlbnQgdm1zIC8gaWZyYW1lcy5cbiAqL1xuZnVuY3Rpb24gZ2V0VHlwZSAoZm4pIHtcbiAgdmFyIG1hdGNoID0gZm4gJiYgZm4udG9TdHJpbmcoKS5tYXRjaCgvXlxccypmdW5jdGlvbiAoXFx3KykvKTtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiAnJ1xufVxuXG5mdW5jdGlvbiBpc1NhbWVUeXBlIChhLCBiKSB7XG4gIHJldHVybiBnZXRUeXBlKGEpID09PSBnZXRUeXBlKGIpXG59XG5cbmZ1bmN0aW9uIGdldFR5cGVJbmRleCAodHlwZSwgZXhwZWN0ZWRUeXBlcykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoZXhwZWN0ZWRUeXBlcykpIHtcbiAgICByZXR1cm4gaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzLCB0eXBlKSA/IDAgOiAtMVxuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBleHBlY3RlZFR5cGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlc1tpXSwgdHlwZSkpIHtcbiAgICAgIHJldHVybiBpXG4gICAgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG5mdW5jdGlvbiBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UgKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSB7XG4gIHZhciBtZXNzYWdlID0gXCJJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIuXCIgK1xuICAgIFwiIEV4cGVjdGVkIFwiICsgKGV4cGVjdGVkVHlwZXMubWFwKGNhcGl0YWxpemUpLmpvaW4oJywgJykpO1xuICB2YXIgZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBlc1swXTtcbiAgdmFyIHJlY2VpdmVkVHlwZSA9IHRvUmF3VHlwZSh2YWx1ZSk7XG4gIHZhciBleHBlY3RlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgZXhwZWN0ZWRUeXBlKTtcbiAgdmFyIHJlY2VpdmVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCByZWNlaXZlZFR5cGUpO1xuICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgZXhwZWN0ZWQgdmFsdWVcbiAgaWYgKGV4cGVjdGVkVHlwZXMubGVuZ3RoID09PSAxICYmXG4gICAgICBpc0V4cGxpY2FibGUoZXhwZWN0ZWRUeXBlKSAmJlxuICAgICAgIWlzQm9vbGVhbiQxKGV4cGVjdGVkVHlwZSwgcmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCIgd2l0aCB2YWx1ZSBcIiArIGV4cGVjdGVkVmFsdWU7XG4gIH1cbiAgbWVzc2FnZSArPSBcIiwgZ290IFwiICsgcmVjZWl2ZWRUeXBlICsgXCIgXCI7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxuICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IFwid2l0aCB2YWx1ZSBcIiArIHJlY2VpdmVkVmFsdWUgKyBcIi5cIjtcbiAgfVxuICByZXR1cm4gbWVzc2FnZVxufVxuXG5mdW5jdGlvbiBzdHlsZVZhbHVlICh2YWx1ZSwgdHlwZSkge1xuICBpZiAodHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICByZXR1cm4gKFwiXFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIilcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnTnVtYmVyJykge1xuICAgIHJldHVybiAoXCJcIiArIChOdW1iZXIodmFsdWUpKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiXCIgKyB2YWx1ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0V4cGxpY2FibGUgKHZhbHVlKSB7XG4gIHZhciBleHBsaWNpdFR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcbiAgcmV0dXJuIGV4cGxpY2l0VHlwZXMuc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbTsgfSlcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuJDEgKCkge1xuICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gIHJldHVybiBhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nOyB9KVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgLy8gRGVhY3RpdmF0ZSBkZXBzIHRyYWNraW5nIHdoaWxlIHByb2Nlc3NpbmcgZXJyb3IgaGFuZGxlciB0byBhdm9pZCBwb3NzaWJsZSBpbmZpbml0ZSByZW5kZXJpbmcuXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXgvaXNzdWVzLzE1MDVcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIGlmICh2bSkge1xuICAgICAgdmFyIGN1ciA9IHZtO1xuICAgICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgICAgdmFyIGhvb2tzID0gY3VyLiRvcHRpb25zLmVycm9yQ2FwdHVyZWQ7XG4gICAgICAgIGlmIChob29rcykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTtcbiAgICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pO1xuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZVdpdGhFcnJvckhhbmRsaW5nIChcbiAgaGFuZGxlcixcbiAgY29udGV4dCxcbiAgYXJncyxcbiAgdm0sXG4gIGluZm9cbikge1xuICB2YXIgcmVzO1xuICB0cnkge1xuICAgIHJlcyA9IGFyZ3MgPyBoYW5kbGVyLmFwcGx5KGNvbnRleHQsIGFyZ3MpIDogaGFuZGxlci5jYWxsKGNvbnRleHQpO1xuICAgIGlmIChyZXMgJiYgIXJlcy5faXNWdWUgJiYgaXNQcm9taXNlKHJlcykgJiYgIXJlcy5faGFuZGxlZCkge1xuICAgICAgcmVzLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyArIFwiIChQcm9taXNlL2FzeW5jKVwiKTsgfSk7XG4gICAgICAvLyBpc3N1ZSAjOTUxMVxuICAgICAgLy8gYXZvaWQgY2F0Y2ggdHJpZ2dlcmluZyBtdWx0aXBsZSB0aW1lcyB3aGVuIG5lc3RlZCBjYWxsc1xuICAgICAgcmVzLl9oYW5kbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnbG9iYWxIYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGVyciwgdm0sIGluZm8pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gaWYgdGhlIHVzZXIgaW50ZW50aW9uYWxseSB0aHJvd3MgdGhlIG9yaWdpbmFsIGVycm9yIGluIHRoZSBoYW5kbGVyLFxuICAgICAgLy8gZG8gbm90IGxvZyBpdCB0d2ljZVxuICAgICAgaWYgKGUgIT09IGVycikge1xuICAgICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIG1pY3JvdGFza3MuXG4vLyBJbiAyLjUgd2UgdXNlZCAobWFjcm8pIHRhc2tzIChpbiBjb21iaW5hdGlvbiB3aXRoIG1pY3JvdGFza3MpLlxuLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcbi8vIChlLmcuICM2ODEzLCBvdXQtaW4gdHJhbnNpdGlvbnMpLlxuLy8gQWxzbywgdXNpbmcgKG1hY3JvKSB0YXNrcyBpbiBldmVudCBoYW5kbGVyIHdvdWxkIGNhdXNlIHNvbWUgd2VpcmQgYmVoYXZpb3JzXG4vLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cbi8vIFNvIHdlIG5vdyB1c2UgbWljcm90YXNrcyBldmVyeXdoZXJlLCBhZ2Fpbi5cbi8vIEEgbWFqb3IgZHJhd2JhY2sgb2YgdGhpcyB0cmFkZW9mZiBpcyB0aGF0IHRoZXJlIGFyZSBzb21lIHNjZW5hcmlvc1xuLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4vLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTAsIHdoaWNoIGhhdmUgd29ya2Fyb3VuZHMpXG4vLyBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWUgZXZlbnQgKCM2NTY2KS5cbnZhciB0aW1lckZ1bmM7XG5cbi8vIFRoZSBuZXh0VGljayBiZWhhdmlvciBsZXZlcmFnZXMgdGhlIG1pY3JvdGFzayBxdWV1ZSwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkXG4vLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuLy8gVUlXZWJWaWV3IGluIGlPUyA+PSA5LjMuMyB3aGVuIHRyaWdnZXJlZCBpbiB0b3VjaCBldmVudCBoYW5kbGVycy4gSXRcbi8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcbi8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0LCAkZmxvdy1kaXNhYmxlLWxpbmUgKi9cbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gSW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xufSBlbHNlIGlmICghaXNJRSAmJiB0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgKFxuICBpc05hdGl2ZShNdXRhdGlvbk9ic2VydmVyKSB8fFxuICAvLyBQaGFudG9tSlMgYW5kIGlPUyA3LnhcbiAgTXV0YXRpb25PYnNlcnZlci50b1N0cmluZygpID09PSAnW29iamVjdCBNdXRhdGlvbk9ic2VydmVyQ29uc3RydWN0b3JdJ1xuKSkge1xuICAvLyBVc2UgTXV0YXRpb25PYnNlcnZlciB3aGVyZSBuYXRpdmUgUHJvbWlzZSBpcyBub3QgYXZhaWxhYmxlLFxuICAvLyBlLmcuIFBoYW50b21KUywgaU9TNywgQW5kcm9pZCA0LjRcbiAgLy8gKCM2NDY2IE11dGF0aW9uT2JzZXJ2ZXIgaXMgdW5yZWxpYWJsZSBpbiBJRTExKVxuICB2YXIgY291bnRlciA9IDE7XG4gIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoQ2FsbGJhY2tzKTtcbiAgdmFyIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKGNvdW50ZXIpKTtcbiAgb2JzZXJ2ZXIub2JzZXJ2ZSh0ZXh0Tm9kZSwge1xuICAgIGNoYXJhY3RlckRhdGE6IHRydWVcbiAgfSk7XG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb3VudGVyID0gKGNvdW50ZXIgKyAxKSAlIDI7XG4gICAgdGV4dE5vZGUuZGF0YSA9IFN0cmluZyhjb3VudGVyKTtcbiAgfTtcbn0gZWxzZSBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoc2V0SW1tZWRpYXRlKSkge1xuICAvLyBGYWxsYmFjayB0byBzZXRJbW1lZGlhdGUuXG4gIC8vIFRlY2hpbmljYWxseSBpdCBsZXZlcmFnZXMgdGhlIChtYWNybykgdGFzayBxdWV1ZSxcbiAgLy8gYnV0IGl0IGlzIHN0aWxsIGEgYmV0dGVyIGNob2ljZSB0aGFuIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRJbW1lZGlhdGUoZmx1c2hDYWxsYmFja3MpO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gRmFsbGJhY2sgdG8gc2V0VGltZW91dC5cbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHNldFRpbWVvdXQoZmx1c2hDYWxsYmFja3MsIDApO1xuICB9O1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayAoY2IsIGN0eCkge1xuICB2YXIgX3Jlc29sdmU7XG4gIGNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNiLmNhbGwoY3R4KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZSwgY3R4LCAnbmV4dFRpY2snKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKF9yZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZShjdHgpO1xuICAgIH1cbiAgfSk7XG4gIGlmICghcGVuZGluZykge1xuICAgIHBlbmRpbmcgPSB0cnVlO1xuICAgIHRpbWVyRnVuYygpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBpZiAoIWNiICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pXG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG52YXIgcmVmID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSAoXywgdm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICBpZiAob2xkVm5vZGUuZGF0YS5yZWYgIT09IHZub2RlLmRhdGEucmVmKSB7XG4gICAgICByZWdpc3RlclJlZihvbGRWbm9kZSwgdHJ1ZSk7XG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlLCB0cnVlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJSZWYgKHZub2RlLCBpc1JlbW92YWwpIHtcbiAgdmFyIGtleSA9IHZub2RlLmRhdGEucmVmO1xuICBpZiAoIWlzRGVmKGtleSkpIHsgcmV0dXJuIH1cblxuICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICB2YXIgcmVmID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgfHwgdm5vZGUuZWxtO1xuICB2YXIgcmVmcyA9IHZtLiRyZWZzO1xuICBpZiAoaXNSZW1vdmFsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgcmVtb3ZlKHJlZnNba2V5XSwgcmVmKTtcbiAgICB9IGVsc2UgaWYgKHJlZnNba2V5XSA9PT0gcmVmKSB7XG4gICAgICByZWZzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2bm9kZS5kYXRhLnJlZkluRm9yKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgICByZWZzW2tleV0gPSBbcmVmXTtcbiAgICAgIH0gZWxzZSBpZiAocmVmc1trZXldLmluZGV4T2YocmVmKSA8IDApIHtcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgIHJlZnNba2V5XS5wdXNoKHJlZik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZnNba2V5XSA9IHJlZjtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QkMSh2YWwpKSB8fCBPYmplY3QuaXNGcm96ZW4odmFsKSB8fCB2YWwgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWwuX19vYl9fKSB7XG4gICAgdmFyIGRlcElkID0gdmFsLl9fb2JfXy5kZXAuaWQ7XG4gICAgaWYgKHNlZW4uaGFzKGRlcElkKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHNlZW4uYWRkKGRlcElkKTtcbiAgfVxuICBpZiAoaXNBKSB7XG4gICAgaSA9IHZhbC5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2ldLCBzZWVuKTsgfVxuICB9IGVsc2Uge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgIGkgPSBrZXlzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxba2V5c1tpXV0sIHNlZW4pOyB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBNQVhfVVBEQVRFX0NPVU5UID0gMTAwO1xuXG52YXIgcXVldWUgPSBbXTtcbnZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xudmFyIGhhcyQxID0ge307XG52YXIgY2lyY3VsYXIgPSB7fTtcbnZhciB3YWl0aW5nID0gZmFsc2U7XG52YXIgZmx1c2hpbmcgPSBmYWxzZTtcbnZhciBpbmRleCA9IDA7XG5cbi8qKlxuICogUmVzZXQgdGhlIHNjaGVkdWxlcidzIHN0YXRlLlxuICovXG5mdW5jdGlvbiByZXNldFNjaGVkdWxlclN0YXRlICgpIHtcbiAgaW5kZXggPSBxdWV1ZS5sZW5ndGggPSBhY3RpdmF0ZWRDaGlsZHJlbi5sZW5ndGggPSAwO1xuICBoYXMkMSA9IHt9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNpcmN1bGFyID0ge307XG4gIH1cbiAgd2FpdGluZyA9IGZsdXNoaW5nID0gZmFsc2U7XG59XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSAjNjU2NiByZXF1aXJlcyBzYXZpbmcgdGhlIHRpbWVzdGFtcCB3aGVuIGV2ZW50IGxpc3RlbmVycyBhcmVcbi8vIGF0dGFjaGVkLiBIb3dldmVyLCBjYWxsaW5nIHBlcmZvcm1hbmNlLm5vdygpIGhhcyBhIHBlcmYgb3ZlcmhlYWQgZXNwZWNpYWxseVxuLy8gaWYgdGhlIHBhZ2UgaGFzIHRob3VzYW5kcyBvZiBldmVudCBsaXN0ZW5lcnMuIEluc3RlYWQsIHdlIHRha2UgYSB0aW1lc3RhbXBcbi8vIGV2ZXJ5IHRpbWUgdGhlIHNjaGVkdWxlciBmbHVzaGVzIGFuZCB1c2UgdGhhdCBmb3IgYWxsIGV2ZW50IGxpc3RlbmVyc1xuLy8gYXR0YWNoZWQgZHVyaW5nIHRoYXQgZmx1c2guXG52YXIgY3VycmVudEZsdXNoVGltZXN0YW1wID0gMDtcblxuLy8gQXN5bmMgZWRnZSBjYXNlIGZpeCByZXF1aXJlcyBzdG9yaW5nIGFuIGV2ZW50IGxpc3RlbmVyJ3MgYXR0YWNoIHRpbWVzdGFtcC5cbnZhciBnZXROb3cgPSBEYXRlLm5vdztcblxuLy8gRGV0ZXJtaW5lIHdoYXQgZXZlbnQgdGltZXN0YW1wIHRoZSBicm93c2VyIGlzIHVzaW5nLiBBbm5veWluZ2x5LCB0aGVcbi8vIHRpbWVzdGFtcCBjYW4gZWl0aGVyIGJlIGhpLXJlcyAocmVsYXRpdmUgdG8gcGFnZSBsb2FkKSBvciBsb3ctcmVzXG4vLyAocmVsYXRpdmUgdG8gVU5JWCBlcG9jaCksIHNvIGluIG9yZGVyIHRvIGNvbXBhcmUgdGltZSB3ZSBoYXZlIHRvIHVzZSB0aGVcbi8vIHNhbWUgdGltZXN0YW1wIHR5cGUgd2hlbiBzYXZpbmcgdGhlIGZsdXNoIHRpbWVzdGFtcC5cbi8vIEFsbCBJRSB2ZXJzaW9ucyB1c2UgbG93LXJlcyBldmVudCB0aW1lc3RhbXBzLCBhbmQgaGF2ZSBwcm9ibGVtYXRpYyBjbG9ja1xuLy8gaW1wbGVtZW50YXRpb25zICgjOTYzMilcbmlmIChpbkJyb3dzZXIgJiYgIWlzSUUpIHtcbiAgdmFyIHBlcmZvcm1hbmNlID0gd2luZG93LnBlcmZvcm1hbmNlO1xuICBpZiAoXG4gICAgcGVyZm9ybWFuY2UgJiZcbiAgICB0eXBlb2YgcGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nICYmXG4gICAgZ2V0Tm93KCkgPiBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKS50aW1lU3RhbXBcbiAgKSB7XG4gICAgLy8gaWYgdGhlIGV2ZW50IHRpbWVzdGFtcCwgYWx0aG91Z2ggZXZhbHVhdGVkIEFGVEVSIHRoZSBEYXRlLm5vdygpLCBpc1xuICAgIC8vIHNtYWxsZXIgdGhhbiBpdCwgaXQgbWVhbnMgdGhlIGV2ZW50IGlzIHVzaW5nIGEgaGktcmVzIHRpbWVzdGFtcCxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byB1c2UgdGhlIGhpLXJlcyB2ZXJzaW9uIGZvciBldmVudCBsaXN0ZW5lciB0aW1lc3RhbXBzIGFzXG4gICAgLy8gd2VsbC5cbiAgICBnZXROb3cgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTsgfTtcbiAgfVxufVxuXG4vKipcbiAqIEZsdXNoIGJvdGggcXVldWVzIGFuZCBydW4gdGhlIHdhdGNoZXJzLlxuICovXG5mdW5jdGlvbiBmbHVzaFNjaGVkdWxlclF1ZXVlICgpIHtcbiAgY3VycmVudEZsdXNoVGltZXN0YW1wID0gZ2V0Tm93KCk7XG4gIGZsdXNoaW5nID0gdHJ1ZTtcbiAgdmFyIHdhdGNoZXIsIGlkO1xuXG4gIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcblxuICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgaWYgKHdhdGNoZXIuYmVmb3JlKSB7XG4gICAgICB3YXRjaGVyLmJlZm9yZSgpO1xuICAgIH1cbiAgICBpZCA9IHdhdGNoZXIuaWQ7XG4gICAgaGFzJDFbaWRdID0gbnVsbDtcbiAgICB3YXRjaGVyLnJ1bigpO1xuICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBoYXMkMVtpZF0gIT0gbnVsbCkge1xuICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICA/IChcImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpXG4gICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBrZWVwIGNvcGllcyBvZiBwb3N0IHF1ZXVlcyBiZWZvcmUgcmVzZXR0aW5nIHN0YXRlXG4gIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7XG4gIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcblxuICAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3NcbiAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTtcbiAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpO1xuXG4gIC8vIGRldnRvb2wgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbFVwZGF0ZWRIb29rcyAocXVldWUpIHtcbiAgdmFyIGkgPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgIHZhciB2bSA9IHdhdGNoZXIudm07XG4gICAgaWYgKHZtLl93YXRjaGVyID09PSB3YXRjaGVyICYmIHZtLl9pc01vdW50ZWQgJiYgIXZtLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgY2FsbEhvb2sodm0sICd1cGRhdGVkJyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUXVldWUgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCB0aGF0IHdhcyBhY3RpdmF0ZWQgZHVyaW5nIHBhdGNoLlxuICogVGhlIHF1ZXVlIHdpbGwgYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSBlbnRpcmUgdHJlZSBoYXMgYmVlbiBwYXRjaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudCAodm0pIHtcbiAgLy8gc2V0dGluZyBfaW5hY3RpdmUgdG8gZmFsc2UgaGVyZSBzbyB0aGF0IGEgcmVuZGVyIGZ1bmN0aW9uIGNhblxuICAvLyByZWx5IG9uIGNoZWNraW5nIHdoZXRoZXIgaXQncyBpbiBhbiBpbmFjdGl2ZSB0cmVlIChlLmcuIHJvdXRlci12aWV3KVxuICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgYWN0aXZhdGVkQ2hpbGRyZW4ucHVzaCh2bSk7XG59XG5cbmZ1bmN0aW9uIGNhbGxBY3RpdmF0ZWRIb29rcyAocXVldWUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIHF1ZXVlW2ldLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChxdWV1ZVtpXSwgdHJ1ZSAvKiB0cnVlICovKTtcbiAgfVxufVxuXG4vKipcbiAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuXG4gKiBKb2JzIHdpdGggZHVwbGljYXRlIElEcyB3aWxsIGJlIHNraXBwZWQgdW5sZXNzIGl0J3NcbiAqIHB1c2hlZCB3aGVuIHRoZSBxdWV1ZSBpcyBiZWluZyBmbHVzaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZVdhdGNoZXIgKHdhdGNoZXIpIHtcbiAgdmFyIGlkID0gd2F0Y2hlci5pZDtcbiAgaWYgKGhhcyQxW2lkXSA9PSBudWxsKSB7XG4gICAgaGFzJDFbaWRdID0gdHJ1ZTtcbiAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykge1xuICAgICAgICBmbHVzaFNjaGVkdWxlclF1ZXVlKCk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgbmV4dFRpY2soZmx1c2hTY2hlZHVsZXJRdWV1ZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5cblxudmFyIHVpZCQxID0gMDtcblxuLyoqXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAqL1xudmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGNiLFxuICBvcHRpb25zLFxuICBpc1JlbmRlcldhdGNoZXJcbikge1xuICB0aGlzLnZtID0gdm07XG4gIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcbiAgICB2bS5fd2F0Y2hlciA9IHRoaXM7XG4gIH1cbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgICB0aGlzLmJlZm9yZSA9IG9wdGlvbnMuYmVmb3JlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGVlcCA9IHRoaXMudXNlciA9IHRoaXMubGF6eSA9IHRoaXMuc3luYyA9IGZhbHNlO1xuICB9XG4gIHRoaXMuY2IgPSBjYjtcbiAgdGhpcy5pZCA9ICsrdWlkJDE7IC8vIHVpZCBmb3IgYmF0Y2hpbmdcbiAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICB0aGlzLmRpcnR5ID0gdGhpcy5sYXp5OyAvLyBmb3IgbGF6eSB3YXRjaGVyc1xuICB0aGlzLmRlcHMgPSBbXTtcbiAgdGhpcy5uZXdEZXBzID0gW107XG4gIHRoaXMuZGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5uZXdEZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLmV4cHJlc3Npb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgPyBleHBPckZuLnRvU3RyaW5nKClcbiAgICA6ICcnO1xuICAvLyBwYXJzZSBleHByZXNzaW9uIGZvciBnZXR0ZXJcbiAgaWYgKHR5cGVvZiBleHBPckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBleHBPckZuO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZ2V0dGVyID0gcGFyc2VQYXRoKGV4cE9yRm4pO1xuICAgIGlmICghdGhpcy5nZXR0ZXIpIHtcbiAgICAgIHRoaXMuZ2V0dGVyID0gbm9vcDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgd2F0Y2hpbmcgcGF0aDogXFxcIlwiICsgZXhwT3JGbiArIFwiXFxcIiBcIiArXG4gICAgICAgICdXYXRjaGVyIG9ubHkgYWNjZXB0cyBzaW1wbGUgZG90LWRlbGltaXRlZCBwYXRocy4gJyArXG4gICAgICAgICdGb3IgZnVsbCBjb250cm9sLCB1c2UgYSBmdW5jdGlvbiBpbnN0ZWFkLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuICB0aGlzLnZhbHVlID0gdGhpcy5sYXp5XG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHRoaXMuZ2V0KCk7XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSBnZXR0ZXIsIGFuZCByZS1jb2xsZWN0IGRlcGVuZGVuY2llcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0ICgpIHtcbiAgcHVzaFRhcmdldCh0aGlzKTtcbiAgdmFyIHZhbHVlO1xuICB2YXIgdm0gPSB0aGlzLnZtO1xuICB0cnkge1xuICAgIHZhbHVlID0gdGhpcy5nZXR0ZXIuY2FsbCh2bSwgdm0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIChcImdldHRlciBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgLy8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXG4gICAgLy8gZGVwZW5kZW5jaWVzIGZvciBkZWVwIHdhdGNoaW5nXG4gICAgaWYgKHRoaXMuZGVlcCkge1xuICAgICAgdHJhdmVyc2UodmFsdWUpO1xuICAgIH1cbiAgICBwb3BUYXJnZXQoKTtcbiAgICB0aGlzLmNsZWFudXBEZXBzKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59O1xuXG4vKipcbiAqIEFkZCBhIGRlcGVuZGVuY3kgdG8gdGhpcyBkaXJlY3RpdmUuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmFkZERlcCA9IGZ1bmN0aW9uIGFkZERlcCAoZGVwKSB7XG4gIHZhciBpZCA9IGRlcC5pZDtcbiAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoaWQpKSB7XG4gICAgdGhpcy5uZXdEZXBJZHMuYWRkKGlkKTtcbiAgICB0aGlzLm5ld0RlcHMucHVzaChkZXApO1xuICAgIGlmICghdGhpcy5kZXBJZHMuaGFzKGlkKSkge1xuICAgICAgZGVwLmFkZFN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuY2xlYW51cERlcHMgPSBmdW5jdGlvbiBjbGVhbnVwRGVwcyAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBkZXAgPSB0aGlzLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkge1xuICAgICAgZGVwLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbiAgdmFyIHRtcCA9IHRoaXMuZGVwSWRzO1xuICB0aGlzLmRlcElkcyA9IHRoaXMubmV3RGVwSWRzO1xuICB0aGlzLm5ld0RlcElkcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBJZHMuY2xlYXIoKTtcbiAgdG1wID0gdGhpcy5kZXBzO1xuICB0aGlzLmRlcHMgPSB0aGlzLm5ld0RlcHM7XG4gIHRoaXMubmV3RGVwcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBzLmxlbmd0aCA9IDA7XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZXIgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgd2hlbiBhIGRlcGVuZGVuY3kgY2hhbmdlcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHRoaXMubGF6eSkge1xuICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHRoaXMuc3luYykge1xuICAgIHRoaXMucnVuKCk7XG4gIH0gZWxzZSB7XG4gICAgcXVldWVXYXRjaGVyKHRoaXMpO1xuICB9XG59O1xuXG4vKipcbiAqIFNjaGVkdWxlciBqb2IgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gcnVuICgpIHtcbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICBpZiAoXG4gICAgICB2YWx1ZSAhPT0gdGhpcy52YWx1ZSB8fFxuICAgICAgLy8gRGVlcCB3YXRjaGVycyBhbmQgd2F0Y2hlcnMgb24gT2JqZWN0L0FycmF5cyBzaG91bGQgZmlyZSBldmVuXG4gICAgICAvLyB3aGVuIHRoZSB2YWx1ZSBpcyB0aGUgc2FtZSwgYmVjYXVzZSB0aGUgdmFsdWUgbWF5XG4gICAgICAvLyBoYXZlIG11dGF0ZWQuXG4gICAgICBpc09iamVjdCQxKHZhbHVlKSB8fFxuICAgICAgdGhpcy5kZWVwXG4gICAgKSB7XG4gICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdGhpcy52bSwgKFwiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG52YXIgbWFyaztcbnZhciBtZWFzdXJlO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcGVyZiA9IGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgcGVyZiAmJlxuICAgIHBlcmYubWFyayAmJlxuICAgIHBlcmYubWVhc3VyZSAmJlxuICAgIHBlcmYuY2xlYXJNYXJrcyAmJlxuICAgIHBlcmYuY2xlYXJNZWFzdXJlc1xuICApIHtcbiAgICBtYXJrID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gcGVyZi5tYXJrKHRhZyk7IH07XG4gICAgbWVhc3VyZSA9IGZ1bmN0aW9uIChuYW1lLCBzdGFydFRhZywgZW5kVGFnKSB7XG4gICAgICBwZXJmLm1lYXN1cmUobmFtZSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XG4gICAgICAvLyBwZXJmLmNsZWFyTWVhc3VyZXMobmFtZSlcbiAgICB9O1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zLCB2bSkge1xuICBmdW5jdGlvbiBpbnZva2VyICgpIHtcbiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICB2YXIgZm5zID0gaW52b2tlci5mbnM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZm5zKSkge1xuICAgICAgdmFyIGNsb25lZCA9IGZucy5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2xvbmVkW2ldLCBudWxsLCBhcmd1bWVudHMkMSwgdm0sIFwidi1vbiBoYW5kbGVyXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGZucywgbnVsbCwgYXJndW1lbnRzLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIilcbiAgICB9XG4gIH1cbiAgaW52b2tlci5mbnMgPSBmbnM7XG4gIHJldHVybiBpbnZva2VyXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyAoXG4gIG9uLFxuICBvbGRPbixcbiAgYWRkLFxuICByZW1vdmUsXG4gIGNyZWF0ZU9uY2VIYW5kbGVyLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyLCB2bSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNUcnVlKGV2ZW50Lm9uY2UpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlT25jZUhhbmRsZXIoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICB9XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093biQ1KGF0dHJzLCBrZXlJbkxvd2VyQ2FzZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGlwKFxuICAgICAgICAgICAgXCJQcm9wIFxcXCJcIiArIGtleUluTG93ZXJDYXNlICsgXCJcXFwiIGlzIHBhc3NlZCB0byBjb21wb25lbnQgXCIgK1xuICAgICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodGFnIHx8IEN0b3IpKSArIFwiLCBidXQgdGhlIGRlY2xhcmVkIHByb3AgbmFtZSBpc1wiICtcbiAgICAgICAgICAgIFwiIFxcXCJcIiArIGtleSArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCBjYW1lbENhc2VkIFwiICtcbiAgICAgICAgICAgIFwicHJvcHMgbmVlZCB0byB1c2UgdGhlaXIga2ViYWItY2FzZSBlcXVpdmFsZW50cyB3aGVuIHVzaW5nIGluLURPTSBcIiArXG4gICAgICAgICAgICBcInRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgYWx0S2V5ICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hlY2tQcm9wKHJlcywgcHJvcHMsIGtleSwgYWx0S2V5LCB0cnVlKSB8fFxuICAgICAgY2hlY2tQcm9wKHJlcywgYXR0cnMsIGtleSwgYWx0S2V5LCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wIChcbiAgcmVzLFxuICBoYXNoLFxuICBrZXksXG4gIGFsdEtleSxcbiAgcHJlc2VydmVcbikge1xuICBpZiAoaXNEZWYoaGFzaCkpIHtcbiAgICBpZiAoaGFzT3duJDUoaGFzaCwga2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2tleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoaGFzT3duJDUoaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIGlmIChjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxudmFyIGluaXRQcm94eTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGFsbG93ZWRHbG9iYWxzID0gbWFrZU1hcChcbiAgICAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnICtcbiAgICAncGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsJyArXG4gICAgJ01hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCwnICtcbiAgICAncmVxdWlyZScgLy8gZm9yIFdlYnBhY2svQnJvd3NlcmlmeVxuICApO1xuXG4gIHZhciB3YXJuTm9uUHJlc2VudCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IG9yIG1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQgb24gdGhlIGluc3RhbmNlIGJ1dCBcIiArXG4gICAgICAncmVmZXJlbmNlZCBkdXJpbmcgcmVuZGVyLiBNYWtlIHN1cmUgdGhhdCB0aGlzIHByb3BlcnR5IGlzIHJlYWN0aXZlLCAnICtcbiAgICAgICdlaXRoZXIgaW4gdGhlIGRhdGEgb3B0aW9uLCBvciBmb3IgY2xhc3MtYmFzZWQgY29tcG9uZW50cywgYnkgJyArXG4gICAgICAnaW5pdGlhbGl6aW5nIHRoZSBwcm9wZXJ0eS4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9yZWFjdGl2aXR5Lmh0bWwjRGVjbGFyaW5nLVJlYWN0aXZlLVByb3BlcnRpZXMuJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIHdhcm5SZXNlcnZlZFByZWZpeCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBtdXN0IGJlIGFjY2Vzc2VkIHdpdGggXFxcIiRkYXRhLlwiICsga2V5ICsgXCJcXFwiIGJlY2F1c2UgXCIgK1xuICAgICAgJ3Byb3BlcnRpZXMgc3RhcnRpbmcgd2l0aCBcIiRcIiBvciBcIl9cIiBhcmUgbm90IHByb3hpZWQgaW4gdGhlIFZ1ZSBpbnN0YW5jZSB0byAnICtcbiAgICAgICdwcmV2ZW50IGNvbmZsaWN0cyB3aXRoIFZ1ZSBpbnRlcm5hbHMnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2FwaS8jZGF0YScsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciBoYXNQcm94eSA9XG4gICAgdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm94eSk7XG5cbiAgaWYgKGhhc1Byb3h5KSB7XG4gICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCcpO1xuICAgIGNvbmZpZy5rZXlDb2RlcyA9IG5ldyBQcm94eShjb25maWcua2V5Q29kZXMsIHtcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQnVpbHRJbk1vZGlmaWVyKGtleSkpIHtcbiAgICAgICAgICB3YXJuKChcIkF2b2lkIG92ZXJ3cml0aW5nIGJ1aWx0LWluIG1vZGlmaWVyIGluIGNvbmZpZy5rZXlDb2RlczogLlwiICsga2V5KSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaGFzSGFuZGxlciA9IHtcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHZhciBoYXMgPSBrZXkgaW4gdGFyZ2V0O1xuICAgICAgdmFyIGlzQWxsb3dlZCA9IGFsbG93ZWRHbG9iYWxzKGtleSkgfHxcbiAgICAgICAgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleS5jaGFyQXQoMCkgPT09ICdfJyAmJiAhKGtleSBpbiB0YXJnZXQuJGRhdGEpKTtcbiAgICAgIGlmICghaGFzICYmICFpc0FsbG93ZWQpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzIHx8ICFpc0FsbG93ZWRcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldEhhbmRsZXIgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKHRhcmdldCwga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXRba2V5XVxuICAgIH1cbiAgfTtcblxuICBpbml0UHJveHkgPSBmdW5jdGlvbiBpbml0UHJveHkgKHZtKSB7XG4gICAgaWYgKGhhc1Byb3h5KSB7XG4gICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJveHkgaGFuZGxlciB0byB1c2VcbiAgICAgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gICAgICB2YXIgaGFuZGxlcnMgPSBvcHRpb25zLnJlbmRlciAmJiBvcHRpb25zLnJlbmRlci5fd2l0aFN0cmlwcGVkXG4gICAgICAgID8gZ2V0SGFuZGxlclxuICAgICAgICA6IGhhc0hhbmRsZXI7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSBuZXcgUHJveHkodm0sIGhhbmRsZXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHxcbiAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBoeXBoZW5hdGVkS2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaXNSb290ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcIkluc3RlYWQsIHVzZSBhIGRhdGEgb3IgY29tcHV0ZWQgcHJvcGVydHkgYmFzZWQgb24gdGhlIHByb3AncyBcIiArXG4gICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmaW5lUmVhY3RpdmUocHJvcHMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcXG4nICtcbiAgICAgICdodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9jb21wb25lbnRzLmh0bWwjZGF0YS1NdXN0LUJlLWEtRnVuY3Rpb24nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24kNShtZXRob2RzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBkYXRhIHByb3BlcnR5LlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvcHMgJiYgaGFzT3duJDUocHJvcHMsIGtleSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGdldHRlciA9PSBudWxsKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NTUikge1xuICAgICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgdm0sXG4gICAgICAgIGdldHRlciB8fCBub29wLFxuICAgICAgICBub29wLFxuICAgICAgICBjb21wdXRlZFdhdGNoZXJPcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHNob3VsZENhY2hlXG4gICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmKTtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmLmdldClcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXJJbnZva2VyKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgcmV0dXJuIGZuLmNhbGwodGhpcywgdGhpcylcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyB0eXBlIFxcXCJcIiArICh0eXBlb2YgbWV0aG9kc1trZXldKSArIFwiXFxcIiBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcyAmJiBoYXNPd24kNShwcm9wcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICgoa2V5IGluIHZtKSAmJiBpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY29uZmxpY3RzIHdpdGggYW4gZXhpc3RpbmcgVnVlIGluc3RhbmNlIG1ldGhvZC4gXCIgK1xuICAgICAgICAgIFwiQXZvaWQgZGVmaW5pbmcgY29tcG9uZW50IG1ldGhvZHMgdGhhdCBzdGFydCB3aXRoIF8gb3IgJC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2bVtrZXldID0gdHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJyA/IG5vb3AgOiBiaW5kKG1ldGhvZHNba2V5XSwgdm0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgaGFuZGxlcixcbiAgb3B0aW9uc1xuKSB7XG4gIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgb3B0aW9ucyA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgfVxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICB9XG4gIHJldHVybiB2bS4kd2F0Y2goZXhwT3JGbiwgaGFuZGxlciwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gc3RhdGVNaXhpbiAoVnVlKSB7XG4gIC8vIGZsb3cgc29tZWhvdyBoYXMgcHJvYmxlbXMgd2l0aCBkaXJlY3RseSBkZWNsYXJlZCBkZWZpbml0aW9uIG9iamVjdFxuICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgLy8gdGhlIG9iamVjdCBoZXJlLlxuICB2YXIgZGF0YURlZiA9IHt9O1xuICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTtcbiAgdmFyIHByb3BzRGVmID0ge307XG4gIHByb3BzRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb3BzIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGF0YURlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgcmVwbGFjaW5nIGluc3RhbmNlIHJvb3QgJGRhdGEuICcgK1xuICAgICAgICAnVXNlIG5lc3RlZCBkYXRhIHByb3BlcnRpZXMgaW5zdGVhZC4nLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gICAgcHJvcHNEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcIiRwcm9wcyBpcyByZWFkb25seS5cIiwgdGhpcyk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRkYXRhJywgZGF0YURlZik7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHByb3BzJywgcHJvcHNEZWYpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHNldCA9IHNldDtcbiAgVnVlLnByb3RvdHlwZS4kZGVsZXRlID0gZGVsO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHdhdGNoID0gZnVuY3Rpb24gKFxuICAgIGV4cE9yRm4sXG4gICAgY2IsXG4gICAgb3B0aW9uc1xuICApIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChpc1BsYWluT2JqZWN0KGNiKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKVxuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLnVzZXIgPSB0cnVlO1xuICAgIHZhciB3YXRjaGVyID0gbmV3IFdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucy5pbW1lZGlhdGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNiLmNhbGwodm0sIHdhdGNoZXIudmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZXJyb3IsIHZtLCAoXCJjYWxsYmFjayBmb3IgaW1tZWRpYXRlIHdhdGNoZXIgXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gdW53YXRjaEZuICgpIHtcbiAgICAgIHdhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UHJvdmlkZSAodm0pIHtcbiAgdmFyIHByb3ZpZGUgPSB2bS4kb3B0aW9ucy5wcm92aWRlO1xuICBpZiAocHJvdmlkZSkge1xuICAgIHZtLl9wcm92aWRlZCA9IHR5cGVvZiBwcm92aWRlID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHByb3ZpZGUuY2FsbCh2bSlcbiAgICAgIDogcHJvdmlkZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0SW5qZWN0aW9ucyAodm0pIHtcbiAgdmFyIHJlc3VsdCA9IHJlc29sdmVJbmplY3Qodm0uJG9wdGlvbnMuaW5qZWN0LCB2bSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUodm0sIGtleSwgcmVzdWx0W2tleV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhbiBpbmplY3RlZCB2YWx1ZSBkaXJlY3RseSBzaW5jZSB0aGUgY2hhbmdlcyB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHByb3ZpZGVkIGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcImluamVjdGlvbiBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSh2bSwga2V5LCByZXN1bHRba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVJbmplY3QgKGluamVjdCwgdm0pIHtcbiAgaWYgKGluamVjdCkge1xuICAgIC8vIGluamVjdCBpcyA6YW55IGJlY2F1c2UgZmxvdyBpcyBub3Qgc21hcnQgZW5vdWdoIHRvIGZpZ3VyZSBvdXQgY2FjaGVkXG4gICAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICAgID8gUmVmbGVjdC5vd25LZXlzKGluamVjdClcbiAgICAgIDogT2JqZWN0LmtleXMoaW5qZWN0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAvLyAjNjU3NCBpbiBjYXNlIHRoZSBpbmplY3Qgb2JqZWN0IGlzIG9ic2VydmVkLi4uXG4gICAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgICB2YXIgcHJvdmlkZUtleSA9IGluamVjdFtrZXldLmZyb207XG4gICAgICB2YXIgc291cmNlID0gdm07XG4gICAgICB3aGlsZSAoc291cmNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UuX3Byb3ZpZGVkICYmIGhhc093biQ1KHNvdXJjZS5fcHJvdmlkZWQsIHByb3ZpZGVLZXkpKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBzb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7XG4gICAgICAgICAgdmFyIHByb3ZpZGVEZWZhdWx0ID0gaW5qZWN0W2tleV0uZGVmYXVsdDtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHR5cGVvZiBwcm92aWRlRGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBwcm92aWRlRGVmYXVsdC5jYWxsKHZtKVxuICAgICAgICAgICAgOiBwcm92aWRlRGVmYXVsdDtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybigoXCJJbmplY3Rpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIG5vdCBmb3VuZFwiKSwgdm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHVpZCQyID0gMDtcblxuZnVuY3Rpb24gaW5pdE1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhIHVpZFxuICAgIHZtLl91aWQgPSB1aWQkMisrO1xuXG4gICAgdmFyIHN0YXJ0VGFnLCBlbmRUYWc7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArICh2bS5fdWlkKTtcbiAgICAgIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgKHZtLl91aWQpO1xuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgfVxuXG4gICAgLy8gYSBmbGFnIHRvIGF2b2lkIHRoaXMgYmVpbmcgb2JzZXJ2ZWRcbiAgICB2bS5faXNWdWUgPSB0cnVlO1xuICAgIC8vIG1lcmdlIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9pc0NvbXBvbmVudCkge1xuICAgICAgLy8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb25cbiAgICAgIC8vIHNpbmNlIGR5bmFtaWMgb3B0aW9ucyBtZXJnaW5nIGlzIHByZXR0eSBzbG93LCBhbmQgbm9uZSBvZiB0aGVcbiAgICAgIC8vIGludGVybmFsIGNvbXBvbmVudCBvcHRpb25zIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50LlxuICAgICAgaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICAgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnModm0uY29uc3RydWN0b3IpLFxuICAgICAgICBvcHRpb25zIHx8IHt9LFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW5pdFByb3h5KHZtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9ucztcbiAgZm9yICh2YXIga2V5IGluIGxhdGVzdCkge1xuICAgIGlmIChsYXRlc3Rba2V5XSAhPT0gc2VhbGVkW2tleV0pIHtcbiAgICAgIGlmICghbW9kaWZpZWQpIHsgbW9kaWZpZWQgPSB7fTsgfVxuICAgICAgbW9kaWZpZWRba2V5XSA9IGxhdGVzdFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kaWZpZWRcbn1cblxuLyogICovXG5cblxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgcmF3IGNoaWxkcmVuIFZOb2RlcyBpbnRvIGEgc2xvdCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVTbG90cyAoXG4gIGNoaWxkcmVuLFxuICBjb250ZXh0XG4pIHtcbiAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cbiAgdmFyIHNsb3RzID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgdmFyIGRhdGEgPSBjaGlsZC5kYXRhO1xuICAgIC8vIHJlbW92ZSBzbG90IGF0dHJpYnV0ZSBpZiB0aGUgbm9kZSBpcyByZXNvbHZlZCBhcyBhIFZ1ZSBzbG90IG5vZGVcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMuc2xvdCkge1xuICAgICAgZGVsZXRlIGRhdGEuYXR0cnMuc2xvdDtcbiAgICB9XG4gICAgLy8gbmFtZWQgc2xvdHMgc2hvdWxkIG9ubHkgYmUgcmVzcGVjdGVkIGlmIHRoZSB2bm9kZSB3YXMgcmVuZGVyZWQgaW4gdGhlXG4gICAgLy8gc2FtZSBjb250ZXh0LlxuICAgIGlmICgoY2hpbGQuY29udGV4dCA9PT0gY29udGV4dCB8fCBjaGlsZC5mbkNvbnRleHQgPT09IGNvbnRleHQpICYmXG4gICAgICBkYXRhICYmIGRhdGEuc2xvdCAhPSBudWxsXG4gICAgKSB7XG4gICAgICB2YXIgbmFtZSA9IGRhdGEuc2xvdDtcbiAgICAgIHZhciBzbG90ID0gKHNsb3RzW25hbWVdIHx8IChzbG90c1tuYW1lXSA9IFtdKSk7XG4gICAgICBpZiAoY2hpbGQudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHNsb3QucHVzaC5hcHBseShzbG90LCBjaGlsZC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAoc2xvdHMuZGVmYXVsdCB8fCAoc2xvdHMuZGVmYXVsdCA9IFtdKSkucHVzaChjaGlsZCk7XG4gICAgfVxuICB9XG4gIC8vIGlnbm9yZSBzbG90cyB0aGF0IGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZVxuICBmb3IgKHZhciBuYW1lJDEgaW4gc2xvdHMpIHtcbiAgICBpZiAoc2xvdHNbbmFtZSQxXS5ldmVyeShpc1doaXRlc3BhY2UpKSB7XG4gICAgICBkZWxldGUgc2xvdHNbbmFtZSQxXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNsb3RzXG59XG5cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZSAobm9kZSkge1xuICByZXR1cm4gKG5vZGUuaXNDb21tZW50ICYmICFub2RlLmFzeW5jRmFjdG9yeSkgfHwgbm9kZS50ZXh0ID09PSAnICdcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3RzIChcbiAgc2xvdHMsXG4gIG5vcm1hbFNsb3RzLFxuICBwcmV2U2xvdHNcbikge1xuICB2YXIgcmVzO1xuICB2YXIgaGFzTm9ybWFsU2xvdHMgPSBPYmplY3Qua2V5cyhub3JtYWxTbG90cykubGVuZ3RoID4gMDtcbiAgdmFyIGlzU3RhYmxlID0gc2xvdHMgPyAhIXNsb3RzLiRzdGFibGUgOiAhaGFzTm9ybWFsU2xvdHM7XG4gIHZhciBrZXkgPSBzbG90cyAmJiBzbG90cy4ka2V5O1xuICBpZiAoIXNsb3RzKSB7XG4gICAgcmVzID0ge307XG4gIH0gZWxzZSBpZiAoc2xvdHMuX25vcm1hbGl6ZWQpIHtcbiAgICAvLyBmYXN0IHBhdGggMTogY2hpbGQgY29tcG9uZW50IHJlLXJlbmRlciBvbmx5LCBwYXJlbnQgZGlkIG5vdCBjaGFuZ2VcbiAgICByZXR1cm4gc2xvdHMuX25vcm1hbGl6ZWRcbiAgfSBlbHNlIGlmIChcbiAgICBpc1N0YWJsZSAmJlxuICAgIHByZXZTbG90cyAmJlxuICAgIHByZXZTbG90cyAhPT0gZW1wdHlPYmplY3QgJiZcbiAgICBrZXkgPT09IHByZXZTbG90cy4ka2V5ICYmXG4gICAgIWhhc05vcm1hbFNsb3RzICYmXG4gICAgIXByZXZTbG90cy4kaGFzTm9ybWFsXG4gICkge1xuICAgIC8vIGZhc3QgcGF0aCAyOiBzdGFibGUgc2NvcGVkIHNsb3RzIHcvIG5vIG5vcm1hbCBzbG90cyB0byBwcm94eSxcbiAgICAvLyBvbmx5IG5lZWQgdG8gbm9ybWFsaXplIG9uY2VcbiAgICByZXR1cm4gcHJldlNsb3RzXG4gIH0gZWxzZSB7XG4gICAgcmVzID0ge307XG4gICAgZm9yICh2YXIga2V5JDEgaW4gc2xvdHMpIHtcbiAgICAgIGlmIChzbG90c1trZXkkMV0gJiYga2V5JDFbMF0gIT09ICckJykge1xuICAgICAgICByZXNba2V5JDFdID0gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5JDEsIHNsb3RzW2tleSQxXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGV4cG9zZSBub3JtYWwgc2xvdHMgb24gc2NvcGVkU2xvdHNcbiAgZm9yICh2YXIga2V5JDIgaW4gbm9ybWFsU2xvdHMpIHtcbiAgICBpZiAoIShrZXkkMiBpbiByZXMpKSB7XG4gICAgICByZXNba2V5JDJdID0gcHJveHlOb3JtYWxTbG90KG5vcm1hbFNsb3RzLCBrZXkkMik7XG4gICAgfVxuICB9XG4gIC8vIGF2b3JpYXogc2VlbXMgdG8gbW9jayBhIG5vbi1leHRlbnNpYmxlICRzY29wZWRTbG90cyBvYmplY3RcbiAgLy8gYW5kIHdoZW4gdGhhdCBpcyBwYXNzZWQgZG93biB0aGlzIHdvdWxkIGNhdXNlIGFuIGVycm9yXG4gIGlmIChzbG90cyAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHNsb3RzKSkge1xuICAgIChzbG90cykuX25vcm1hbGl6ZWQgPSByZXM7XG4gIH1cbiAgZGVmKHJlcywgJyRzdGFibGUnLCBpc1N0YWJsZSk7XG4gIGRlZihyZXMsICcka2V5Jywga2V5KTtcbiAgZGVmKHJlcywgJyRoYXNOb3JtYWwnLCBoYXNOb3JtYWxTbG90cyk7XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5LCBmbikge1xuICB2YXIgbm9ybWFsaXplZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzID0gYXJndW1lbnRzLmxlbmd0aCA/IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgOiBmbih7fSk7XG4gICAgcmVzID0gcmVzICYmIHR5cGVvZiByZXMgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHJlcylcbiAgICAgID8gW3Jlc10gLy8gc2luZ2xlIHZub2RlXG4gICAgICA6IG5vcm1hbGl6ZUNoaWxkcmVuKHJlcyk7XG4gICAgcmV0dXJuIHJlcyAmJiAoXG4gICAgICByZXMubGVuZ3RoID09PSAwIHx8XG4gICAgICAocmVzLmxlbmd0aCA9PT0gMSAmJiByZXNbMF0uaXNDb21tZW50KSAvLyAjOTY1OFxuICAgICkgPyB1bmRlZmluZWRcbiAgICAgIDogcmVzXG4gIH07XG4gIC8vIHRoaXMgaXMgYSBzbG90IHVzaW5nIHRoZSBuZXcgdi1zbG90IHN5bnRheCB3aXRob3V0IHNjb3BlLiBhbHRob3VnaCBpdCBpc1xuICAvLyBjb21waWxlZCBhcyBhIHNjb3BlZCBzbG90LCByZW5kZXIgZm4gdXNlcnMgd291bGQgZXhwZWN0IGl0IHRvIGJlIHByZXNlbnRcbiAgLy8gb24gdGhpcy4kc2xvdHMgYmVjYXVzZSB0aGUgdXNhZ2UgaXMgc2VtYW50aWNhbGx5IGEgbm9ybWFsIHNsb3QuXG4gIGlmIChmbi5wcm94eSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub3JtYWxTbG90cywga2V5LCB7XG4gICAgICBnZXQ6IG5vcm1hbGl6ZWQsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZWRcbn1cblxuZnVuY3Rpb24gcHJveHlOb3JtYWxTbG90KHNsb3RzLCBrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNsb3RzW2tleV07IH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyB2LWZvciBsaXN0cy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTGlzdCAoXG4gIHZhbCxcbiAgcmVuZGVyXG4pIHtcbiAgdmFyIHJldCwgaSwgbCwga2V5cywga2V5O1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpIHx8IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbC5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGwgPSB2YWwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIodmFsW2ldLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdmFsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcihpICsgMSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0JDEodmFsKSkge1xuICAgIGlmIChoYXNTeW1ib2wgJiYgdmFsW1N5bWJvbC5pdGVyYXRvcl0pIHtcbiAgICAgIHJldCA9IFtdO1xuICAgICAgdmFyIGl0ZXJhdG9yID0gdmFsW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB3aGlsZSAoIXJlc3VsdC5kb25lKSB7XG4gICAgICAgIHJldC5wdXNoKHJlbmRlcihyZXN1bHQudmFsdWUsIHJldC5sZW5ndGgpKTtcbiAgICAgICAgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtrZXldLCBrZXksIGkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzRGVmKHJldCkpIHtcbiAgICByZXQgPSBbXTtcbiAgfVxuICAocmV0KS5faXNWTGlzdCA9IHRydWU7XG4gIHJldHVybiByZXRcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyA8c2xvdD5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU2xvdCAoXG4gIG5hbWUsXG4gIGZhbGxiYWNrLFxuICBwcm9wcyxcbiAgYmluZE9iamVjdFxuKSB7XG4gIHZhciBzY29wZWRTbG90Rm4gPSB0aGlzLiRzY29wZWRTbG90c1tuYW1lXTtcbiAgdmFyIG5vZGVzO1xuICBpZiAoc2NvcGVkU2xvdEZuKSB7IC8vIHNjb3BlZCBzbG90XG4gICAgcHJvcHMgPSBwcm9wcyB8fCB7fTtcbiAgICBpZiAoYmluZE9iamVjdCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzT2JqZWN0JDEoYmluZE9iamVjdCkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnc2xvdCB2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCcsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgIH1cbiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2s7XG4gIH0gZWxzZSB7XG4gICAgbm9kZXMgPSB0aGlzLiRzbG90c1tuYW1lXSB8fCBmYWxsYmFjaztcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGJpbmRPYmplY3RQcm9wcyAoXG4gIGRhdGEsXG4gIHRhZyxcbiAgdmFsdWUsXG4gIGFzUHJvcCxcbiAgaXNTeW5jXG4pIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCQxKHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3Qgb3IgQXJyYXkgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB0b09iamVjdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgaGFzaDtcbiAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgPT09ICdjbGFzcycgfHxcbiAgICAgICAgICBrZXkgPT09ICdzdHlsZScgfHxcbiAgICAgICAgICBpc1Jlc2VydmVkQXR0cmlidXRlKGtleSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaGFzaCA9IGRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMudHlwZTtcbiAgICAgICAgICBoYXNoID0gYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIHR5cGUsIGtleSlcbiAgICAgICAgICAgID8gZGF0YS5kb21Qcm9wcyB8fCAoZGF0YS5kb21Qcm9wcyA9IHt9KVxuICAgICAgICAgICAgOiBkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYW1lbGl6ZWRLZXkgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgICBpZiAoIShjYW1lbGl6ZWRLZXkgaW4gaGFzaCkgJiYgIShoeXBoZW5hdGVkS2V5IGluIGhhc2gpKSB7XG4gICAgICAgICAgaGFzaFtrZXldID0gdmFsdWVba2V5XTtcblxuICAgICAgICAgIGlmIChpc1N5bmMpIHtcbiAgICAgICAgICAgIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gICAgICAgICAgICBvblsoXCJ1cGRhdGU6XCIgKyBrZXkpXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFsdWVba2V5XSA9ICRldmVudDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIGxvb3AoIGtleSApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHN0YXRpYyB0cmVlcy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU3RhdGljIChcbiAgaW5kZXgsXG4gIGlzSW5Gb3Jcbikge1xuICB2YXIgY2FjaGVkID0gdGhpcy5fc3RhdGljVHJlZXMgfHwgKHRoaXMuX3N0YXRpY1RyZWVzID0gW10pO1xuICB2YXIgdHJlZSA9IGNhY2hlZFtpbmRleF07XG4gIC8vIGlmIGhhcyBhbHJlYWR5LXJlbmRlcmVkIHN0YXRpYyB0cmVlIGFuZCBub3QgaW5zaWRlIHYtZm9yLFxuICAvLyB3ZSBjYW4gcmV1c2UgdGhlIHNhbWUgdHJlZS5cbiAgaWYgKHRyZWUgJiYgIWlzSW5Gb3IpIHtcbiAgICByZXR1cm4gdHJlZVxuICB9XG4gIC8vIG90aGVyd2lzZSwgcmVuZGVyIGEgZnJlc2ggdHJlZS5cbiAgdHJlZSA9IGNhY2hlZFtpbmRleF0gPSB0aGlzLiRvcHRpb25zLnN0YXRpY1JlbmRlckZuc1tpbmRleF0uY2FsbChcbiAgICB0aGlzLl9yZW5kZXJQcm94eSxcbiAgICBudWxsLFxuICAgIHRoaXMgLy8gZm9yIHJlbmRlciBmbnMgZ2VuZXJhdGVkIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCB0ZW1wbGF0ZXNcbiAgKTtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX3N0YXRpY19fXCIgKyBpbmRleCksIGZhbHNlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3Igdi1vbmNlLlxuICogRWZmZWN0aXZlbHkgaXQgbWVhbnMgbWFya2luZyB0aGUgbm9kZSBhcyBzdGF0aWMgd2l0aCBhIHVuaXF1ZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIG1hcmtPbmNlIChcbiAgdHJlZSxcbiAgaW5kZXgsXG4gIGtleVxuKSB7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19vbmNlX19cIiArIGluZGV4ICsgKGtleSA/IChcIl9cIiArIGtleSkgOiBcIlwiKSksIHRydWUpO1xuICByZXR1cm4gdHJlZVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljIChcbiAgdHJlZSxcbiAga2V5LFxuICBpc09uY2Vcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh0cmVlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRyZWVbaV0gJiYgdHlwZW9mIHRyZWVbaV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG1hcmtTdGF0aWNOb2RlKHRyZWVbaV0sIChrZXkgKyBcIl9cIiArIGkpLCBpc09uY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtYXJrU3RhdGljTm9kZSh0cmVlLCBrZXksIGlzT25jZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpY05vZGUgKG5vZGUsIGtleSwgaXNPbmNlKSB7XG4gIG5vZGUuaXNTdGF0aWMgPSB0cnVlO1xuICBub2RlLmtleSA9IGtleTtcbiAgbm9kZS5pc09uY2UgPSBpc09uY2U7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kT2JqZWN0TGlzdGVuZXJzIChkYXRhLCB2YWx1ZSkge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LW9uIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgb24gPSBkYXRhLm9uID0gZGF0YS5vbiA/IGV4dGVuZCh7fSwgZGF0YS5vbikgOiB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICB2YXIgZXhpc3RpbmcgPSBvbltrZXldO1xuICAgICAgICB2YXIgb3VycyA9IHZhbHVlW2tleV07XG4gICAgICAgIG9uW2tleV0gPSBleGlzdGluZyA/IFtdLmNvbmNhdChleGlzdGluZywgb3VycykgOiBvdXJzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVNjb3BlZFNsb3RzIChcbiAgZm5zLCAvLyBzZWUgZmxvdy92bm9kZVxuICByZXMsXG4gIC8vIHRoZSBmb2xsb3dpbmcgYXJlIGFkZGVkIGluIDIuNlxuICBoYXNEeW5hbWljS2V5cyxcbiAgY29udGVudEhhc2hLZXlcbikge1xuICByZXMgPSByZXMgfHwgeyAkc3RhYmxlOiAhaGFzRHluYW1pY0tleXMgfTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2xvdCA9IGZuc1tpXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzbG90KSkge1xuICAgICAgcmVzb2x2ZVNjb3BlZFNsb3RzKHNsb3QsIHJlcywgaGFzRHluYW1pY0tleXMpO1xuICAgIH0gZWxzZSBpZiAoc2xvdCkge1xuICAgICAgLy8gbWFya2VyIGZvciByZXZlcnNlIHByb3h5aW5nIHYtc2xvdCB3aXRob3V0IHNjb3BlIG9uIHRoaXMuJHNsb3RzXG4gICAgICBpZiAoc2xvdC5wcm94eSkge1xuICAgICAgICBzbG90LmZuLnByb3h5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJlc1tzbG90LmtleV0gPSBzbG90LmZuO1xuICAgIH1cbiAgfVxuICBpZiAoY29udGVudEhhc2hLZXkpIHtcbiAgICAocmVzKS4ka2V5ID0gY29udGVudEhhc2hLZXk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZER5bmFtaWNLZXlzIChiYXNlT2JqLCB2YWx1ZXMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIga2V5ID0gdmFsdWVzW2ldO1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkpIHtcbiAgICAgIGJhc2VPYmpbdmFsdWVzW2ldXSA9IHZhbHVlc1tpICsgMV07XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGtleSAhPT0gJycgJiYga2V5ICE9PSBudWxsKSB7XG4gICAgICAvLyBudWxsIGlzIGEgc3BlaWNhbCB2YWx1ZSBmb3IgZXhwbGljaXRseSByZW1vdmluZyBhIGJpbmRpbmdcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkludmFsaWQgdmFsdWUgZm9yIGR5bmFtaWMgZGlyZWN0aXZlIGFyZ3VtZW50IChleHBlY3RlZCBzdHJpbmcgb3IgbnVsbCk6IFwiICsga2V5KSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJhc2VPYmpcbn1cblxuLy8gaGVscGVyIHRvIGR5bmFtaWNhbGx5IGFwcGVuZCBtb2RpZmllciBydW50aW1lIG1hcmtlcnMgdG8gZXZlbnQgbmFtZXMuXG4vLyBlbnN1cmUgb25seSBhcHBlbmQgd2hlbiB2YWx1ZSBpcyBhbHJlYWR5IHN0cmluZywgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgY2FzdFxuLy8gdG8gc3RyaW5nIGFuZCBjYXVzZSB0aGUgdHlwZSBjaGVjayB0byBtaXNzLlxuZnVuY3Rpb24gcHJlcGVuZE1vZGlmaWVyICh2YWx1ZSwgc3ltYm9sKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gc3ltYm9sICsgdmFsdWUgOiB2YWx1ZVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5zdGFsbFJlbmRlckhlbHBlcnMgKHRhcmdldCkge1xuICB0YXJnZXQuX28gPSBtYXJrT25jZTtcbiAgdGFyZ2V0Ll9uID0gdG9OdW1iZXI7XG4gIHRhcmdldC5fcyA9IHRvU3RyaW5nJDQ7XG4gIHRhcmdldC5fbCA9IHJlbmRlckxpc3Q7XG4gIHRhcmdldC5fdCA9IHJlbmRlclNsb3Q7XG4gIHRhcmdldC5fcSA9IGxvb3NlRXF1YWw7XG4gIHRhcmdldC5faSA9IGxvb3NlSW5kZXhPZjtcbiAgdGFyZ2V0Ll9tID0gcmVuZGVyU3RhdGljO1xuICB0YXJnZXQuX2YgPSByZXNvbHZlRmlsdGVyO1xuICB0YXJnZXQuX2sgPSBjaGVja0tleUNvZGVzO1xuICB0YXJnZXQuX2IgPSBiaW5kT2JqZWN0UHJvcHM7XG4gIHRhcmdldC5fdiA9IGNyZWF0ZVRleHRWTm9kZTtcbiAgdGFyZ2V0Ll9lID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgdGFyZ2V0Ll91ID0gcmVzb2x2ZVNjb3BlZFNsb3RzO1xuICB0YXJnZXQuX2cgPSBiaW5kT2JqZWN0TGlzdGVuZXJzO1xuICB0YXJnZXQuX2QgPSBiaW5kRHluYW1pY0tleXM7XG4gIHRhcmdldC5fcCA9IHByZXBlbmRNb2RpZmllcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IChcbiAgZGF0YSxcbiAgcHJvcHMsXG4gIGNoaWxkcmVuLFxuICBwYXJlbnQsXG4gIEN0b3Jcbikge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgLy8gZW5zdXJlIHRoZSBjcmVhdGVFbGVtZW50IGZ1bmN0aW9uIGluIGZ1bmN0aW9uYWwgY29tcG9uZW50c1xuICAvLyBnZXRzIGEgdW5pcXVlIGNvbnRleHQgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY29ycmVjdCBuYW1lZCBzbG90IGNoZWNrXG4gIHZhciBjb250ZXh0Vm07XG4gIGlmIChoYXNPd24kNShwYXJlbnQsICdfdWlkJykpIHtcbiAgICBjb250ZXh0Vm0gPSBPYmplY3QuY3JlYXRlKHBhcmVudCk7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgY29udGV4dFZtLl9vcmlnaW5hbCA9IHBhcmVudDtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY29udGV4dCB2bSBwYXNzZWQgaW4gaXMgYSBmdW5jdGlvbmFsIGNvbnRleHQgYXMgd2VsbC5cbiAgICAvLyBpbiB0aGlzIGNhc2Ugd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgYXJlIGFibGUgdG8gZ2V0IGEgaG9sZCB0byB0aGVcbiAgICAvLyByZWFsIGNvbnRleHQgaW5zdGFuY2UuXG4gICAgY29udGV4dFZtID0gcGFyZW50O1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHBhcmVudCA9IHBhcmVudC5fb3JpZ2luYWw7XG4gIH1cbiAgdmFyIGlzQ29tcGlsZWQgPSBpc1RydWUob3B0aW9ucy5fY29tcGlsZWQpO1xuICB2YXIgbmVlZE5vcm1hbGl6YXRpb24gPSAhaXNDb21waWxlZDtcblxuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMubGlzdGVuZXJzID0gZGF0YS5vbiB8fCBlbXB0eU9iamVjdDtcbiAgdGhpcy5pbmplY3Rpb25zID0gcmVzb2x2ZUluamVjdChvcHRpb25zLmluamVjdCwgcGFyZW50KTtcbiAgdGhpcy5zbG90cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMkMS4kc2xvdHMpIHtcbiAgICAgIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBkYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB0aGlzJDEuJHNsb3RzID0gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcyQxLiRzbG90c1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2NvcGVkU2xvdHMnLCAoe1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuc2xvdHMoKSlcbiAgICB9XG4gIH0pKTtcblxuICAvLyBzdXBwb3J0IGZvciBjb21waWxlZCBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChpc0NvbXBpbGVkKSB7XG4gICAgLy8gZXhwb3NpbmcgJG9wdGlvbnMgZm9yIHJlbmRlclN0YXRpYygpXG4gICAgdGhpcy4kb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gcHJlLXJlc29sdmUgc2xvdHMgZm9yIHJlbmRlclNsb3QoKVxuICAgIHRoaXMuJHNsb3RzID0gdGhpcy5zbG90cygpO1xuICAgIHRoaXMuJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy4kc2xvdHMpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dClcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIChjbG9uZS5kZXZ0b29sc01ldGEgPSBjbG9uZS5kZXZ0b29sc01ldGEgfHwge30pLnJlbmRlckNvbnRleHQgPSByZW5kZXJDb250ZXh0O1xuICB9XG4gIGlmIChkYXRhLnNsb3QpIHtcbiAgICAoY2xvbmUuZGF0YSB8fCAoY2xvbmUuZGF0YSA9IHt9KSkuc2xvdCA9IGRhdGEuc2xvdDtcbiAgfVxuICByZXR1cm4gY2xvbmVcbn1cblxuZnVuY3Rpb24gbWVyZ2VQcm9wcyAodG8sIGZyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICB0b1tjYW1lbGl6ZShrZXkpXSA9IGZyb21ba2V5XTtcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gaW5saW5lIGhvb2tzIHRvIGJlIGludm9rZWQgb24gY29tcG9uZW50IFZOb2RlcyBkdXJpbmcgcGF0Y2hcbnZhciBjb21wb25lbnRWTm9kZUhvb2tzID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgaWYgKFxuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiZcbiAgICAgICF2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQgJiZcbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlXG4gICAgKSB7XG4gICAgICAvLyBrZXB0LWFsaXZlIGNvbXBvbmVudHMsIHRyZWF0IGFzIGEgcGF0Y2hcbiAgICAgIHZhciBtb3VudGVkTm9kZSA9IHZub2RlOyAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgICBjb21wb25lbnRWTm9kZUhvb2tzLnByZXBhdGNoKG1vdW50ZWROb2RlLCBtb3VudGVkTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZShcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGFjdGl2ZUluc3RhbmNlXG4gICAgICApO1xuICAgICAgY2hpbGQuJG1vdW50KGh5ZHJhdGluZyA/IHZub2RlLmVsbSA6IHVuZGVmaW5lZCwgaHlkcmF0aW5nKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJlcGF0Y2g6IGZ1bmN0aW9uIHByZXBhdGNoIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB1cGRhdGVDaGlsZENvbXBvbmVudChcbiAgICAgIGNoaWxkLFxuICAgICAgb3B0aW9ucy5wcm9wc0RhdGEsIC8vIHVwZGF0ZWQgcHJvcHNcbiAgICAgIG9wdGlvbnMubGlzdGVuZXJzLCAvLyB1cGRhdGVkIGxpc3RlbmVyc1xuICAgICAgdm5vZGUsIC8vIG5ldyBwYXJlbnQgdm5vZGVcbiAgICAgIG9wdGlvbnMuY2hpbGRyZW4gLy8gbmV3IGNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydCAodm5vZGUpIHtcbiAgICB2YXIgY29udGV4dCA9IHZub2RlLmNvbnRleHQ7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkKSB7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgLy8gdnVlLXJvdXRlciMxMjEyXG4gICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcbiAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4gICAgICAgIC8vIG9uIGluY29ycmVjdCBjaGlsZHJlbi4gSW5zdGVhZCB3ZSBwdXNoIHRoZW0gaW50byBhIHF1ZXVlIHdoaWNoIHdpbGxcbiAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxuICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuICBDdG9yLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgaWYgKGlzVW5kZWYoQ3RvcikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiYXNlQ3RvciA9IGNvbnRleHQuJG9wdGlvbnMuX2Jhc2U7XG5cbiAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yXG4gIGlmIChpc09iamVjdCQxKEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgLy8gcmVqZWN0LlxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybigoXCJJbnZhbGlkIENvbXBvbmVudCBkZWZpbml0aW9uOiBcIiArIChTdHJpbmcoQ3RvcikpKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gYXN5bmMgY29tcG9uZW50XG4gIHZhciBhc3luY0ZhY3Rvcnk7XG4gIGlmIChpc1VuZGVmKEN0b3IuY2lkKSkge1xuICAgIGFzeW5jRmFjdG9yeSA9IEN0b3I7XG4gICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChhc3luY0ZhY3RvcnksIGJhc2VDdG9yKTtcbiAgICBpZiAoQ3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciBub2RlIGZvciBhc3luYyBjb21wb25lbnQsIHdoaWNoIGlzIHJlbmRlcmVkXG4gICAgICAvLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgIC8vIHRoZSBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgZm9yIGFzeW5jIHNlcnZlci1yZW5kZXJpbmcgYW5kIGh5ZHJhdGlvbi5cbiAgICAgIHJldHVybiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyKFxuICAgICAgICBhc3luY0ZhY3RvcnksXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICB0YWdcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBkYXRhID0gZGF0YSB8fCB7fTtcblxuICAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG4gIC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xuXG4gIC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHNcbiAgaWYgKGlzRGVmKGRhdGEubW9kZWwpKSB7XG4gICAgdHJhbnNmb3JtTW9kZWwoQ3Rvci5vcHRpb25zLCBkYXRhKTtcbiAgfVxuXG4gIC8vIGV4dHJhY3QgcHJvcHNcbiAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKTtcblxuICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5mdW5jdGlvbmFsKSkge1xuICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG4gIH1cblxuICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuICB2YXIgbGlzdGVuZXJzID0gZGF0YS5vbjtcbiAgLy8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcbiAgLy8gc28gaXQgZ2V0cyBwcm9jZXNzZWQgZHVyaW5nIHBhcmVudCBjb21wb25lbnQgcGF0Y2guXG4gIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uO1xuXG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmFic3RyYWN0KSkge1xuICAgIC8vIGFic3RyYWN0IGNvbXBvbmVudHMgZG8gbm90IGtlZXAgYW55dGhpbmdcbiAgICAvLyBvdGhlciB0aGFuIHByb3BzICYgbGlzdGVuZXJzICYgc2xvdFxuXG4gICAgLy8gd29yayBhcm91bmQgZmxvd1xuICAgIHZhciBzbG90ID0gZGF0YS5zbG90O1xuICAgIGRhdGEgPSB7fTtcbiAgICBpZiAoc2xvdCkge1xuICAgICAgZGF0YS5zbG90ID0gc2xvdDtcbiAgICB9XG4gIH1cblxuICAvLyBpbnN0YWxsIGNvbXBvbmVudCBtYW5hZ2VtZW50IGhvb2tzIG9udG8gdGhlIHBsYWNlaG9sZGVyIG5vZGVcbiAgaW5zdGFsbENvbXBvbmVudEhvb2tzKGRhdGEpO1xuXG4gIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIHZub2RlXG4gIHZhciBuYW1lID0gQ3Rvci5vcHRpb25zLm5hbWUgfHwgdGFnO1xuICB2YXIgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgKFwidnVlLWNvbXBvbmVudC1cIiArIChDdG9yLmNpZCkgKyAobmFtZSA/IChcIi1cIiArIG5hbWUpIDogJycpKSxcbiAgICBkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0LFxuICAgIHsgQ3RvcjogQ3RvciwgcHJvcHNEYXRhOiBwcm9wc0RhdGEsIGxpc3RlbmVyczogbGlzdGVuZXJzLCB0YWc6IHRhZywgY2hpbGRyZW46IGNoaWxkcmVuIH0sXG4gICAgYXN5bmNGYWN0b3J5XG4gICk7XG5cbiAgcmV0dXJuIHZub2RlXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUgKFxuICB2bm9kZSwgLy8gd2Uga25vdyBpdCdzIE1vdW50ZWRDb21wb25lbnRWTm9kZSBidXQgZmxvdyBkb2Vzbid0XG4gIHBhcmVudCAvLyBhY3RpdmVJbnN0YW5jZSBpbiBsaWZlY3ljbGUgc3RhdGVcbikge1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBfaXNDb21wb25lbnQ6IHRydWUsXG4gICAgX3BhcmVudFZub2RlOiB2bm9kZSxcbiAgICBwYXJlbnQ6IHBhcmVudFxuICB9O1xuICAvLyBjaGVjayBpbmxpbmUtdGVtcGxhdGUgcmVuZGVyIGZ1bmN0aW9uc1xuICB2YXIgaW5saW5lVGVtcGxhdGUgPSB2bm9kZS5kYXRhLmlubGluZVRlbXBsYXRlO1xuICBpZiAoaXNEZWYoaW5saW5lVGVtcGxhdGUpKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBpbmxpbmVUZW1wbGF0ZS5yZW5kZXI7XG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBpbmxpbmVUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnM7XG4gIH1cbiAgcmV0dXJuIG5ldyB2bm9kZS5jb21wb25lbnRPcHRpb25zLkN0b3Iob3B0aW9ucylcbn1cblxuZnVuY3Rpb24gaW5zdGFsbENvbXBvbmVudEhvb2tzIChkYXRhKSB7XG4gIHZhciBob29rcyA9IGRhdGEuaG9vayB8fCAoZGF0YS5ob29rID0ge30pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzVG9NZXJnZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBob29rc1RvTWVyZ2VbaV07XG4gICAgdmFyIGV4aXN0aW5nID0gaG9va3Nba2V5XTtcbiAgICB2YXIgdG9NZXJnZSA9IGNvbXBvbmVudFZOb2RlSG9va3Nba2V5XTtcbiAgICBpZiAoZXhpc3RpbmcgIT09IHRvTWVyZ2UgJiYgIShleGlzdGluZyAmJiBleGlzdGluZy5fbWVyZ2VkKSkge1xuICAgICAgaG9va3Nba2V5XSA9IGV4aXN0aW5nID8gbWVyZ2VIb29rJDEodG9NZXJnZSwgZXhpc3RpbmcpIDogdG9NZXJnZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VIb29rJDEgKGYxLCBmMikge1xuICB2YXIgbWVyZ2VkID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAvLyBmbG93IGNvbXBsYWlucyBhYm91dCBleHRyYSBhcmdzIHdoaWNoIGlzIHdoeSB3ZSB1c2UgYW55XG4gICAgZjEoYSwgYik7XG4gICAgZjIoYSwgYik7XG4gIH07XG4gIG1lcmdlZC5fbWVyZ2VkID0gdHJ1ZTtcbiAgcmV0dXJuIG1lcmdlZFxufVxuXG4vLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgaW5mbyAodmFsdWUgYW5kIGNhbGxiYWNrKSBpbnRvXG4vLyBwcm9wIGFuZCBldmVudCBoYW5kbGVyIHJlc3BlY3RpdmVseS5cbmZ1bmN0aW9uIHRyYW5zZm9ybU1vZGVsIChvcHRpb25zLCBkYXRhKSB7XG4gIHZhciBwcm9wID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5wcm9wKSB8fCAndmFsdWUnO1xuICB2YXIgZXZlbnQgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLmV2ZW50KSB8fCAnaW5wdXQnXG4gIDsoZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KSlbcHJvcF0gPSBkYXRhLm1vZGVsLnZhbHVlO1xuICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICB2YXIgZXhpc3RpbmcgPSBvbltldmVudF07XG4gIHZhciBjYWxsYmFjayA9IGRhdGEubW9kZWwuY2FsbGJhY2s7XG4gIGlmIChpc0RlZihleGlzdGluZykpIHtcbiAgICBpZiAoXG4gICAgICBBcnJheS5pc0FycmF5KGV4aXN0aW5nKVxuICAgICAgICA/IGV4aXN0aW5nLmluZGV4T2YoY2FsbGJhY2spID09PSAtMVxuICAgICAgICA6IGV4aXN0aW5nICE9PSBjYWxsYmFja1xuICAgICkge1xuICAgICAgb25bZXZlbnRdID0gW2NhbGxiYWNrXS5jb25jYXQoZXhpc3RpbmcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvbltldmVudF0gPSBjYWxsYmFjaztcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIFNJTVBMRV9OT1JNQUxJWkUgPSAxO1xudmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyO1xuXG4vLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuLy8gd2l0aG91dCBnZXR0aW5nIHllbGxlZCBhdCBieSBmbG93XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGUsXG4gIGFsd2F5c05vcm1hbGl6ZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBjaGlsZHJlbjtcbiAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoaXNUcnVlKGFsd2F5c05vcm1hbGl6ZSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IEFMV0FZU19OT1JNQUxJWkU7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlXG4pIHtcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKChkYXRhKS5fX29iX18pKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIlxcblwiICtcbiAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIG9iamVjdCBzeW50YXggaW4gdi1iaW5kXG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkge1xuICAgIHRhZyA9IGRhdGEuaXM7XG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEua2V5KSAmJiAhaXNQcmltaXRpdmUoZGF0YS5rZXkpXG4gICkge1xuICAgIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCB1c2luZyBub24tcHJpbWl0aXZlIHZhbHVlIGFzIGtleSwgJyArXG4gICAgICAgICd1c2Ugc3RyaW5nL251bWJlciB2YWx1ZSBpbnN0ZWFkLicsXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmXG4gICAgdHlwZW9mIGNoaWxkcmVuWzBdID09PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIGRhdGEuc2NvcGVkU2xvdHMgPSB7IGRlZmF1bHQ6IGNoaWxkcmVuWzBdIH07XG4gICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgfVxuICBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IEFMV0FZU19OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IG5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfSBlbHNlIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gU0lNUExFX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9XG4gIHZhciB2bm9kZSwgbnM7XG4gIGlmICh0eXBlb2YgdGFnID09PSAnc3RyaW5nJykge1xuICAgIHZhciBDdG9yO1xuICAgIG5zID0gKGNvbnRleHQuJHZub2RlICYmIGNvbnRleHQuJHZub2RlLm5zKSB8fCBjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7XG4gICAgaWYgKGNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCghZGF0YSB8fCAhZGF0YS5wcmUpICYmIGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAoaXNEZWYobnMpKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIGlmIChpc0RlZihkYXRhKSkgeyByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKFxuICAgICAgICBpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gcmVmICM1MzE4XG4vLyBuZWNlc3NhcnkgdG8gZW5zdXJlIHBhcmVudCByZS1yZW5kZXIgd2hlbiBkZWVwIGJpbmRpbmdzIGxpa2UgOnN0eWxlIGFuZFxuLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXNcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7XG4gIGlmIChpc09iamVjdCQxKGRhdGEuc3R5bGUpKSB7XG4gICAgdHJhdmVyc2UoZGF0YS5zdHlsZSk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0JDEoZGF0YS5jbGFzcykpIHtcbiAgICB0cmF2ZXJzZShkYXRhLmNsYXNzKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFJlbmRlciAodm0pIHtcbiAgdm0uX3Zub2RlID0gbnVsbDsgLy8gdGhlIHJvb3Qgb2YgdGhlIGNoaWxkIHRyZWVcbiAgdm0uX3N0YXRpY1RyZWVzID0gbnVsbDsgLy8gdi1vbmNlIGNhY2hlZCB0cmVlc1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICB2YXIgcGFyZW50Vm5vZGUgPSB2bS4kdm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcbiAgdmFyIHJlbmRlckNvbnRleHQgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5jb250ZXh0O1xuICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMob3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4sIHJlbmRlckNvbnRleHQpO1xuICB2bS4kc2NvcGVkU2xvdHMgPSBlbXB0eU9iamVjdDtcbiAgLy8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG4gIC8vIHNvIHRoYXQgd2UgZ2V0IHByb3BlciByZW5kZXIgY29udGV4dCBpbnNpZGUgaXQuXG4gIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcbiAgLy8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcbiAgdm0uX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgZmFsc2UpOyB9O1xuICAvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cbiAgLy8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gIHZtLiRjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIHRydWUpOyB9O1xuXG4gIC8vICRhdHRycyAmICRsaXN0ZW5lcnMgYXJlIGV4cG9zZWQgZm9yIGVhc2llciBIT0MgY3JlYXRpb24uXG4gIC8vIHRoZXkgbmVlZCB0byBiZSByZWFjdGl2ZSBzbyB0aGF0IEhPQ3MgdXNpbmcgdGhlbSBhcmUgYWx3YXlzIHVwZGF0ZWRcbiAgdmFyIHBhcmVudERhdGEgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5kYXRhO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRhdHRycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGxpc3RlbmVycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGRlZmluZVJlYWN0aXZlKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICB9XG59XG5cbnZhciBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuXG5mdW5jdGlvbiByZW5kZXJNaXhpbiAoVnVlKSB7XG4gIC8vIGluc3RhbGwgcnVudGltZSBjb252ZW5pZW5jZSBoZWxwZXJzXG4gIGluc3RhbGxSZW5kZXJIZWxwZXJzKFZ1ZS5wcm90b3R5cGUpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIG5leHRUaWNrKGZuLCB0aGlzKVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciByZWYgPSB2bS4kb3B0aW9ucztcbiAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICB2YXIgX3BhcmVudFZub2RlID0gcmVmLl9wYXJlbnRWbm9kZTtcblxuICAgIGlmIChfcGFyZW50Vm5vZGUpIHtcbiAgICAgIHZtLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdm0uJHNsb3RzLFxuICAgICAgICB2bS4kc2NvcGVkU2xvdHNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIG1haW50YWluIGEgc3RhY2sgYmVjYXVlcyBhbGwgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyBzZXBhcmF0ZWx5IGZyb20gb25lIGFub3RoZXIuIE5lc3RlZCBjb21wb25lbnQncyByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHdoZW4gcGFyZW50IGNvbXBvbmVudCBpcyBwYXRjaGVkLlxuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gdm07XG4gICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlclwiKTtcbiAgICAgIC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LFxuICAgICAgLy8gb3IgcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlckVycm9yXCIpO1xuICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gICAgLy8gaWYgdGhlIHJldHVybmVkIGFycmF5IGNvbnRhaW5zIG9ubHkgYSBzaW5nbGUgbm9kZSwgYWxsb3cgaXRcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkgJiYgdm5vZGUubGVuZ3RoID09PSAxKSB7XG4gICAgICB2bm9kZSA9IHZub2RlWzBdO1xuICAgIH1cbiAgICAvLyByZXR1cm4gZW1wdHkgdm5vZGUgaW4gY2FzZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGVycm9yZWQgb3V0XG4gICAgaWYgKCEodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gIGlmIChcbiAgICBjb21wLl9fZXNNb2R1bGUgfHxcbiAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0JDEoY29tcClcbiAgICA/IGJhc2UuZXh0ZW5kKGNvbXApXG4gICAgOiBjb21wXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIgKFxuICBmYWN0b3J5LFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgdmFyIG5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gIG5vZGUuYXN5bmNGYWN0b3J5ID0gZmFjdG9yeTtcbiAgbm9kZS5hc3luY01ldGEgPSB7IGRhdGE6IGRhdGEsIGNvbnRleHQ6IGNvbnRleHQsIGNoaWxkcmVuOiBjaGlsZHJlbiwgdGFnOiB0YWcgfTtcbiAgcmV0dXJuIG5vZGVcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUFzeW5jQ29tcG9uZW50IChcbiAgZmFjdG9yeSxcbiAgYmFzZUN0b3Jcbikge1xuICBpZiAoaXNUcnVlKGZhY3RvcnkuZXJyb3IpICYmIGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmVycm9yQ29tcFxuICB9XG5cbiAgaWYgKGlzRGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxuXG4gIHZhciBvd25lciA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgaWYgKG93bmVyICYmIGlzRGVmKGZhY3Rvcnkub3duZXJzKSAmJiBmYWN0b3J5Lm93bmVycy5pbmRleE9mKG93bmVyKSA9PT0gLTEpIHtcbiAgICAvLyBhbHJlYWR5IHBlbmRpbmdcbiAgICBmYWN0b3J5Lm93bmVycy5wdXNoKG93bmVyKTtcbiAgfVxuXG4gIGlmIChpc1RydWUoZmFjdG9yeS5sb2FkaW5nKSAmJiBpc0RlZihmYWN0b3J5LmxvYWRpbmdDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdDb21wXG4gIH1cblxuICBpZiAob3duZXIgJiYgIWlzRGVmKGZhY3Rvcnkub3duZXJzKSkge1xuICAgIHZhciBvd25lcnMgPSBmYWN0b3J5Lm93bmVycyA9IFtvd25lcl07XG4gICAgdmFyIHN5bmMgPSB0cnVlO1xuICAgIHZhciB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgIHZhciB0aW1lclRpbWVvdXQgPSBudWxsXG5cbiAgICA7KG93bmVyKS4kb24oJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKG93bmVycywgb3duZXIpOyB9KTtcblxuICAgIHZhciBmb3JjZVJlbmRlciA9IGZ1bmN0aW9uIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb3duZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAob3duZXJzW2ldKS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgICAgaWYgKHRpbWVyTG9hZGluZyAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lckxvYWRpbmcpO1xuICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVyVGltZW91dCAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lclRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJlc29sdmUgPSBvbmNlKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIC8vIGNhY2hlIHJlc29sdmVkXG4gICAgICBmYWN0b3J5LnJlc29sdmVkID0gZW5zdXJlQ3RvcihyZXMsIGJhc2VDdG9yKTtcbiAgICAgIC8vIGludm9rZSBjYWxsYmFja3Mgb25seSBpZiB0aGlzIGlzIG5vdCBhIHN5bmNocm9ub3VzIHJlc29sdmVcbiAgICAgIC8vIChhc3luYyByZXNvbHZlcyBhcmUgc2hpbW1lZCBhcyBzeW5jaHJvbm91cyBkdXJpbmcgU1NSKVxuICAgICAgaWYgKCFzeW5jKSB7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVqZWN0ID0gb25jZShmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHRvIHJlc29sdmUgYXN5bmMgY29tcG9uZW50OiBcIiArIChTdHJpbmcoZmFjdG9yeSkpICtcbiAgICAgICAgKHJlYXNvbiA/IChcIlxcblJlYXNvbjogXCIgKyByZWFzb24pIDogJycpXG4gICAgICApO1xuICAgICAgaWYgKGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgICAgICBmYWN0b3J5LmVycm9yID0gdHJ1ZTtcbiAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVzID0gZmFjdG9yeShyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgaWYgKGlzT2JqZWN0JDEocmVzKSkge1xuICAgICAgaWYgKGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICAgIC8vICgpID0+IFByb21pc2VcbiAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZShyZXMuY29tcG9uZW50KSkge1xuICAgICAgICByZXMuY29tcG9uZW50LnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgICAgICBpZiAoaXNEZWYocmVzLmVycm9yKSkge1xuICAgICAgICAgIGZhY3RvcnkuZXJyb3JDb21wID0gZW5zdXJlQ3RvcihyZXMuZXJyb3IsIGJhc2VDdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMubG9hZGluZykpIHtcbiAgICAgICAgICBmYWN0b3J5LmxvYWRpbmdDb21wID0gZW5zdXJlQ3RvcihyZXMubG9hZGluZywgYmFzZUN0b3IpO1xuICAgICAgICAgIGlmIChyZXMuZGVsYXkgPT09IDApIHtcbiAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSAmJiBpc1VuZGVmKGZhY3RvcnkuZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3JjZVJlbmRlcihmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlcy5kZWxheSB8fCAyMDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMudGltZW91dCkpIHtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgICAgICAgICAgICAgICAgPyAoXCJ0aW1lb3V0IChcIiArIChyZXMudGltZW91dCkgKyBcIm1zKVwiKVxuICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgcmVzLnRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3luYyA9IGZhbHNlO1xuICAgIC8vIHJldHVybiBpbiBjYXNlIHJlc29sdmVkIHN5bmNocm9ub3VzbHlcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nXG4gICAgICA/IGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgICAgIDogZmFjdG9yeS5yZXNvbHZlZFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0FzeW5jUGxhY2Vob2xkZXIgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuaXNDb21tZW50ICYmIG5vZGUuYXN5bmNGYWN0b3J5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZXRGaXJzdENvbXBvbmVudENoaWxkIChjaGlsZHJlbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IGNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIChpc0RlZihjLmNvbXBvbmVudE9wdGlvbnMpIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKSkpIHtcbiAgICAgICAgcmV0dXJuIGNcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXZlbnRzICh2bSkge1xuICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdm0uX2hhc0hvb2tFdmVudCA9IGZhbHNlO1xuICAvLyBpbml0IHBhcmVudCBhdHRhY2hlZCBldmVudHNcbiAgdmFyIGxpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGlmIChsaXN0ZW5lcnMpIHtcbiAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycyk7XG4gIH1cbn1cblxudmFyIHRhcmdldDtcblxuZnVuY3Rpb24gYWRkIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMSAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb2ZmKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyIChldmVudCwgZm4pIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQ7XG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgX3RhcmdldC4kb2ZmKGV2ZW50LCBvbmNlSGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyAoXG4gIHZtLFxuICBsaXN0ZW5lcnMsXG4gIG9sZExpc3RlbmVyc1xuKSB7XG4gIHRhcmdldCA9IHZtO1xuICB1cGRhdGVMaXN0ZW5lcnMobGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMgfHwge30sIGFkZCwgcmVtb3ZlJDEsIGNyZWF0ZU9uY2VIYW5kbGVyLCB2bSk7XG4gIHRhcmdldCA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZXZlbnRzTWl4aW4gKFZ1ZSkge1xuICB2YXIgaG9va1JFID0gL15ob29rOi87XG4gIFZ1ZS5wcm90b3R5cGUuJG9uID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2bS4kb24oZXZlbnRbaV0sIGZuKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHZtLl9ldmVudHNbZXZlbnRdIHx8ICh2bS5fZXZlbnRzW2V2ZW50XSA9IFtdKSkucHVzaChmbik7XG4gICAgICAvLyBvcHRpbWl6ZSBob29rOmV2ZW50IGNvc3QgYnkgdXNpbmcgYSBib29sZWFuIGZsYWcgbWFya2VkIGF0IHJlZ2lzdHJhdGlvblxuICAgICAgLy8gaW5zdGVhZCBvZiBhIGhhc2ggbG9va3VwXG4gICAgICBpZiAoaG9va1JFLnRlc3QoZXZlbnQpKSB7XG4gICAgICAgIHZtLl9oYXNIb29rRXZlbnQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgZnVuY3Rpb24gb24gKCkge1xuICAgICAgdm0uJG9mZihldmVudCwgb24pO1xuICAgICAgZm4uYXBwbHkodm0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIG9uLmZuID0gZm47XG4gICAgdm0uJG9uKGV2ZW50LCBvbik7XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYWxsXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBhcnJheSBvZiBldmVudHNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkkMSA8IGw7IGkkMSsrKSB7XG4gICAgICAgIHZtLiRvZmYoZXZlbnRbaSQxXSwgZm4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGV2ZW50XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmICghY2JzKSB7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgaWYgKCFmbikge1xuICAgICAgdm0uX2V2ZW50c1tldmVudF0gPSBudWxsO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGhhbmRsZXJcbiAgICB2YXIgY2I7XG4gICAgdmFyIGkgPSBjYnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNiID0gY2JzW2ldO1xuICAgICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgICAgY2JzLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBsb3dlckNhc2VFdmVudCA9IGV2ZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAobG93ZXJDYXNlRXZlbnQgIT09IGV2ZW50ICYmIHZtLl9ldmVudHNbbG93ZXJDYXNlRXZlbnRdKSB7XG4gICAgICAgIHRpcChcbiAgICAgICAgICBcIkV2ZW50IFxcXCJcIiArIGxvd2VyQ2FzZUV2ZW50ICsgXCJcXFwiIGlzIGVtaXR0ZWQgaW4gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIgYnV0IHRoZSBoYW5kbGVyIGlzIHJlZ2lzdGVyZWQgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSBcIiArXG4gICAgICAgICAgXCJ2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gXCIgK1xuICAgICAgICAgIFwiWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgKGh5cGhlbmF0ZShldmVudCkpICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmIChjYnMpIHtcbiAgICAgIGNicyA9IGNicy5sZW5ndGggPiAxID8gdG9BcnJheShjYnMpIDogY2JzO1xuICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgICB2YXIgaW5mbyA9IFwiZXZlbnQgaGFuZGxlciBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCJcIjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjYnNbaV0sIHZtLCBhcmdzLCB2bSwgaW5mbyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIGFjdGl2ZUluc3RhbmNlID0gbnVsbDtcbnZhciBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcblxuZnVuY3Rpb24gc2V0QWN0aXZlSW5zdGFuY2Uodm0pIHtcbiAgdmFyIHByZXZBY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlO1xuICBhY3RpdmVJbnN0YW5jZSA9IHZtO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGFjdGl2ZUluc3RhbmNlID0gcHJldkFjdGl2ZUluc3RhbmNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRMaWZlY3ljbGUgKHZtKSB7XG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG5cbiAgLy8gbG9jYXRlIGZpcnN0IG5vbi1hYnN0cmFjdCBwYXJlbnRcbiAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBpZiAocGFyZW50ICYmICFvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgd2hpbGUgKHBhcmVudC4kb3B0aW9ucy5hYnN0cmFjdCAmJiBwYXJlbnQuJHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIHBhcmVudC4kY2hpbGRyZW4ucHVzaCh2bSk7XG4gIH1cblxuICB2bS4kcGFyZW50ID0gcGFyZW50O1xuICB2bS4kcm9vdCA9IHBhcmVudCA/IHBhcmVudC4kcm9vdCA6IHZtO1xuXG4gIHZtLiRjaGlsZHJlbiA9IFtdO1xuICB2bS4kcmVmcyA9IHt9O1xuXG4gIHZtLl93YXRjaGVyID0gbnVsbDtcbiAgdm0uX2luYWN0aXZlID0gbnVsbDtcbiAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gIHZtLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgdm0uX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciBwcmV2RWwgPSB2bS4kZWw7XG4gICAgdmFyIHByZXZWbm9kZSA9IHZtLl92bm9kZTtcbiAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2Uodm0pO1xuICAgIHZtLl92bm9kZSA9IHZub2RlO1xuICAgIC8vIFZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fIGlzIGluamVjdGVkIGluIGVudHJ5IHBvaW50c1xuICAgIC8vIGJhc2VkIG9uIHRoZSByZW5kZXJpbmcgYmFja2VuZCB1c2VkLlxuICAgIGlmICghcHJldlZub2RlKSB7XG4gICAgICAvLyBpbml0aWFsIHJlbmRlclxuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHZtLiRlbCwgdm5vZGUsIGh5ZHJhdGluZywgZmFsc2UgLyogcmVtb3ZlT25seSAqLyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVwZGF0ZXNcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyhwcmV2Vm5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XG4gICAgLy8gdXBkYXRlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHByZXZFbCkge1xuICAgICAgcHJldkVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IHZtO1xuICAgIH1cbiAgICAvLyBpZiBwYXJlbnQgaXMgYW4gSE9DLCB1cGRhdGUgaXRzICRlbCBhcyB3ZWxsXG4gICAgaWYgKHZtLiR2bm9kZSAmJiB2bS4kcGFyZW50ICYmIHZtLiR2bm9kZSA9PT0gdm0uJHBhcmVudC5fdm5vZGUpIHtcbiAgICAgIHZtLiRwYXJlbnQuJGVsID0gdm0uJGVsO1xuICAgIH1cbiAgICAvLyB1cGRhdGVkIGhvb2sgaXMgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIgdG8gZW5zdXJlIHRoYXQgY2hpbGRyZW4gYXJlXG4gICAgLy8gdXBkYXRlZCBpbiBhIHBhcmVudCdzIHVwZGF0ZWQgaG9vay5cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRmb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZURlc3Ryb3knKTtcbiAgICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSBwYXJlbnRcbiAgICB2YXIgcGFyZW50ID0gdm0uJHBhcmVudDtcbiAgICBpZiAocGFyZW50ICYmICFwYXJlbnQuX2lzQmVpbmdEZXN0cm95ZWQgJiYgIXZtLiRvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgICByZW1vdmUocGFyZW50LiRjaGlsZHJlbiwgdm0pO1xuICAgIH1cbiAgICAvLyB0ZWFyZG93biB3YXRjaGVyc1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gICAgdmFyIGkgPSB2bS5fd2F0Y2hlcnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZtLl93YXRjaGVyc1tpXS50ZWFyZG93bigpO1xuICAgIH1cbiAgICAvLyByZW1vdmUgcmVmZXJlbmNlIGZyb20gZGF0YSBvYlxuICAgIC8vIGZyb3plbiBvYmplY3QgbWF5IG5vdCBoYXZlIG9ic2VydmVyLlxuICAgIGlmICh2bS5fZGF0YS5fX29iX18pIHtcbiAgICAgIHZtLl9kYXRhLl9fb2JfXy52bUNvdW50LS07XG4gICAgfVxuICAgIC8vIGNhbGwgdGhlIGxhc3QgaG9vay4uLlxuICAgIHZtLl9pc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gaW52b2tlIGRlc3Ryb3kgaG9va3Mgb24gY3VycmVudCByZW5kZXJlZCB0cmVlXG4gICAgdm0uX19wYXRjaF9fKHZtLl92bm9kZSwgbnVsbCk7XG4gICAgLy8gZmlyZSBkZXN0cm95ZWQgaG9va1xuICAgIGNhbGxIb29rKHZtLCAnZGVzdHJveWVkJyk7XG4gICAgLy8gdHVybiBvZmYgYWxsIGluc3RhbmNlIGxpc3RlbmVycy5cbiAgICB2bS4kb2ZmKCk7XG4gICAgLy8gcmVtb3ZlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICAvLyByZWxlYXNlIGNpcmN1bGFyIHJlZmVyZW5jZSAoIzY3NTkpXG4gICAgaWYgKHZtLiR2bm9kZSkge1xuICAgICAgdm0uJHZub2RlLnBhcmVudCA9IG51bGw7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBtb3VudENvbXBvbmVudCAoXG4gIHZtLFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgdm0uJGVsID0gZWw7XG4gIGlmICghdm0uJG9wdGlvbnMucmVuZGVyKSB7XG4gICAgdm0uJG9wdGlvbnMucmVuZGVyID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoKHZtLiRvcHRpb25zLnRlbXBsYXRlICYmIHZtLiRvcHRpb25zLnRlbXBsYXRlLmNoYXJBdCgwKSAhPT0gJyMnKSB8fFxuICAgICAgICB2bS4kb3B0aW9ucy5lbCB8fCBlbCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgYXJlIHVzaW5nIHRoZSBydW50aW1lLW9ubHkgYnVpbGQgb2YgVnVlIHdoZXJlIHRoZSB0ZW1wbGF0ZSAnICtcbiAgICAgICAgICAnY29tcGlsZXIgaXMgbm90IGF2YWlsYWJsZS4gRWl0aGVyIHByZS1jb21waWxlIHRoZSB0ZW1wbGF0ZXMgaW50byAnICtcbiAgICAgICAgICAncmVuZGVyIGZ1bmN0aW9ucywgb3IgdXNlIHRoZSBjb21waWxlci1pbmNsdWRlZCBidWlsZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdGYWlsZWQgdG8gbW91bnQgY29tcG9uZW50OiB0ZW1wbGF0ZSBvciByZW5kZXIgZnVuY3Rpb24gbm90IGRlZmluZWQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjYWxsSG9vayh2bSwgJ2JlZm9yZU1vdW50Jyk7XG5cbiAgdmFyIHVwZGF0ZUNvbXBvbmVudDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG5hbWUgPSB2bS5fbmFtZTtcbiAgICAgIHZhciBpZCA9IHZtLl91aWQ7XG4gICAgICB2YXIgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgaWQ7XG4gICAgICB2YXIgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyBpZDtcblxuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICB2YXIgdm5vZGUgPSB2bS5fcmVuZGVyKCk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArIG5hbWUgKyBcIiByZW5kZXJcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZtLl91cGRhdGUodm5vZGUsIGh5ZHJhdGluZyk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArIG5hbWUgKyBcIiBwYXRjaFwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2bS5fdXBkYXRlKHZtLl9yZW5kZXIoKSwgaHlkcmF0aW5nKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gd2Ugc2V0IHRoaXMgdG8gdm0uX3dhdGNoZXIgaW5zaWRlIHRoZSB3YXRjaGVyJ3MgY29uc3RydWN0b3JcbiAgLy8gc2luY2UgdGhlIHdhdGNoZXIncyBpbml0aWFsIHBhdGNoIG1heSBjYWxsICRmb3JjZVVwZGF0ZSAoZS5nLiBpbnNpZGUgY2hpbGRcbiAgLy8gY29tcG9uZW50J3MgbW91bnRlZCBob29rKSwgd2hpY2ggcmVsaWVzIG9uIHZtLl93YXRjaGVyIGJlaW5nIGFscmVhZHkgZGVmaW5lZFxuICBuZXcgV2F0Y2hlcih2bSwgdXBkYXRlQ29tcG9uZW50LCBub29wLCB7XG4gICAgYmVmb3JlOiBmdW5jdGlvbiBiZWZvcmUgKCkge1xuICAgICAgaWYgKHZtLl9pc01vdW50ZWQgJiYgIXZtLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZVVwZGF0ZScpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgdHJ1ZSAvKiBpc1JlbmRlcldhdGNoZXIgKi8pO1xuICBoeWRyYXRpbmcgPSBmYWxzZTtcblxuICAvLyBtYW51YWxseSBtb3VudGVkIGluc3RhbmNlLCBjYWxsIG1vdW50ZWQgb24gc2VsZlxuICAvLyBtb3VudGVkIGlzIGNhbGxlZCBmb3IgcmVuZGVyLWNyZWF0ZWQgY2hpbGQgY29tcG9uZW50cyBpbiBpdHMgaW5zZXJ0ZWQgaG9va1xuICBpZiAodm0uJHZub2RlID09IG51bGwpIHtcbiAgICB2bS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICBjYWxsSG9vayh2bSwgJ21vdW50ZWQnKTtcbiAgfVxuICByZXR1cm4gdm1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ2hpbGRDb21wb25lbnQgKFxuICB2bSxcbiAgcHJvcHNEYXRhLFxuICBsaXN0ZW5lcnMsXG4gIHBhcmVudFZub2RlLFxuICByZW5kZXJDaGlsZHJlblxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGRldGVybWluZSB3aGV0aGVyIGNvbXBvbmVudCBoYXMgc2xvdCBjaGlsZHJlblxuICAvLyB3ZSBuZWVkIHRvIGRvIHRoaXMgYmVmb3JlIG92ZXJ3cml0aW5nICRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbi5cblxuICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgZHluYW1pYyBzY29wZWRTbG90cyAoaGFuZC13cml0dGVuIG9yIGNvbXBpbGVkIGJ1dCB3aXRoXG4gIC8vIGR5bmFtaWMgc2xvdCBuYW1lcykuIFN0YXRpYyBzY29wZWQgc2xvdHMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZSBoYXMgdGhlXG4gIC8vIFwiJHN0YWJsZVwiIG1hcmtlci5cbiAgdmFyIG5ld1Njb3BlZFNsb3RzID0gcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cztcbiAgdmFyIG9sZFNjb3BlZFNsb3RzID0gdm0uJHNjb3BlZFNsb3RzO1xuICB2YXIgaGFzRHluYW1pY1Njb3BlZFNsb3QgPSAhIShcbiAgICAobmV3U2NvcGVkU2xvdHMgJiYgIW5ld1Njb3BlZFNsb3RzLiRzdGFibGUpIHx8XG4gICAgKG9sZFNjb3BlZFNsb3RzICE9PSBlbXB0eU9iamVjdCAmJiAhb2xkU2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAobmV3U2NvcGVkU2xvdHMgJiYgdm0uJHNjb3BlZFNsb3RzLiRrZXkgIT09IG5ld1Njb3BlZFNsb3RzLiRrZXkpXG4gICk7XG5cbiAgLy8gQW55IHN0YXRpYyBzbG90IGNoaWxkcmVuIGZyb20gdGhlIHBhcmVudCBtYXkgaGF2ZSBjaGFuZ2VkIGR1cmluZyBwYXJlbnQnc1xuICAvLyB1cGRhdGUuIER5bmFtaWMgc2NvcGVkIHNsb3RzIG1heSBhbHNvIGhhdmUgY2hhbmdlZC4gSW4gc3VjaCBjYXNlcywgYSBmb3JjZWRcbiAgLy8gdXBkYXRlIGlzIG5lY2Vzc2FyeSB0byBlbnN1cmUgY29ycmVjdG5lc3MuXG4gIHZhciBuZWVkc0ZvcmNlVXBkYXRlID0gISEoXG4gICAgcmVuZGVyQ2hpbGRyZW4gfHwgICAgICAgICAgICAgICAvLyBoYXMgbmV3IHN0YXRpYyBzbG90c1xuICAgIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiB8fCAgLy8gaGFzIG9sZCBzdGF0aWMgc2xvdHNcbiAgICBoYXNEeW5hbWljU2NvcGVkU2xvdFxuICApO1xuXG4gIHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuICB2bS4kdm5vZGUgPSBwYXJlbnRWbm9kZTsgLy8gdXBkYXRlIHZtJ3MgcGxhY2Vob2xkZXIgbm9kZSB3aXRob3V0IHJlLXJlbmRlclxuXG4gIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcbiAgICB2bS5fdm5vZGUucGFyZW50ID0gcGFyZW50Vm5vZGU7XG4gIH1cbiAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG5cbiAgLy8gdXBkYXRlICRhdHRycyBhbmQgJGxpc3RlbmVycyBoYXNoXG4gIC8vIHRoZXNlIGFyZSBhbHNvIHJlYWN0aXZlIHNvIHRoZXkgbWF5IHRyaWdnZXIgY2hpbGQgdXBkYXRlIGlmIHRoZSBjaGlsZFxuICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlclxuICB2bS4kYXR0cnMgPSBwYXJlbnRWbm9kZS5kYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0O1xuICB2bS4kbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuXG4gIC8vIHVwZGF0ZSBwcm9wc1xuICBpZiAocHJvcHNEYXRhICYmIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICB2YXIgcHJvcHMgPSB2bS5fcHJvcHM7XG4gICAgdmFyIHByb3BLZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzIHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wS2V5c1tpXTtcbiAgICAgIHZhciBwcm9wT3B0aW9ucyA9IHZtLiRvcHRpb25zLnByb3BzOyAvLyB3dGYgZmxvdz9cbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgfVxuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICAvLyBrZWVwIGEgY29weSBvZiByYXcgcHJvcHNEYXRhXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICB9XG5cbiAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZhciBvbGRMaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTtcblxuICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxuICBpZiAobmVlZHNGb3JjZVVwZGF0ZSkge1xuICAgIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhyZW5kZXJDaGlsZHJlbiwgcGFyZW50Vm5vZGUuY29udGV4dCk7XG4gICAgdm0uJGZvcmNlVXBkYXRlKCk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzSW5JbmFjdGl2ZVRyZWUgKHZtKSB7XG4gIHdoaWxlICh2bSAmJiAodm0gPSB2bS4kcGFyZW50KSkge1xuICAgIGlmICh2bS5faW5hY3RpdmUpIHsgcmV0dXJuIHRydWUgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfSBlbHNlIGlmICh2bS5fZGlyZWN0SW5hY3RpdmUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodm0uX2luYWN0aXZlIHx8IHZtLl9pbmFjdGl2ZSA9PT0gbnVsbCkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSB0cnVlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG4gIGlmICghdm0uX2luYWN0aXZlKSB7XG4gICAgdm0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnZGVhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayAodm0sIGhvb2spIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGxpZmVjeWNsZSBob29rc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHZhciBoYW5kbGVycyA9IHZtLiRvcHRpb25zW2hvb2tdO1xuICB2YXIgaW5mbyA9IGhvb2sgKyBcIiBob29rXCI7XG4gIGlmIChoYW5kbGVycykge1xuICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhoYW5kbGVyc1tpXSwgdm0sIG51bGwsIHZtLCBpbmZvKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZtLl9oYXNIb29rRXZlbnQpIHtcbiAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gIH1cbiAgcG9wVGFyZ2V0KCk7XG59XG5cbi8qICAqL1xuXG52YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcbiAgJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLCcgK1xuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcgK1xuICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArXG4gICdhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnksJyArXG4gICdzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnICtcbiAgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgK1xuICAnY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsJyArXG4gICdidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcgK1xuICAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSwnICtcbiAgJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnXG4pO1xuXG4vLyB0aGlzIG1hcCBpcyBpbnRlbnRpb25hbGx5IHNlbGVjdGl2ZSwgb25seSBjb3ZlcmluZyBTVkcgZWxlbWVudHMgdGhhdCBtYXlcbi8vIGNvbnRhaW4gY2hpbGQgZWxlbWVudHMuXG52YXIgaXNTVkcgPSBtYWtlTWFwKFxuICAnc3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLCcgK1xuICAnZm9yZWlnbk9iamVjdCxnLGdseXBoLGltYWdlLGxpbmUsbWFya2VyLG1hc2ssbWlzc2luZy1nbHlwaCxwYXRoLHBhdHRlcm4sJyArXG4gICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JyxcbiAgdHJ1ZVxuKTtcblxudmFyIGlzVGV4dElucHV0VHlwZSA9IG1ha2VNYXAoJ3RleHQsbnVtYmVyLHBhc3N3b3JkLHNlYXJjaCxlbWFpbCx0ZWwsdXJsJyk7XG5cbi8qKlxuICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICpcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3RcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICovXG5cbnZhciBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbnZhciBob29rcyA9IFsnY3JlYXRlJywgJ2FjdGl2YXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveSddO1xuXG5mdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgcmV0dXJuIChcbiAgICBhLmtleSA9PT0gYi5rZXkgJiYgKFxuICAgICAgKFxuICAgICAgICBhLnRhZyA9PT0gYi50YWcgJiZcbiAgICAgICAgYS5pc0NvbW1lbnQgPT09IGIuaXNDb21tZW50ICYmXG4gICAgICAgIGlzRGVmKGEuZGF0YSkgPT09IGlzRGVmKGIuZGF0YSkgJiZcbiAgICAgICAgc2FtZUlucHV0VHlwZShhLCBiKVxuICAgICAgKSB8fCAoXG4gICAgICAgIGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiZcbiAgICAgICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmVcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwJDEoaWdub3JlKVxuICAgICAgICAgICAgPyBpZ25vcmUudGVzdCh2bm9kZS50YWcpXG4gICAgICAgICAgICA6IGlnbm9yZSA9PT0gdm5vZGUudGFnXG4gICAgICAgIH0pXG4gICAgICApICYmXG4gICAgICBjb25maWcuaXNVbmtub3duRWxlbWVudCh2bm9kZS50YWcpXG4gICAgKVxuICB9XG5cbiAgdmFyIGNyZWF0aW5nRWxtSW5WUHJlID0gMDtcblxuICBmdW5jdGlvbiBjcmVhdGVFbG0gKFxuICAgIHZub2RlLFxuICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICBwYXJlbnRFbG0sXG4gICAgcmVmRWxtLFxuICAgIG5lc3RlZCxcbiAgICBvd25lckFycmF5LFxuICAgIGluZGV4XG4gICkge1xuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBUaGlzIHZub2RlIHdhcyB1c2VkIGluIGEgcHJldmlvdXMgcmVuZGVyIVxuICAgICAgLy8gbm93IGl0J3MgdXNlZCBhcyBhIG5ldyBub2RlLCBvdmVyd3JpdGluZyBpdHMgZWxtIHdvdWxkIGNhdXNlXG4gICAgICAvLyBwb3RlbnRpYWwgcGF0Y2ggZXJyb3JzIGRvd24gdGhlIHJvYWQgd2hlbiBpdCdzIHVzZWQgYXMgYW4gaW5zZXJ0aW9uXG4gICAgICAvLyByZWZlcmVuY2Ugbm9kZS4gSW5zdGVhZCwgd2UgY2xvbmUgdGhlIG5vZGUgb24tZGVtYW5kIGJlZm9yZSBjcmVhdGluZ1xuICAgICAgLy8gYXNzb2NpYXRlZCBET00gZWxlbWVudCBmb3IgaXQuXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdm5vZGUuaXNSb290SW5zZXJ0ID0gIW5lc3RlZDsgLy8gZm9yIHRyYW5zaXRpb24gZW50ZXIgY2hlY2tcbiAgICBpZiAoY3JlYXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbmtub3duRWxlbWVudCh2bm9kZSwgY3JlYXRpbmdFbG1JblZQcmUpKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgICdVbmtub3duIGN1c3RvbSBlbGVtZW50OiA8JyArIHRhZyArICc+IC0gZGlkIHlvdSAnICtcbiAgICAgICAgICAgICdyZWdpc3RlciB0aGUgY29tcG9uZW50IGNvcnJlY3RseT8gRm9yIHJlY3Vyc2l2ZSBjb21wb25lbnRzLCAnICtcbiAgICAgICAgICAgICdtYWtlIHN1cmUgdG8gcHJvdmlkZSB0aGUgXCJuYW1lXCIgb3B0aW9uLicsXG4gICAgICAgICAgICB2bm9kZS5jb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5lbG0gPSB2bm9kZS5uc1xuICAgICAgICA/IG5vZGVPcHMuY3JlYXRlRWxlbWVudE5TKHZub2RlLm5zLCB0YWcpXG4gICAgICAgIDogbm9kZU9wcy5jcmVhdGVFbGVtZW50KHRhZywgdm5vZGUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIHtcbiAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUtLTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpKSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZUNvbW1lbnQodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIHZhciBpc1JlYWN0aXZhdGVkID0gaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGkua2VlcEFsaXZlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7XG4gICAgICAgIGkodm5vZGUsIGZhbHNlIC8qIGh5ZHJhdGluZyAqLyk7XG4gICAgICB9XG4gICAgICAvLyBhZnRlciBjYWxsaW5nIHRoZSBpbml0IGhvb2ssIGlmIHRoZSB2bm9kZSBpcyBhIGNoaWxkIGNvbXBvbmVudFxuICAgICAgLy8gaXQgc2hvdWxkJ3ZlIGNyZWF0ZWQgYSBjaGlsZCBpbnN0YW5jZSBhbmQgbW91bnRlZCBpdC4gdGhlIGNoaWxkXG4gICAgICAvLyBjb21wb25lbnQgYWxzbyBoYXMgc2V0IHRoZSBwbGFjZWhvbGRlciB2bm9kZSdzIGVsbS5cbiAgICAgIC8vIGluIHRoYXQgY2FzZSB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGVsZW1lbnQgYW5kIGJlIGRvbmUuXG4gICAgICBpZiAoaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgICAgaWYgKGlzVHJ1ZShpc1JlYWN0aXZhdGVkKSkge1xuICAgICAgICAgIHJlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdENvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpKSB7XG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCk7XG4gICAgICB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQgPSBudWxsO1xuICAgIH1cbiAgICB2bm9kZS5lbG0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZWw7XG4gICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuICAgICAgLy8gc2tpcCBhbGwgZWxlbWVudC1yZWxhdGVkIG1vZHVsZXMgZXhjZXB0IGZvciByZWYgKCMzNDU1KVxuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgICAgLy8gbWFrZSBzdXJlIHRvIGludm9rZSB0aGUgaW5zZXJ0IGhvb2tcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFjdGl2YXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpO1xuICAgIC8vIGhhY2sgZm9yICM0MzM5OiBhIHJlYWN0aXZhdGVkIGNvbXBvbmVudCB3aXRoIGlubmVyIHRyYW5zaXRpb25cbiAgICAvLyBkb2VzIG5vdCB0cmlnZ2VyIGJlY2F1c2UgdGhlIGlubmVyIG5vZGUncyBjcmVhdGVkIGhvb2tzIGFyZSBub3QgY2FsbGVkXG4gICAgLy8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0XG4gICAgLy8gdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgYmV0dGVyIHdheSB0byBkbyBpdC5cbiAgICB2YXIgaW5uZXJOb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgaW5uZXJOb2RlID0gaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChpc0RlZihpID0gaW5uZXJOb2RlLmRhdGEpICYmIGlzRGVmKGkgPSBpLnRyYW5zaXRpb24pKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuYWN0aXZhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBjYnMuYWN0aXZhdGVbaV0oZW1wdHlOb2RlLCBpbm5lck5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVubGlrZSBhIG5ld2x5IGNyZWF0ZWQgY29tcG9uZW50LFxuICAgIC8vIGEgcmVhY3RpdmF0ZWQga2VlcC1hbGl2ZSBjb21wb25lbnQgZG9lc24ndCBpbnNlcnQgaXRzZWxmXG4gICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0IChwYXJlbnQsIGVsbSwgcmVmKSB7XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIGlmIChpc0RlZihyZWYpKSB7XG4gICAgICAgIGlmIChub2RlT3BzLnBhcmVudE5vZGUocmVmKSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50LCBlbG0sIHJlZik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQocGFyZW50LCBlbG0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuICh2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY3JlYXRlRWxtKGNoaWxkcmVuW2ldLCBpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmVsbSwgbnVsbCwgdHJ1ZSwgY2hpbGRyZW4sIGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUodm5vZGUudGV4dCkpIHtcbiAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQodm5vZGUuZWxtLCBub2RlT3BzLmNyZWF0ZVRleHROb2RlKFN0cmluZyh2bm9kZS50ZXh0KSkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUGF0Y2hhYmxlICh2bm9kZSkge1xuICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgdm5vZGUgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgfVxuICAgIHJldHVybiBpc0RlZih2bm9kZS50YWcpXG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VDcmVhdGVIb29rcyAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBpID0gdm5vZGUuZGF0YS5ob29rOyAvLyBSZXVzZSB2YXJpYWJsZVxuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgaWYgKGlzRGVmKGkuY3JlYXRlKSkgeyBpLmNyZWF0ZShlbXB0eU5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkuaW5zZXJ0KSkgeyBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICAvLyBzZXQgc2NvcGUgaWQgYXR0cmlidXRlIGZvciBzY29wZWQgQ1NTLlxuICAvLyB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgc3BlY2lhbCBjYXNlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZFxuICAvLyBvZiBnb2luZyB0aHJvdWdoIHRoZSBub3JtYWwgYXR0cmlidXRlIHBhdGNoaW5nIHByb2Nlc3MuXG4gIGZ1bmN0aW9uIHNldFNjb3BlICh2bm9kZSkge1xuICAgIHZhciBpO1xuICAgIGlmIChpc0RlZihpID0gdm5vZGUuZm5TY29wZUlkKSkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlO1xuICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgIGlmIChpc0RlZihpID0gYW5jZXN0b3IuY29udGV4dCkgJiYgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpKSB7XG4gICAgICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGZvciBzbG90IGNvbnRlbnQgdGhleSBzaG91bGQgYWxzbyBnZXQgdGhlIHNjb3BlSWQgZnJvbSB0aGUgaG9zdCBpbnN0YW5jZS5cbiAgICBpZiAoaXNEZWYoaSA9IGFjdGl2ZUluc3RhbmNlKSAmJlxuICAgICAgaSAhPT0gdm5vZGUuY29udGV4dCAmJlxuICAgICAgaSAhPT0gdm5vZGUuZm5Db250ZXh0ICYmXG4gICAgICBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZClcbiAgICApIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFZub2RlcyAocGFyZW50RWxtLCByZWZFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgY3JlYXRlRWxtKHZub2Rlc1tzdGFydElkeF0sIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0sIGZhbHNlLCB2bm9kZXMsIHN0YXJ0SWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VEZXN0cm95SG9vayAodm5vZGUpIHtcbiAgICB2YXIgaSwgajtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuZGVzdHJveSkpIHsgaSh2bm9kZSk7IH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkgeyBjYnMuZGVzdHJveVtpXSh2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jaGlsZHJlbikpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7ICsraikge1xuICAgICAgICBpbnZva2VEZXN0cm95SG9vayh2bm9kZS5jaGlsZHJlbltqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlVm5vZGVzIChwYXJlbnRFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIHZhciBjaCA9IHZub2Rlc1tzdGFydElkeF07XG4gICAgICBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihjaC50YWcpKSB7XG4gICAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xuICAgICAgICB9IGVsc2UgeyAvLyBUZXh0IG5vZGVcbiAgICAgICAgICByZW1vdmVOb2RlKGNoLmVsbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rICh2bm9kZSwgcm0pIHtcbiAgICBpZiAoaXNEZWYocm0pIHx8IGlzRGVmKHZub2RlLmRhdGEpKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7XG4gICAgICBpZiAoaXNEZWYocm0pKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFja1xuICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbGlzdGVuZXJzIGNvdW50XG4gICAgICAgIHJtLmxpc3RlbmVycyArPSBsaXN0ZW5lcnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkaXJlY3RseSByZW1vdmluZ1xuICAgICAgICBybSA9IGNyZWF0ZVJtQ2Iodm5vZGUuZWxtLCBsaXN0ZW5lcnMpO1xuICAgICAgfVxuICAgICAgLy8gcmVjdXJzaXZlbHkgaW52b2tlIGhvb2tzIG9uIGNoaWxkIGNvbXBvbmVudCByb290IG5vZGVcbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGlzRGVmKGkgPSBpLl92bm9kZSkgJiYgaXNEZWYoaS5kYXRhKSkge1xuICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGksIHJtKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucmVtb3ZlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNicy5yZW1vdmVbaV0odm5vZGUsIHJtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5yZW1vdmUpKSB7XG4gICAgICAgIGkodm5vZGUsIHJtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJtKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZU5vZGUodm5vZGUuZWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDaGlsZHJlbiAocGFyZW50RWxtLCBvbGRDaCwgbmV3Q2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIHZhciBvbGRTdGFydElkeCA9IDA7XG4gICAgdmFyIG5ld1N0YXJ0SWR4ID0gMDtcbiAgICB2YXIgb2xkRW5kSWR4ID0gb2xkQ2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuICAgIHZhciBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07XG4gICAgdmFyIG5ld0VuZElkeCA9IG5ld0NoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcbiAgICB2YXIgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdO1xuICAgIHZhciBvbGRLZXlUb0lkeCwgaWR4SW5PbGQsIHZub2RlVG9Nb3ZlLCByZWZFbG07XG5cbiAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbiAgICAvLyB0byBlbnN1cmUgcmVtb3ZlZCBlbGVtZW50cyBzdGF5IGluIGNvcnJlY3QgcmVsYXRpdmUgcG9zaXRpb25zXG4gICAgLy8gZHVyaW5nIGxlYXZpbmcgdHJhbnNpdGlvbnNcbiAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhuZXdDaCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCAmJiBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgaGFzIGJlZW4gbW92ZWQgbGVmdFxuICAgICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZEVuZFZub2RlKSkge1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCByaWdodFxuICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdFbmRJZHgpO1xuICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRW5kVm5vZGUuZWxtKSk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgbGVmdFxuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRFbmRWbm9kZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1VuZGVmKG9sZEtleVRvSWR4KSkgeyBvbGRLZXlUb0lkeCA9IGNyZWF0ZUtleVRvT2xkSWR4KG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTsgfVxuICAgICAgICBpZHhJbk9sZCA9IGlzRGVmKG5ld1N0YXJ0Vm5vZGUua2V5KVxuICAgICAgICAgID8gb2xkS2V5VG9JZHhbbmV3U3RhcnRWbm9kZS5rZXldXG4gICAgICAgICAgOiBmaW5kSWR4SW5PbGQobmV3U3RhcnRWbm9kZSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgICAgICBpZiAoaXNVbmRlZihpZHhJbk9sZCkpIHsgLy8gTmV3IGVsZW1lbnRcbiAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2bm9kZVRvTW92ZSA9IG9sZENoW2lkeEluT2xkXTtcbiAgICAgICAgICBpZiAoc2FtZVZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgICAgICAgcGF0Y2hWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIHZub2RlVG9Nb3ZlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG4gICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob2xkU3RhcnRJZHggPiBvbGRFbmRJZHgpIHtcbiAgICAgIHJlZkVsbSA9IGlzVW5kZWYobmV3Q2hbbmV3RW5kSWR4ICsgMV0pID8gbnVsbCA6IG5ld0NoW25ld0VuZElkeCArIDFdLmVsbTtcbiAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIHJlZkVsbSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIGlmIChuZXdTdGFydElkeCA+IG5ld0VuZElkeCkge1xuICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChcbiAgICBvbGRWbm9kZSxcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleCxcbiAgICByZW1vdmVPbmx5XG4gICkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBjbG9uZSByZXVzZWQgdm5vZGVcbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZShvbGRWbm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIpKSB7XG4gICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICBoeWRyYXRlKG9sZFZub2RlLmVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIGlzVHJ1ZShvbGRWbm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAoaXNUcnVlKHZub2RlLmlzQ2xvbmVkKSB8fCBpc1RydWUodm5vZGUuaXNPbmNlKSlcbiAgICApIHtcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB7IHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOyB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7IG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7IH1cbiAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICByZW1vdmVWbm9kZXMoZWxtLCBvbGRDaCwgMCwgb2xkQ2gubGVuZ3RoIC0gMSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7XG4gICAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbGRWbm9kZS50ZXh0ICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgdm5vZGUudGV4dCk7XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnBvc3RwYXRjaCkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlSW5zZXJ0SG9vayAodm5vZGUsIHF1ZXVlLCBpbml0aWFsKSB7XG4gICAgLy8gZGVsYXkgaW5zZXJ0IGhvb2tzIGZvciBjb21wb25lbnQgcm9vdCBub2RlcywgaW52b2tlIHRoZW0gYWZ0ZXIgdGhlXG4gICAgLy8gZWxlbWVudCBpcyByZWFsbHkgaW5zZXJ0ZWRcbiAgICBpZiAoaXNUcnVlKGluaXRpYWwpICYmIGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgIHZub2RlLnBhcmVudC5kYXRhLnBlbmRpbmdJbnNlcnQgPSBxdWV1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBxdWV1ZVtpXS5kYXRhLmhvb2suaW5zZXJ0KHF1ZXVlW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgaHlkcmF0aW9uQmFpbGVkID0gZmFsc2U7XG4gIC8vIGxpc3Qgb2YgbW9kdWxlcyB0aGF0IGNhbiBza2lwIGNyZWF0ZSBob29rIGR1cmluZyBoeWRyYXRpb24gYmVjYXVzZSB0aGV5XG4gIC8vIGFyZSBhbHJlYWR5IHJlbmRlcmVkIG9uIHRoZSBjbGllbnQgb3IgaGFzIG5vIG5lZWQgZm9yIGluaXRpYWxpemF0aW9uXG4gIC8vIE5vdGU6IHN0eWxlIGlzIGV4Y2x1ZGVkIGJlY2F1c2UgaXQgcmVsaWVzIG9uIGluaXRpYWwgY2xvbmUgZm9yIGZ1dHVyZVxuICAvLyBkZWVwIHVwZGF0ZXMgKCM3MDYzKS5cbiAgdmFyIGlzUmVuZGVyZWRNb2R1bGUgPSBtYWtlTWFwKCdhdHRycyxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXknKTtcblxuICAvLyBOb3RlOiB0aGlzIGlzIGEgYnJvd3Nlci1vbmx5IGZ1bmN0aW9uIHNvIHdlIGNhbiBhc3N1bWUgZWxtcyBhcmUgRE9NIG5vZGVzLlxuICBmdW5jdGlvbiBoeWRyYXRlIChlbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGluVlByZSkge1xuICAgIHZhciBpO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGluVlByZSA9IGluVlByZSB8fCAoZGF0YSAmJiBkYXRhLnByZSk7XG4gICAgdm5vZGUuZWxtID0gZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpICYmIGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeSkpIHtcbiAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICAvLyBhc3NlcnQgbm9kZSBtYXRjaFxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIWFzc2VydE5vZGVNYXRjaChlbG0sIHZub2RlLCBpblZQcmUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkgeyBpKHZub2RlLCB0cnVlIC8qIGh5ZHJhdGluZyAqLyk7IH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIC8vIGNoaWxkIGNvbXBvbmVudC4gaXQgc2hvdWxkIGhhdmUgaHlkcmF0ZWQgaXRzIG93biB0cmVlLlxuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgaWYgKGlzRGVmKGNoaWxkcmVuKSkge1xuICAgICAgICAvLyBlbXB0eSBlbGVtZW50LCBhbGxvdyBjbGllbnQgdG8gcGljayB1cCBhbmQgcG9wdWxhdGUgY2hpbGRyZW5cbiAgICAgICAgaWYgKCFlbG0uaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgY3JlYXRlQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHYtaHRtbCBhbmQgZG9tUHJvcHM6IGlubmVySFRNTFxuICAgICAgICAgIGlmIChpc0RlZihpID0gZGF0YSkgJiYgaXNEZWYoaSA9IGkuZG9tUHJvcHMpICYmIGlzRGVmKGkgPSBpLmlubmVySFRNTCkpIHtcbiAgICAgICAgICAgIGlmIChpICE9PSBlbG0uaW5uZXJIVE1MKSB7XG4gICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICFoeWRyYXRpb25CYWlsZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3NlcnZlciBpbm5lckhUTUw6ICcsIGkpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignY2xpZW50IGlubmVySFRNTDogJywgZWxtLmlubmVySFRNTCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGl0ZXJhdGUgYW5kIGNvbXBhcmUgY2hpbGRyZW4gbGlzdHNcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbk1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBlbG0uZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgICAgICAgaWYgKCFjaGlsZE5vZGUgfHwgIWh5ZHJhdGUoY2hpbGROb2RlLCBjaGlsZHJlbltpJDFdLCBpbnNlcnRlZFZub2RlUXVldWUsIGluVlByZSkpIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbk1hdGNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiBjaGlsZE5vZGUgaXMgbm90IG51bGwsIGl0IG1lYW5zIHRoZSBhY3R1YWwgY2hpbGROb2RlcyBsaXN0IGlzXG4gICAgICAgICAgICAvLyBsb25nZXIgdGhhbiB0aGUgdmlydHVhbCBjaGlsZHJlbiBsaXN0LlxuICAgICAgICAgICAgaWYgKCFjaGlsZHJlbk1hdGNoIHx8IGNoaWxkTm9kZSkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdNaXNtYXRjaGluZyBjaGlsZE5vZGVzIHZzLiBWTm9kZXM6ICcsIGVsbS5jaGlsZE5vZGVzLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgdmFyIGZ1bGxJbnZva2UgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICBpZiAoIWlzUmVuZGVyZWRNb2R1bGUoa2V5KSkge1xuICAgICAgICAgICAgZnVsbEludm9rZSA9IHRydWU7XG4gICAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZnVsbEludm9rZSAmJiBkYXRhWydjbGFzcyddKSB7XG4gICAgICAgICAgLy8gZW5zdXJlIGNvbGxlY3RpbmcgZGVwcyBmb3IgZGVlcCBjbGFzcyBiaW5kaW5ncyBmb3IgZnV0dXJlIHVwZGF0ZXNcbiAgICAgICAgICB0cmF2ZXJzZShkYXRhWydjbGFzcyddKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWxtLmRhdGEgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIGVsbS5kYXRhID0gdm5vZGUudGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydE5vZGVNYXRjaCAobm9kZSwgdm5vZGUsIGluVlByZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS50YWcpKSB7XG4gICAgICByZXR1cm4gdm5vZGUudGFnLmluZGV4T2YoJ3Z1ZS1jb21wb25lbnQnKSA9PT0gMCB8fCAoXG4gICAgICAgICFpc1Vua25vd25FbGVtZW50KHZub2RlLCBpblZQcmUpICYmXG4gICAgICAgIHZub2RlLnRhZy50b0xvd2VyQ2FzZSgpID09PSAobm9kZS50YWdOYW1lICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gKHZub2RlLmlzQ29tbWVudCA/IDggOiAzKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwYXRjaCAob2xkVm5vZGUsIHZub2RlLCBoeWRyYXRpbmcsIHJlbW92ZU9ubHkpIHtcbiAgICBpZiAoaXNVbmRlZih2bm9kZSkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRWbm9kZSkpIHsgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpOyB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaXNJbml0aWFsUGF0Y2ggPSBmYWxzZTtcbiAgICB2YXIgaW5zZXJ0ZWRWbm9kZVF1ZXVlID0gW107XG5cbiAgICBpZiAoaXNVbmRlZihvbGRWbm9kZSkpIHtcbiAgICAgIC8vIGVtcHR5IG1vdW50IChsaWtlbHkgYXMgY29tcG9uZW50KSwgY3JlYXRlIG5ldyByb290IGVsZW1lbnRcbiAgICAgIGlzSW5pdGlhbFBhdGNoID0gdHJ1ZTtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7XG4gICAgICBpZiAoIWlzUmVhbEVsZW1lbnQgJiYgc2FtZVZub2RlKG9sZFZub2RlLCB2bm9kZSkpIHtcbiAgICAgICAgLy8gcGF0Y2ggZXhpc3Rpbmcgcm9vdCBub2RlXG4gICAgICAgIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG51bGwsIG51bGwsIHJlbW92ZU9ubHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzUmVhbEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudFxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQgYW5kIGlmIHdlIGNhbiBwZXJmb3JtXG4gICAgICAgICAgLy8gYSBzdWNjZXNzZnVsIGh5ZHJhdGlvbi5cbiAgICAgICAgICBpZiAob2xkVm5vZGUubm9kZVR5cGUgPT09IDEgJiYgb2xkVm5vZGUuaGFzQXR0cmlidXRlKFNTUl9BVFRSKSkge1xuICAgICAgICAgICAgb2xkVm5vZGUucmVtb3ZlQXR0cmlidXRlKFNTUl9BVFRSKTtcbiAgICAgICAgICAgIGh5ZHJhdGluZyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1RydWUoaHlkcmF0aW5nKSkge1xuICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHJldHVybiBvbGRWbm9kZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICAgJ1RoZSBjbGllbnQtc2lkZSByZW5kZXJlZCB2aXJ0dWFsIERPTSB0cmVlIGlzIG5vdCBtYXRjaGluZyAnICtcbiAgICAgICAgICAgICAgICAnc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQuIFRoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBpbmNvcnJlY3QgJyArXG4gICAgICAgICAgICAgICAgJ0hUTUwgbWFya3VwLCBmb3IgZXhhbXBsZSBuZXN0aW5nIGJsb2NrLWxldmVsIGVsZW1lbnRzIGluc2lkZSAnICtcbiAgICAgICAgICAgICAgICAnPHA+LCBvciBtaXNzaW5nIDx0Ym9keT4uIEJhaWxpbmcgaHlkcmF0aW9uIGFuZCBwZXJmb3JtaW5nICcgK1xuICAgICAgICAgICAgICAgICdmdWxsIGNsaWVudC1zaWRlIHJlbmRlci4nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGVpdGhlciBub3Qgc2VydmVyLXJlbmRlcmVkLCBvciBoeWRyYXRpb24gZmFpbGVkLlxuICAgICAgICAgIC8vIGNyZWF0ZSBhbiBlbXB0eSBub2RlIGFuZCByZXBsYWNlIGl0XG4gICAgICAgICAgb2xkVm5vZGUgPSBlbXB0eU5vZGVBdChvbGRWbm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXBsYWNpbmcgZXhpc3RpbmcgZWxlbWVudFxuICAgICAgICB2YXIgb2xkRWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgICB2YXIgcGFyZW50RWxtID0gbm9kZU9wcy5wYXJlbnROb2RlKG9sZEVsbSk7XG5cbiAgICAgICAgLy8gY3JlYXRlIG5ldyBub2RlXG4gICAgICAgIGNyZWF0ZUVsbShcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgICAgICAgLy8gZXh0cmVtZWx5IHJhcmUgZWRnZSBjYXNlOiBkbyBub3QgaW5zZXJ0IGlmIG9sZCBlbGVtZW50IGlzIGluIGFcbiAgICAgICAgICAvLyBsZWF2aW5nIHRyYW5zaXRpb24uIE9ubHkgaGFwcGVucyB3aGVuIGNvbWJpbmluZyB0cmFuc2l0aW9uICtcbiAgICAgICAgICAvLyBrZWVwLWFsaXZlICsgSE9Dcy4gKCM0NTkwKVxuICAgICAgICAgIG9sZEVsbS5fbGVhdmVDYiA/IG51bGwgOiBwYXJlbnRFbG0sXG4gICAgICAgICAgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbG0pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gdXBkYXRlIHBhcmVudCBwbGFjZWhvbGRlciBub2RlIGVsZW1lbnQsIHJlY3Vyc2l2ZWx5XG4gICAgICAgIGlmIChpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGUucGFyZW50O1xuICAgICAgICAgIHZhciBwYXRjaGFibGUgPSBpc1BhdGNoYWJsZSh2bm9kZSk7XG4gICAgICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgIGNicy5kZXN0cm95W2ldKGFuY2VzdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFuY2VzdG9yLmVsbSA9IHZub2RlLmVsbTtcbiAgICAgICAgICAgIGlmIChwYXRjaGFibGUpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICAgICAgICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgYW5jZXN0b3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vICM2NTEzXG4gICAgICAgICAgICAgIC8vIGludm9rZSBpbnNlcnQgaG9va3MgdGhhdCBtYXkgaGF2ZSBiZWVuIG1lcmdlZCBieSBjcmVhdGUgaG9va3MuXG4gICAgICAgICAgICAgIC8vIGUuZy4gZm9yIGRpcmVjdGl2ZXMgdGhhdCB1c2VzIHRoZSBcImluc2VydGVkXCIgaG9vay5cbiAgICAgICAgICAgICAgdmFyIGluc2VydCA9IGFuY2VzdG9yLmRhdGEuaG9vay5pbnNlcnQ7XG4gICAgICAgICAgICAgIGlmIChpbnNlcnQubWVyZ2VkKSB7XG4gICAgICAgICAgICAgICAgLy8gc3RhcnQgYXQgaW5kZXggMSB0byBhdm9pZCByZS1pbnZva2luZyBjb21wb25lbnQgbW91bnRlZCBob29rXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSQyID0gMTsgaSQyIDwgaW5zZXJ0LmZucy5sZW5ndGg7IGkkMisrKSB7XG4gICAgICAgICAgICAgICAgICBpbnNlcnQuZm5zW2kkMl0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlZ2lzdGVyUmVmKGFuY2VzdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRlc3Ryb3kgb2xkIG5vZGVcbiAgICAgICAgaWYgKGlzRGVmKHBhcmVudEVsbSkpIHtcbiAgICAgICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtLCBbb2xkVm5vZGVdLCAwLCAwKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50YWcpKSB7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpc0luaXRpYWxQYXRjaCk7XG4gICAgcmV0dXJuIHZub2RlLmVsbVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZGlyZWN0aXZlcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICB1cGRhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIHVuYmluZERpcmVjdGl2ZXMgKHZub2RlKSB7XG4gICAgdXBkYXRlRGlyZWN0aXZlcyh2bm9kZSwgZW1wdHlOb2RlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlRGlyZWN0aXZlcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMgfHwgdm5vZGUuZGF0YS5kaXJlY3RpdmVzKSB7XG4gICAgX3VwZGF0ZShvbGRWbm9kZSwgdm5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF91cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgaXNDcmVhdGUgPSBvbGRWbm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgaXNEZXN0cm95ID0gdm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTtcbiAgdmFyIG5ld0RpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEodm5vZGUuZGF0YS5kaXJlY3RpdmVzLCB2bm9kZS5jb250ZXh0KTtcblxuICB2YXIgZGlyc1dpdGhJbnNlcnQgPSBbXTtcbiAgdmFyIGRpcnNXaXRoUG9zdHBhdGNoID0gW107XG5cbiAgdmFyIGtleSwgb2xkRGlyLCBkaXI7XG4gIGZvciAoa2V5IGluIG5ld0RpcnMpIHtcbiAgICBvbGREaXIgPSBvbGREaXJzW2tleV07XG4gICAgZGlyID0gbmV3RGlyc1trZXldO1xuICAgIGlmICghb2xkRGlyKSB7XG4gICAgICAvLyBuZXcgZGlyZWN0aXZlLCBiaW5kXG4gICAgICBjYWxsSG9vayQxKGRpciwgJ2JpbmQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5pbnNlcnRlZCkge1xuICAgICAgICBkaXJzV2l0aEluc2VydC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIGRpcmVjdGl2ZSwgdXBkYXRlXG4gICAgICBkaXIub2xkVmFsdWUgPSBvbGREaXIudmFsdWU7XG4gICAgICBkaXIub2xkQXJnID0gb2xkRGlyLmFyZztcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAndXBkYXRlJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuY29tcG9uZW50VXBkYXRlZCkge1xuICAgICAgICBkaXJzV2l0aFBvc3RwYXRjaC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aCkge1xuICAgIHZhciBjYWxsSW5zZXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aEluc2VydC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoSW5zZXJ0W2ldLCAnaW5zZXJ0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGlzQ3JlYXRlKSB7XG4gICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGNhbGxJbnNlcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsSW5zZXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCkge1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIWlzQ3JlYXRlKSB7XG4gICAgZm9yIChrZXkgaW4gb2xkRGlycykge1xuICAgICAgaWYgKCFuZXdEaXJzW2tleV0pIHtcbiAgICAgICAgLy8gbm8gbG9uZ2VyIHByZXNlbnQsIHVuYmluZFxuICAgICAgICBjYWxsSG9vayQxKG9sZERpcnNba2V5XSwgJ3VuYmluZCcsIG9sZFZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGVtcHR5TW9kaWZpZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyQxIChcbiAgZGlycyxcbiAgdm1cbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKCFkaXJzKSB7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcmV0dXJuIHJlc1xuICB9XG4gIHZhciBpLCBkaXI7XG4gIGZvciAoaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGlyID0gZGlyc1tpXTtcbiAgICBpZiAoIWRpci5tb2RpZmllcnMpIHtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZGlyLm1vZGlmaWVycyA9IGVtcHR5TW9kaWZpZXJzO1xuICAgIH1cbiAgICByZXNbZ2V0UmF3RGlyTmFtZShkaXIpXSA9IGRpcjtcbiAgICBkaXIuZGVmID0gcmVzb2x2ZUFzc2V0KHZtLiRvcHRpb25zLCAnZGlyZWN0aXZlcycsIGRpci5uYW1lLCB0cnVlKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnZXRSYXdEaXJOYW1lIChkaXIpIHtcbiAgcmV0dXJuIGRpci5yYXdOYW1lIHx8ICgoZGlyLm5hbWUpICsgXCIuXCIgKyAoT2JqZWN0LmtleXMoZGlyLm1vZGlmaWVycyB8fCB7fSkuam9pbignLicpKSlcbn1cblxuZnVuY3Rpb24gY2FsbEhvb2skMSAoZGlyLCBob29rLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSkge1xuICB2YXIgZm4gPSBkaXIuZGVmICYmIGRpci5kZWZbaG9va107XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBmbih2bm9kZS5lbG0sIGRpciwgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZub2RlLmNvbnRleHQsIChcImRpcmVjdGl2ZSBcIiArIChkaXIubmFtZSkgKyBcIiBcIiArIGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGJhc2VNb2R1bGVzID0gW1xuICByZWYsXG4gIGRpcmVjdGl2ZXNcbl07XG5cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJzKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoIW9sZFZub2RlLmRhdGEuYXR0cnMgJiYgIXZub2RlLmRhdGEuYXR0cnMpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXIsIG9sZDtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgdmFyIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChhdHRycy5fX29iX18pIHtcbiAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgY3VyID0gYXR0cnNba2V5XTtcbiAgICBvbGQgPSBvbGRBdHRyc1trZXldO1xuICAgIGlmIChvbGQgIT09IGN1cikge1xuICAgICAgZWxtLnNldEF0dHJpYnV0ZShrZXksIGN1cik7XG4gICAgfVxuICB9XG4gIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7XG4gICAgaWYgKGF0dHJzW2tleV0gPT0gbnVsbCkge1xuICAgICAgZWxtLnNldEF0dHJpYnV0ZShrZXkpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn07XG5cbi8qICAqL1xuXG4vLyB0aGVzZSBhcmUgcmVzZXJ2ZWQgZm9yIHdlYiBiZWNhdXNlIHRoZXkgYXJlIGRpcmVjdGx5IGNvbXBpbGVkIGF3YXlcbi8vIGR1cmluZyB0ZW1wbGF0ZSBjb21waWxhdGlvblxudmFyIGlzUmVzZXJ2ZWRBdHRyID0gbWFrZU1hcCgnc3R5bGUsY2xhc3MnKTtcblxuLy8gYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSB1c2luZyBwcm9wcyBmb3IgYmluZGluZ1xudmFyIGFjY2VwdFZhbHVlID0gbWFrZU1hcCgnaW5wdXQsdGV4dGFyZWEsb3B0aW9uLHNlbGVjdCxwcm9ncmVzcycpO1xuXG52YXIgaXNFbnVtZXJhdGVkQXR0ciA9IG1ha2VNYXAoJ2NvbnRlbnRlZGl0YWJsZSxkcmFnZ2FibGUsc3BlbGxjaGVjaycpO1xuXG52YXIgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlID0gbWFrZU1hcCgnZXZlbnRzLGNhcmV0LHR5cGluZyxwbGFpbnRleHQtb25seScpO1xuXG52YXIgaXNCb29sZWFuQXR0ciA9IG1ha2VNYXAoXG4gICdhbGxvd2Z1bGxzY3JlZW4sYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNoZWNrZWQsY29tcGFjdCxjb250cm9scyxkZWNsYXJlLCcgK1xuICAnZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLCcgK1xuICAnZW5hYmxlZCxmb3Jtbm92YWxpZGF0ZSxoaWRkZW4saW5kZXRlcm1pbmF0ZSxpbmVydCxpc21hcCxpdGVtc2NvcGUsbG9vcCxtdWx0aXBsZSwnICtcbiAgJ211dGVkLG5vaHJlZixub3Jlc2l6ZSxub3NoYWRlLG5vdmFsaWRhdGUsbm93cmFwLG9wZW4scGF1c2VvbmV4aXQscmVhZG9ubHksJyArXG4gICdyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLCcgK1xuICAndHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZSdcbik7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZW5DbGFzc0ZvclZub2RlICh2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKGlzRGVmKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIGlmIChjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShjaGlsZE5vZGUuZGF0YSwgZGF0YSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChpc0RlZihwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoZGF0YSwgcGFyZW50Tm9kZS5kYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbmRlckNsYXNzKGRhdGEuc3RhdGljQ2xhc3MsIGRhdGEuY2xhc3MpXG59XG5cbmZ1bmN0aW9uIG1lcmdlQ2xhc3NEYXRhIChjaGlsZCwgcGFyZW50KSB7XG4gIHJldHVybiB7XG4gICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSxcbiAgICBjbGFzczogaXNEZWYoY2hpbGQuY2xhc3MpXG4gICAgICA/IFtjaGlsZC5jbGFzcywgcGFyZW50LmNsYXNzXVxuICAgICAgOiBwYXJlbnQuY2xhc3NcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJDbGFzcyAoXG4gIHN0YXRpY0NsYXNzLFxuICBkeW5hbWljQ2xhc3Ncbikge1xuICBpZiAoaXNEZWYoc3RhdGljQ2xhc3MpIHx8IGlzRGVmKGR5bmFtaWNDbGFzcykpIHtcbiAgICByZXR1cm4gY29uY2F0KHN0YXRpY0NsYXNzLCBzdHJpbmdpZnlDbGFzcyhkeW5hbWljQ2xhc3MpKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBjb25jYXQgKGEsIGIpIHtcbiAgcmV0dXJuIGEgPyBiID8gKGEgKyAnICcgKyBiKSA6IGEgOiAoYiB8fCAnJylcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5Q2xhc3MgKHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlBcnJheSh2YWx1ZSlcbiAgfVxuICBpZiAoaXNPYmplY3QkMSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5T2JqZWN0KHZhbHVlKVxuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUFycmF5ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBzdHJpbmdpZmllZDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoaXNEZWYoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpICYmIHN0cmluZ2lmaWVkICE9PSAnJykge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0gc3RyaW5naWZpZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5T2JqZWN0ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVtrZXldKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuICBpZiAoXG4gICAgIWRhdGEuc3RhdGljQ2xhc3MgJiZcbiAgICAhZGF0YS5jbGFzcyAmJlxuICAgICghb2xkRGF0YSB8fCAoIW9sZERhdGEuc3RhdGljQ2xhc3MgJiYgIW9sZERhdGEuY2xhc3MpKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjbHMgPSBnZW5DbGFzc0ZvclZub2RlKHZub2RlKTtcblxuICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXG4gIHZhciB0cmFuc2l0aW9uQ2xhc3MgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXM7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3MpIHtcbiAgICBjbHMgPSBjb25jYXQoY2xzLCBzdHJpbmdpZnlDbGFzcyh0cmFuc2l0aW9uQ2xhc3MpKTtcbiAgfVxuXG4gIC8vIHNldCB0aGUgY2xhc3NcbiAgaWYgKGNscyAhPT0gZWwuX3ByZXZDbGFzcykge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbHMpO1xuICAgIGVsLl9wcmV2Q2xhc3MgPSBjbHM7XG4gIH1cbn1cblxudmFyIGNsYXNzXyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVDbGFzcyxcbiAgdXBkYXRlOiB1cGRhdGVDbGFzc1xufTtcblxudmFyIHRhcmdldCQxO1xuXG5mdW5jdGlvbiBhZGQkMShldmVudCwgaGFuZGxlciwgb25jZSwgY2FwdHVyZSkge1xuICBpZiAoY2FwdHVyZSkge1xuICAgIGNvbnNvbGUubG9nKCdidWJibGUgcGhhc2Ugbm90IHN1cHBvcnRlZCcpO1xuICAgIHJldHVyblxuICB9XG4gIGlmIChvbmNlKSB7XG4gICAgdmFyIG9sZEhhbmRsZXIgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgdmFyIHJlcyA9IG9sZEhhbmRsZXIuY2FsbC5hcHBseShvbGRIYW5kbGVyLCBbIG51bGwgXS5jb25jYXQoIGFyZ3MgKSk7XG4gICAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICAgIHJlbW92ZSQyKGV2ZW50LCBudWxsLCBudWxsLCB0YXJnZXQkMSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDIoZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUsIF90YXJnZXQpIHtcbiAgaWYgKCBfdGFyZ2V0ID09PSB2b2lkIDAgKSBfdGFyZ2V0ID0gdGFyZ2V0JDE7XG5cbiAgX3RhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRE9NTGlzdGVuZXJzKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoIW9sZFZub2RlLmRhdGEub24gJiYgIXZub2RlLmRhdGEub24pIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb24gPSB2bm9kZS5kYXRhLm9uIHx8IHt9O1xuICB2YXIgb2xkT24gPSBvbGRWbm9kZS5kYXRhLm9uIHx8IHt9O1xuICB0YXJnZXQkMSA9IHZub2RlLmVsbTtcbiAgdXBkYXRlTGlzdGVuZXJzKG9uLCBvbGRPbiwgYWRkJDEsIHJlbW92ZSQyLCB2bm9kZS5jb250ZXh0KTtcbn1cblxudmFyIGV2ZW50cyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzXG59O1xuXG52YXIgbm9ybWFsaXplID0gY2FjaGVkKGNhbWVsaXplKTtcblxuZnVuY3Rpb24gY3JlYXRlU3R5bGUob2xkVm5vZGUsIHZub2RlKSB7XG4gIC8vIGNvbnNvbGUubG9nKGBcXHRcXHQgPT09PiBjcmVhdGVTdHlsZSgke29sZFZub2RlfSwgJHt2bm9kZX0pYClcbiAgaWYgKCF2bm9kZS5kYXRhLnN0YXRpY1N0eWxlKSB7XG4gICAgdXBkYXRlU3R5bGUob2xkVm5vZGUsIHZub2RlKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgc3RhdGljU3R5bGUgPSB2bm9kZS5kYXRhLnN0YXRpY1N0eWxlO1xuICBmb3IgKHZhciBuYW1lIGluIHN0YXRpY1N0eWxlKSB7XG4gICAgaWYgKHN0YXRpY1N0eWxlW25hbWVdKSB7XG4gICAgICBlbG0uc2V0U3R5bGUobm9ybWFsaXplKG5hbWUpLCBzdGF0aWNTdHlsZVtuYW1lXSk7XG4gICAgfVxuICB9XG4gIHVwZGF0ZVN0eWxlKG9sZFZub2RlLCB2bm9kZSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoIW9sZFZub2RlLmRhdGEuc3R5bGUgJiYgIXZub2RlLmRhdGEuc3R5bGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgY3VyLCBuYW1lO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkU3R5bGUgPSBvbGRWbm9kZS5kYXRhLnN0eWxlIHx8IHt9O1xuICB2YXIgc3R5bGUgPSB2bm9kZS5kYXRhLnN0eWxlIHx8IHt9O1xuXG4gIHZhciBuZWVkQ2xvbmUgPSBzdHlsZS5fX29iX187XG5cbiAgLy8gaGFuZGxlIGFycmF5IHN5bnRheFxuICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZSkpIHtcbiAgICBzdHlsZSA9IHZub2RlLmRhdGEuc3R5bGUgPSB0b09iamVjdCQxKHN0eWxlKTtcbiAgfVxuXG4gIC8vIGNsb25lIHRoZSBzdHlsZSBmb3IgZnV0dXJlIHVwZGF0ZXMsXG4gIC8vIGluIGNhc2UgdGhlIHVzZXIgbXV0YXRlcyB0aGUgc3R5bGUgb2JqZWN0IGluLXBsYWNlLlxuICBpZiAobmVlZENsb25lKSB7XG4gICAgc3R5bGUgPSB2bm9kZS5kYXRhLnN0eWxlID0gZXh0ZW5kKHt9LCBzdHlsZSk7XG4gIH1cblxuICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICBpZiAoIXN0eWxlW25hbWVdKSB7XG4gICAgICBlbG0uc2V0U3R5bGUobm9ybWFsaXplKG5hbWUpLCAnJyk7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBzdHlsZSkge1xuICAgIGN1ciA9IHN0eWxlW25hbWVdO1xuICAgIGVsbS5zZXRTdHlsZShub3JtYWxpemUobmFtZSksIGN1cik7XG4gIH1cbn1cblxuZnVuY3Rpb24gdG9PYmplY3QkMShhcnIpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJbaV0pIHtcbiAgICAgIGV4dGVuZChyZXMsIGFycltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxudmFyIHN0eWxlID0ge1xuICBjcmVhdGU6IGNyZWF0ZVN0eWxlLFxuICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG59O1xuXG4vKiAgKi9cblxudmFyIHdoaXRlc3BhY2VSRSA9IC9cXHMrLztcblxuLyoqXG4gKiBBZGQgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiBhZGRDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5hZGQoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgaWYgKGN1ci5pbmRleE9mKCcgJyArIGNscyArICcgJykgPCAwKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGN1ciArIGNscykudHJpbSgpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiByZW1vdmVDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gICAgfVxuICAgIGlmICghZWwuY2xhc3NMaXN0Lmxlbmd0aCkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIHZhciB0YXIgPSAnICcgKyBjbHMgKyAnICc7XG4gICAgd2hpbGUgKGN1ci5pbmRleE9mKHRhcikgPj0gMCkge1xuICAgICAgY3VyID0gY3VyLnJlcGxhY2UodGFyLCAnICcpO1xuICAgIH1cbiAgICBjdXIgPSBjdXIudHJpbSgpO1xuICAgIGlmIChjdXIpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvbiAoZGVmKSB7XG4gIGlmICghZGVmKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHR5cGVvZiBkZWYgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGlmIChkZWYuY3NzICE9PSBmYWxzZSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXV0b0Nzc1RyYW5zaXRpb24oZGVmLm5hbWUgfHwgJ3YnKSk7XG4gICAgfVxuICAgIGV4dGVuZChyZXMsIGRlZik7XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWYgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZilcbiAgfVxufVxuXG52YXIgYXV0b0Nzc1RyYW5zaXRpb24gPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnRlckNsYXNzOiAobmFtZSArIFwiLWVudGVyXCIpLFxuICAgIGVudGVyVG9DbGFzczogKG5hbWUgKyBcIi1lbnRlci10b1wiKSxcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKSxcbiAgICBsZWF2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlXCIpLFxuICAgIGxlYXZlVG9DbGFzczogKG5hbWUgKyBcIi1sZWF2ZS10b1wiKSxcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlLWFjdGl2ZVwiKVxuICB9XG59KTtcblxudmFyIGhhc1RyYW5zaXRpb24gPSBpbkJyb3dzZXIgJiYgIWlzSUU5O1xuaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh3aW5kb3cub250cmFuc2l0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSA7XG4gIGlmICh3aW5kb3cub25hbmltYXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkgO1xufVxuXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcbnZhciByYWYgPSBpbkJyb3dzZXJcbiAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxuICAgIDogc2V0VGltZW91dFxuICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcblxuZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuICByYWYoZnVuY3Rpb24gKCkge1xuICAgIHJhZihmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgdmFyIHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSk7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscykgPCAwKSB7XG4gICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgIGFkZENsYXNzKGVsLCBjbHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgfVxuICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gZW50ZXIodm5vZGUsIHRvZ2dsZURpc3BsYXkpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgbGVhdmUgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICBlbC5fbGVhdmVDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9sZWF2ZUNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG5cbiAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzID8gYXBwZWFyQ2xhc3MgOiBlbnRlckNsYXNzO1xuICB2YXIgYWN0aXZlQ2xhc3MgPVxuICAgIGlzQXBwZWFyICYmIGFwcGVhckFjdGl2ZUNsYXNzID8gYXBwZWFyQWN0aXZlQ2xhc3MgOiBlbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3MgPyBhcHBlYXJUb0NsYXNzIDogZW50ZXJUb0NsYXNzO1xuXG4gIHZhciBiZWZvcmVFbnRlckhvb2sgPSBpc0FwcGVhciA/IGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlciA6IGJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IHR5cGVvZiBhcHBlYXIgPT09ICdmdW5jdGlvbidcbiAgICAgID8gYXBwZWFyXG4gICAgICA6IGVudGVyXG4gICAgOiBlbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXJIb29rID0gaXNBcHBlYXIgPyBhZnRlckFwcGVhciB8fCBhZnRlckVudGVyIDogYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkSG9vayA9IGlzQXBwZWFyXG4gICAgPyBhcHBlYXJDYW5jZWxsZWQgfHwgZW50ZXJDYW5jZWxsZWRcbiAgICA6IGVudGVyQ2FuY2VsbGVkO1xuXG4gIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdCQxKGR1cmF0aW9uKSA/IGR1cmF0aW9uLmVudGVyIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBleHBsaWNpdEVudGVyRHVyYXRpb24gIT0gbnVsbCkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uLCAnZW50ZXInLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2U7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChlbnRlckhvb2spO1xuXG4gIHZhciBjYiA9IChlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICB9XG4gICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuICAgIH1cbiAgICBlbC5fZW50ZXJDYiA9IG51bGw7XG4gIH0pKTtcblxuICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgIC8vIHJlbW92ZSBwZW5kaW5nIGxlYXZlIGVsZW1lbnQgb24gZW50ZXIgYnkgaW5qZWN0aW5nIGFuIGluc2VydCBob29rXG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIHZhciBwZW5kaW5nTm9kZSA9XG4gICAgICAgIHBhcmVudCAmJiBwYXJlbnQuX3BlbmRpbmcgJiYgcGFyZW50Ll9wZW5kaW5nW3Zub2RlLmtleV07XG4gICAgICBpZiAoXG4gICAgICAgIHBlbmRpbmdOb2RlICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLnRhZyA9PT0gdm5vZGUudGFnICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYlxuICAgICAgKSB7XG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYigpO1xuICAgICAgfVxuICAgICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gc3RhcnQgZW50ZXIgdHJhbnNpdGlvblxuICBiZWZvcmVFbnRlckhvb2sgJiYgYmVmb3JlRW50ZXJIb29rKGVsKTtcbiAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24pKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdEVudGVyRHVyYXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHZub2RlLmRhdGEuc2hvdykge1xuICAgIHRvZ2dsZURpc3BsYXkgJiYgdG9nZ2xlRGlzcGxheSgpO1xuICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgfVxuXG4gIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgIGNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGVhdmUodm5vZGUsIHJtKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpKSB7XG4gICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fZW50ZXJDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBybSgpXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGxlYXZlQ2xhc3MgPSBkYXRhLmxlYXZlQ2xhc3M7XG4gIHZhciBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzcztcbiAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVMZWF2ZSA9IGRhdGEuYmVmb3JlTGVhdmU7XG4gIHZhciBsZWF2ZSA9IGRhdGEubGVhdmU7XG4gIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICB2YXIgbGVhdmVDYW5jZWxsZWQgPSBkYXRhLmxlYXZlQ2FuY2VsbGVkO1xuICB2YXIgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZTtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2U7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChsZWF2ZSk7XG5cbiAgdmFyIGV4cGxpY2l0TGVhdmVEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0JDEoZHVyYXRpb24pID8gZHVyYXRpb24ubGVhdmUgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbiwgJ2xlYXZlJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGNiID0gKGVsLl9sZWF2ZUNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5fcGVuZGluZykge1xuICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xuICAgIH1cbiAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gIH0pKTtcblxuICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgIGRlbGF5TGVhdmUocGVyZm9ybUxlYXZlKTtcbiAgfSBlbHNlIHtcbiAgICBwZXJmb3JtTGVhdmUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlcmZvcm1MZWF2ZSgpIHtcbiAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkXG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpW1xuICAgICAgICB2bm9kZS5rZXlcbiAgICAgIF0gPSB2bm9kZTtcbiAgICB9XG4gICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpO1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0TGVhdmVEdXJhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgbGVhdmUgJiYgbGVhdmUoZWwsIGNiKTtcbiAgICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9XG59XG5cbi8vIG9ubHkgdXNlZCBpbiBkZXYgbW9kZVxuZnVuY3Rpb24gY2hlY2tEdXJhdGlvbih2YWwsIG5hbWUsIHZub2RlKSB7XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBcIiArXG4gICAgICAgIFwiZ290IFwiICsgKEpTT04uc3RyaW5naWZ5KHZhbCkpICsgXCIuXCIsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIE5hTiAtIFwiICtcbiAgICAgICAgJ3RoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC4nLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNWYWxpZER1cmF0aW9uKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbClcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSB0cmFuc2l0aW9uIGhvb2sncyBhcmd1bWVudCBsZW5ndGguIFRoZSBob29rIG1heSBiZTpcbiAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZuc1xuICogLSBhIHdyYXBwZWQgY29tcG9uZW50IG1ldGhvZCAoY2hlY2sgLl9sZW5ndGgpXG4gKiAtIGEgcGxhaW4gZnVuY3Rpb24gKC5sZW5ndGgpXG4gKi9cbmZ1bmN0aW9uIGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZm4pIHtcbiAgaWYgKGlzVW5kZWYoZm4pKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdmFyIGludm9rZXJGbnMgPSBmbi5mbnM7XG4gIGlmIChpc0RlZihpbnZva2VyRm5zKSkge1xuICAgIC8vIGludm9rZXJcbiAgICByZXR1cm4gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChcbiAgICAgIEFycmF5LmlzQXJyYXkoaW52b2tlckZucykgPyBpbnZva2VyRm5zWzBdIDogaW52b2tlckZuc1xuICAgIClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZuLl9sZW5ndGggfHwgZm4ubGVuZ3RoKSA+IDFcbiAgfVxufVxuXG5mdW5jdGlvbiBfZW50ZXIoXywgdm5vZGUpIHtcbiAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgIGVudGVyKHZub2RlKTtcbiAgfVxufVxuXG52YXIgdHJhbnNpdGlvbiA9IHtcbiAgY3JlYXRlOiBfZW50ZXIsXG4gIGFjdGl2YXRlOiBfZW50ZXIsXG4gIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKHZub2RlLCBybSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgICAgbGVhdmUodm5vZGUsIHJtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBwbGF0Zm9ybU1vZHVsZXMgPSBbYXR0cnMsIGNsYXNzXywgZXZlbnRzLCBzdHlsZSwgdHJhbnNpdGlvbl07XG5cbnZhciBhY3Rpb25CYXIgPSB7XG4gIHRlbXBsYXRlOiBcIlxcbiAgICA8TmF0aXZlQWN0aW9uQmFyIH5hY3Rpb25CYXIgdi1iaW5kPVxcXCIkYXR0cnNcXFwiIHYtb249XFxcIiRsaXN0ZW5lcnNcXFwiPlxcbiAgICAgIDxzbG90IC8+XFxuICAgIDwvTmF0aXZlQWN0aW9uQmFyPlxcbiAgXCJcbn07XG5cbnZhciBhbmRyb2lkID0ge1xuICBmdW5jdGlvbmFsOiB0cnVlLFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoLCByZWYpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSByZWYuY2hpbGRyZW47XG5cbiAgICBpZiAocmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy9wbGF0Zm9ybScpLmlzQW5kcm9pZCkge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuXG4gICAgfVxuICB9XG59O1xuXG52YXIgZnJhbWVzID0gbmV3IE1hcCgpO1xuXG5mdW5jdGlvbiBzZXRGcmFtZShpZCwgZnJhbWUpIHtcbiAgcmV0dXJuIGZyYW1lcy5zZXQoaWQsIGZyYW1lKVxufVxuXG5mdW5jdGlvbiBnZXRGcmFtZShpZCkge1xuICByZXR1cm4gZnJhbWVzLmdldChpZClcbn1cblxuZnVuY3Rpb24gZGVsZXRlRnJhbWUoaWQpIHtcbiAgcmV0dXJuIGZyYW1lcy5kZWxldGUoaWQpXG59XG5cbnZhciBpZENvdW50ZXIgPSAxO1xuXG52YXIgZnJhbWUgPSB7XG4gIHByb3BzOiB7XG4gICAgaWQ6IHtcbiAgICAgIGRlZmF1bHQ6ICdkZWZhdWx0J1xuICAgIH0sXG4gICAgdHJhbnNpdGlvbjoge1xuICAgICAgdHlwZTogW1N0cmluZywgT2JqZWN0XSxcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICB9LFxuICAgICdpb3M6dHJhbnNpdGlvbic6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE9iamVjdF0sXG4gICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICBkZWZhdWx0OiBudWxsXG4gICAgfSxcbiAgICAnYW5kcm9pZDp0cmFuc2l0aW9uJzoge1xuICAgICAgdHlwZTogW1N0cmluZywgT2JqZWN0XSxcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICB9LFxuICAgIGNsZWFySGlzdG9yeToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBiYWNrc3RhY2tWaXNpYmxlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgLy8gaW5qZWN0ZWQgYnkgdGhlIHRlbXBsYXRlIGNvbXBpbGVyXG4gICAgaGFzUm91dGVyVmlldzoge1xuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9XG4gIH0sXG4gIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb3BlcnRpZXM6IHt9XG4gICAgfVxuICB9LFxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkge1xuICAgIHZhciBwcm9wZXJ0aWVzID0ge307XG5cbiAgICBpZiAoZ2V0RnJhbWUodGhpcy4kcHJvcHMuaWQpKSB7XG4gICAgICBwcm9wZXJ0aWVzLmlkID0gdGhpcy4kcHJvcHMuaWQgKyBpZENvdW50ZXIrKztcbiAgICB9XG5cbiAgICB0aGlzLnByb3BlcnRpZXMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLiRhdHRycywgdGhpcy4kcHJvcHMsIHByb3BlcnRpZXMpO1xuXG4gICAgc2V0RnJhbWUodGhpcy5wcm9wZXJ0aWVzLmlkLCB0aGlzKTtcbiAgfSxcbiAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQoKSB7XG4gICAgZGVsZXRlRnJhbWUodGhpcy5wcm9wZXJ0aWVzLmlkKTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoaCkge1xuICAgIHJldHVybiBoKFxuICAgICAgJ05hdGl2ZUZyYW1lJyxcbiAgICAgIHtcbiAgICAgICAgYXR0cnM6IHRoaXMucHJvcGVydGllcyxcbiAgICAgICAgb246IHRoaXMuJGxpc3RlbmVyc1xuICAgICAgfSxcbiAgICAgIHRoaXMuJHNsb3RzLmRlZmF1bHRcbiAgICApXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBfZ2V0RnJhbWU6IGZ1bmN0aW9uIF9nZXRGcmFtZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLiRlbC5uYXRpdmVWaWV3XG4gICAgfSxcblxuICAgIF9lbnN1cmVUcmFuc2l0aW9uT2JqZWN0OiBmdW5jdGlvbiBfZW5zdXJlVHJhbnNpdGlvbk9iamVjdCh0cmFuc2l0aW9uKSB7XG4gICAgICBpZiAodHlwZW9mIHRyYW5zaXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB7IG5hbWU6IHRyYW5zaXRpb24gfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRyYW5zaXRpb25cbiAgICB9LFxuXG4gICAgX2NvbXBvc2VUcmFuc2l0aW9uOiBmdW5jdGlvbiBfY29tcG9zZVRyYW5zaXRpb24oZW50cnkpIHtcbiAgICAgIHZhciBpc0FuZHJvaWQgPSByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3BsYXRmb3JtJykuaXNBbmRyb2lkO1xuICAgICAgdmFyIHBsYXRmb3JtRW50cnlQcm9wID0gXCJ0cmFuc2l0aW9uXCIgKyAoaXNBbmRyb2lkID8gJ0FuZHJvaWQnIDogJ2lPUycpO1xuICAgICAgdmFyIGVudHJ5UHJvcCA9IGVudHJ5W3BsYXRmb3JtRW50cnlQcm9wXVxuICAgICAgICA/IHBsYXRmb3JtRW50cnlQcm9wXG4gICAgICAgIDogJ3RyYW5zaXRpb24nO1xuICAgICAgdmFyIHBsYXRmb3JtUHJvcCA9IChpc0FuZHJvaWQgPyAnYW5kcm9pZCcgOiAnaW9zJykgKyBcIjp0cmFuc2l0aW9uXCI7XG4gICAgICB2YXIgcHJvcCA9IHRoaXNbcGxhdGZvcm1Qcm9wXSA/IHBsYXRmb3JtUHJvcCA6ICd0cmFuc2l0aW9uJztcblxuICAgICAgaWYgKGVudHJ5W2VudHJ5UHJvcF0pIHtcbiAgICAgICAgZW50cnlbZW50cnlQcm9wXSA9IHRoaXMuX2Vuc3VyZVRyYW5zaXRpb25PYmplY3QoZW50cnlbZW50cnlQcm9wXSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXNbcHJvcF0pIHtcbiAgICAgICAgZW50cnlbZW50cnlQcm9wXSA9IHRoaXMuX2Vuc3VyZVRyYW5zaXRpb25PYmplY3QodGhpc1twcm9wXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlbnRyeVxuICAgIH0sXG5cbiAgICBub3RpZnlQYWdlTW91bnRlZDogZnVuY3Rpb24gbm90aWZ5UGFnZU1vdW50ZWQocGFnZVZtKSB7XG4gICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIGJhY2tzdGFja1Zpc2libGU6IHRoaXMuYmFja3N0YWNrVmlzaWJsZSxcbiAgICAgICAgY2xlYXJIaXN0b3J5OiB0aGlzLmNsZWFySGlzdG9yeSxcbiAgICAgICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYWdlVm0uJGVsLm5hdGl2ZVZpZXc7IH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcyQxLm5hdmlnYXRlKG9wdGlvbnMpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIG5hdmlnYXRlOiBmdW5jdGlvbiBuYXZpZ2F0ZShlbnRyeSwgYmFjaykge1xuICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgICBpZiAoIGJhY2sgPT09IHZvaWQgMCApIGJhY2sgPSBmYWxzZTtcblxuICAgICAgdmFyIGZyYW1lID0gdGhpcy5fZ2V0RnJhbWUoKTtcblxuICAgICAgaWYgKGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGZyYW1lLmdvQmFjayhlbnRyeSlcbiAgICAgIH1cblxuICAgICAgLy8gcmVzb2x2ZSB0aGUgcGFnZSBmcm9tIHRoZSBlbnRyeSBhbmQgYXR0YWNoIGEgbmF2aWdhdGVkVG8gbGlzdGVuZXJcbiAgICAgIC8vIHRvIGZpcmUgdGhlIGZyYW1lIGV2ZW50c1xuICAgICAgdmFyIHBhZ2UgPSBlbnRyeS5jcmVhdGUoKTtcbiAgICAgIHBhZ2Uub25jZSgnbmF2aWdhdGVkVG8nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMkMS4kZW1pdCgnbmF2aWdhdGVkJywgZW50cnkpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgaWYgKGFyZ3MuaXNCYWNrTmF2aWdhdGlvbikge1xuICAgICAgICAgIHBhZ2Uub2ZmKCduYXZpZ2F0ZWRGcm9tJywgaGFuZGxlcik7XG5cbiAgICAgICAgICB0aGlzJDEuJGVtaXQoJ25hdmlnYXRlZEJhY2snLCBlbnRyeSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBwYWdlLm9uKCduYXZpZ2F0ZWRGcm9tJywgaGFuZGxlcik7XG5cbiAgICAgIGVudHJ5LmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBhZ2U7IH07XG5cbiAgICAgIHRoaXMuX2NvbXBvc2VUcmFuc2l0aW9uKGVudHJ5KTtcbiAgICAgIGZyYW1lLm5hdmlnYXRlKGVudHJ5KTtcbiAgICB9LFxuXG4gICAgYmFjazogZnVuY3Rpb24gYmFjayhiYWNrc3RhY2tFbnRyeSkge1xuICAgICAgaWYgKCBiYWNrc3RhY2tFbnRyeSA9PT0gdm9pZCAwICkgYmFja3N0YWNrRW50cnkgPSBudWxsO1xuXG4gICAgICB0aGlzLm5hdmlnYXRlKGJhY2tzdGFja0VudHJ5LCB0cnVlKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBpb3MgPSB7XG4gIGZ1bmN0aW9uYWw6IHRydWUsXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGgsIHJlZikge1xuICAgIHZhciBjaGlsZHJlbiA9IHJlZi5jaGlsZHJlbjtcblxuICAgIGlmIChyZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3BsYXRmb3JtJykuaXNJT1MpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlblxuICAgIH1cbiAgfVxufTtcblxudmFyIFZVRV9WSUVXID0gJ19fdnVlVk5vZGVSZWZfXyc7XG5cbnZhciB0aWQgPSAwO1xudmFyIHZUZW1wbGF0ZSA9IHtcbiAgcHJvcHM6IHtcbiAgICBuYW1lOiB7XG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9LFxuICAgIGlmOiB7XG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHtcbiAgICBpZiAoIXRoaXMuJHNjb3BlZFNsb3RzLmRlZmF1bHQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuJHRlbXBsYXRlcyA9IHRoaXMuJGVsLnBhcmVudE5vZGUuJHRlbXBsYXRlcyA9IHRoaXMuJHBhcmVudC4kdGVtcGxhdGVzID1cbiAgICAgIHRoaXMuJHBhcmVudC4kdGVtcGxhdGVzIHx8IG5ldyBUZW1wbGF0ZUJhZygpO1xuICAgIHRoaXMuJHRlbXBsYXRlcy5yZWdpc3RlclRlbXBsYXRlKFxuICAgICAgdGhpcy4kcHJvcHMubmFtZSB8fCAodGhpcy4kcHJvcHMuaWYgPyAoXCJ2LXRlbXBsYXRlLVwiICsgKHRpZCsrKSkgOiAnZGVmYXVsdCcpLFxuICAgICAgdGhpcy4kcHJvcHMuaWYsXG4gICAgICB0aGlzLiRzY29wZWRTbG90cy5kZWZhdWx0XG4gICAgKTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoKSB7fVxufTtcblxudmFyIFRlbXBsYXRlQmFnID0gZnVuY3Rpb24gVGVtcGxhdGVCYWcoKSB7XG4gIHRoaXMuX3RlbXBsYXRlTWFwID0gbmV3IE1hcCgpO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQxID0geyBzZWxlY3RvckZuOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cblRlbXBsYXRlQmFnLnByb3RvdHlwZS5yZWdpc3RlclRlbXBsYXRlID0gZnVuY3Rpb24gcmVnaXN0ZXJUZW1wbGF0ZSAobmFtZSwgY29uZGl0aW9uLCBzY29wZWRGbikge1xuICB0aGlzLl90ZW1wbGF0ZU1hcC5zZXQobmFtZSwge1xuICAgIHNjb3BlZEZuOiBzY29wZWRGbixcbiAgICBjb25kaXRpb25GbjogdGhpcy5nZXRDb25kaXRpb25Gbihjb25kaXRpb24pLFxuICAgIGtleWVkVGVtcGxhdGU6IG5ldyBWdWVLZXllZFRlbXBsYXRlKG5hbWUsIHNjb3BlZEZuKVxuICB9KTtcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQxLnNlbGVjdG9yRm4uZ2V0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJldHVybiBmdW5jdGlvbiB0ZW1wbGF0ZVNlbGVjdG9yRm4oaXRlbSkge1xuICAgIHZhciBpdGVyYXRvciA9IHNlbGYuX3RlbXBsYXRlTWFwLmVudHJpZXMoKTtcbiAgICB2YXIgY3VycjtcbiAgICB3aGlsZSAoKGN1cnIgPSBpdGVyYXRvci5uZXh0KCkudmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IGN1cnJbMF07XG4gICAgICAgIHZhciBjb25kaXRpb25GbiA9IGN1cnJbMV0uY29uZGl0aW9uRm47XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoY29uZGl0aW9uRm4oaXRlbSkpIHtcbiAgICAgICAgICByZXR1cm4gbmFtZVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgfVxuICAgIHJldHVybiAnZGVmYXVsdCdcbiAgfVxufTtcblxuVGVtcGxhdGVCYWcucHJvdG90eXBlLmdldENvbmRpdGlvbkZuID0gZnVuY3Rpb24gZ2V0Q29uZGl0aW9uRm4gKGNvbmRpdGlvbikge1xuICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdjdHgnLCAoXCJ3aXRoKGN0eCkgeyByZXR1cm4gISEoXCIgKyBjb25kaXRpb24gKyBcIikgfVwiKSlcbn07XG5cblRlbXBsYXRlQmFnLnByb3RvdHlwZS5nZXRLZXllZFRlbXBsYXRlID0gZnVuY3Rpb24gZ2V0S2V5ZWRUZW1wbGF0ZSAobmFtZSkge1xuICByZXR1cm4gdGhpcy5fdGVtcGxhdGVNYXAuZ2V0KG5hbWUpLmtleWVkVGVtcGxhdGVcbn07XG5cblRlbXBsYXRlQmFnLnByb3RvdHlwZS5wYXRjaFRlbXBsYXRlID0gZnVuY3Rpb24gcGF0Y2hUZW1wbGF0ZSAobmFtZSwgY29udGV4dCwgb2xkVm5vZGUpIHtcbiAgdmFyIHZub2RlID0gdGhpcy5fdGVtcGxhdGVNYXAuZ2V0KG5hbWUpLnNjb3BlZEZuKGNvbnRleHQpO1xuICAvLyBpbiAyLjYgc2NvcGVkRm4gcmV0dXJucyBhbiBhcnJheSFcbiAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgdm5vZGUgPSB2bm9kZVswXTtcbiAgfVxuXG4gIHZhciBuYXRpdmVWaWV3ID0gcGF0Y2gob2xkVm5vZGUsIHZub2RlKS5uYXRpdmVWaWV3O1xuICBuYXRpdmVWaWV3W1ZVRV9WSUVXXSA9IHZub2RlO1xuXG4gIHJldHVybiBuYXRpdmVWaWV3XG59O1xuXG5UZW1wbGF0ZUJhZy5wcm90b3R5cGUuZ2V0QXZhaWxhYmxlID0gZnVuY3Rpb24gZ2V0QXZhaWxhYmxlICgpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5fdGVtcGxhdGVNYXAua2V5cygpKVxufTtcblxuVGVtcGxhdGVCYWcucHJvdG90eXBlLmdldEtleWVkVGVtcGxhdGVzID0gZnVuY3Rpb24gZ2V0S2V5ZWRUZW1wbGF0ZXMgKCkge1xuICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl90ZW1wbGF0ZU1hcC52YWx1ZXMoKSkubWFwKFxuICAgIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgdmFyIGtleWVkVGVtcGxhdGUgPSByZWYua2V5ZWRUZW1wbGF0ZTtcblxuICAgICAgICByZXR1cm4ga2V5ZWRUZW1wbGF0ZTtcbiAgICB9XG4gIClcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBUZW1wbGF0ZUJhZy5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQxICk7XG5cbnZhciBWdWVLZXllZFRlbXBsYXRlID0gZnVuY3Rpb24gVnVlS2V5ZWRUZW1wbGF0ZShrZXksIHNjb3BlZEZuKSB7XG4gIHRoaXMuX2tleSA9IGtleTtcbiAgdGhpcy5fc2NvcGVkRm4gPSBzY29wZWRGbjtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMSQxID0geyBrZXk6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDEkMS5rZXkuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fa2V5XG59O1xuXG5WdWVLZXllZFRlbXBsYXRlLnByb3RvdHlwZS5jcmVhdGVWaWV3ID0gZnVuY3Rpb24gY3JlYXRlVmlldyAoKSB7XG4gIC8vIHdlIGFyZSByZXR1cm5pbmcgbnVsbCBiZWNhdXNlIHdlIGRvbid0IGhhdmUgdGhlIGRhdGEgaGVyZVxuICAvLyB0aGUgdmlldyB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhlIGBwYXRjaFRlbXBsYXRlYCBtZXRob2QgYWJvdmUuXG4gIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbmF0aXZlc2NyaXB0LXZ1ZS9uYXRpdmVzY3JpcHQtdnVlL2lzc3Vlcy8yMjkjaXNzdWVjb21tZW50LTM5MDMzMDQ3NFxuICByZXR1cm4gbnVsbFxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZ1ZUtleWVkVGVtcGxhdGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMSQxICk7XG5cbnZhciBsaXN0VmlldyA9IHtcbiAgcHJvcHM6IHtcbiAgICBpdGVtczoge1xuICAgICAgdHlwZTogW0FycmF5LCBPYmplY3RdLFxuICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHZhciBPYnNlcnZhYmxlQXJyYXkgPSByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL2RhdGEvb2JzZXJ2YWJsZS1hcnJheScpXG4gICAgICAgICAgLk9ic2VydmFibGVBcnJheTtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSB8fCB2YWwgaW5zdGFuY2VvZiBPYnNlcnZhYmxlQXJyYXlcbiAgICAgIH0sXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgJythbGlhcyc6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdpdGVtJ1xuICAgIH0sXG4gICAgJytpbmRleCc6IHtcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH1cbiAgfSxcblxuICB0ZW1wbGF0ZTogXCJcXG4gICAgPE5hdGl2ZUxpc3RWaWV3XFxuICAgICAgcmVmPVxcXCJsaXN0Vmlld1xcXCJcXG4gICAgICA6aXRlbXM9XFxcIml0ZW1zXFxcIlxcbiAgICAgIHYtYmluZD1cXFwiJGF0dHJzXFxcIlxcbiAgICAgIHYtb249XFxcImxpc3RlbmVyc1xcXCJcXG4gICAgICBAaXRlbVRhcD1cXFwib25JdGVtVGFwXFxcIlxcbiAgICAgIEBpdGVtTG9hZGluZz1cXFwib25JdGVtTG9hZGluZ1xcXCJcXG4gICAgPlxcbiAgICAgIDxzbG90IC8+XFxuICAgIDwvTmF0aXZlTGlzdFZpZXc+XFxuICBcIixcblxuICB3YXRjaDoge1xuICAgIGl0ZW1zOiB7XG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKG5ld1ZhbCkge1xuICAgICAgICB0aGlzLiRyZWZzLmxpc3RWaWV3LnNldEF0dHJpYnV0ZSgnaXRlbXMnLCBuZXdWYWwpO1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgIH0sXG4gICAgICBkZWVwOiB0cnVlXG4gICAgfVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7XG4gICAgLy8gd2UgbmVlZCB0byByZW1vdmUgdGhlIGl0ZW1UYXAgaGFuZGxlciBmcm9tIGEgY2xvbmUgb2YgdGhlICRsaXN0ZW5lcnNcbiAgICAvLyBvYmplY3QgYmVjYXVzZSB3ZSBhcmUgZW1pdHRpbmcgdGhlIGV2ZW50IG91cnNlbHZlcyB3aXRoIGFkZGVkIGRhdGEuXG4gICAgdmFyIGxpc3RlbmVycyA9IGV4dGVuZCh7fSwgdGhpcy4kbGlzdGVuZXJzKTtcbiAgICBkZWxldGUgbGlzdGVuZXJzLml0ZW1UYXA7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG5cbiAgICB0aGlzLmdldEl0ZW1Db250ZXh0ID0gZ2V0SXRlbUNvbnRleHQuYmluZCh0aGlzKTtcbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgaWYgKCF0aGlzLiR0ZW1wbGF0ZXMpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuJHJlZnMubGlzdFZpZXcuc2V0QXR0cmlidXRlKFxuICAgICAgJ19pdGVtVGVtcGxhdGVzSW50ZXJuYWwnLFxuICAgICAgdGhpcy4kdGVtcGxhdGVzLmdldEtleWVkVGVtcGxhdGVzKClcbiAgICApO1xuICAgIHRoaXMuJHJlZnMubGlzdFZpZXcuc2V0QXR0cmlidXRlKCdfaXRlbVRlbXBsYXRlU2VsZWN0b3InLCBmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgIHJldHVybiB0aGlzJDEuJHRlbXBsYXRlcy5zZWxlY3RvckZuKHRoaXMkMS5nZXRJdGVtQ29udGV4dChpdGVtLCBpbmRleCkpXG4gICAgfSk7XG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIG9uSXRlbVRhcDogZnVuY3Rpb24gb25JdGVtVGFwKGFyZ3MpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ2l0ZW1UYXAnLCBleHRlbmQoeyBpdGVtOiB0aGlzLmdldEl0ZW0oYXJncy5pbmRleCkgfSwgYXJncykpO1xuICAgIH0sXG4gICAgb25JdGVtTG9hZGluZzogZnVuY3Rpb24gb25JdGVtTG9hZGluZyhhcmdzKSB7XG4gICAgICBpZiAoIXRoaXMuJHRlbXBsYXRlcykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdmFyIGluZGV4ID0gYXJncy5pbmRleDtcbiAgICAgIHZhciBpdGVtcyA9IGFyZ3Mub2JqZWN0Lml0ZW1zO1xuXG4gICAgICB2YXIgY3VycmVudEl0ZW0gPSB0aGlzLmdldEl0ZW0oaW5kZXgpO1xuXG4gICAgICB2YXIgbmFtZSA9IGFyZ3Mub2JqZWN0Ll9pdGVtVGVtcGxhdGVTZWxlY3RvcihjdXJyZW50SXRlbSwgaW5kZXgsIGl0ZW1zKTtcbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5nZXRJdGVtQ29udGV4dChjdXJyZW50SXRlbSwgaW5kZXgpO1xuICAgICAgdmFyIG9sZFZub2RlID0gYXJncy52aWV3ICYmIGFyZ3Mudmlld1tWVUVfVklFV107XG5cbiAgICAgIGFyZ3MudmlldyA9IHRoaXMuJHRlbXBsYXRlcy5wYXRjaFRlbXBsYXRlKG5hbWUsIGNvbnRleHQsIG9sZFZub2RlKTtcbiAgICB9LFxuICAgIHJlZnJlc2g6IGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgICB0aGlzLiRyZWZzLmxpc3RWaWV3Lm5hdGl2ZVZpZXcucmVmcmVzaCgpO1xuICAgIH0sXG4gICAgZ2V0SXRlbTogZnVuY3Rpb24gZ2V0SXRlbShpZHgpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5pdGVtcy5nZXRJdGVtID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdGhpcy5pdGVtcy5nZXRJdGVtKGlkeClcbiAgICAgICAgOiB0aGlzLml0ZW1zW2lkeF1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldEl0ZW1Db250ZXh0KFxuICBpdGVtLFxuICBpbmRleCxcbiAgYWxpYXMsXG4gIGluZGV4X2FsaWFzXG4pIHtcbiAgdmFyIG9iajtcblxuICBpZiAoIGFsaWFzID09PSB2b2lkIDAgKSBhbGlhcyA9IHRoaXMuJHByb3BzWycrYWxpYXMnXTtcbiAgaWYgKCBpbmRleF9hbGlhcyA9PT0gdm9pZCAwICkgaW5kZXhfYWxpYXMgPSB0aGlzLiRwcm9wc1snK2luZGV4J107XG4gIHJldHVybiAoIG9iaiA9IHt9LCBvYmpbYWxpYXNdID0gaXRlbSwgb2JqW2luZGV4X2FsaWFzIHx8ICckaW5kZXgnXSA9IGluZGV4LCBvYmouJGV2ZW4gPSBpbmRleCAlIDIgPT09IDAsIG9iai4kb2RkID0gaW5kZXggJSAyICE9PSAwLCBvYmogKVxufVxuXG52YXIgUEFHRV9SRUYgPSAnX192dWVQYWdlUmVmX18nO1xuXG52YXIgcGFnZSA9IHtcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoaCkge1xuICAgIHJldHVybiBoKFxuICAgICAgJ05hdGl2ZVBhZ2UnLFxuICAgICAge1xuICAgICAgICBhdHRyczogdGhpcy4kYXR0cnMsXG4gICAgICAgIG9uOiB0aGlzLiRsaXN0ZW5lcnNcbiAgICAgIH0sXG4gICAgICB0aGlzLiRzbG90cy5kZWZhdWx0XG4gICAgKVxuICB9LFxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdGhpcy4kZWwubmF0aXZlVmlld1tQQUdFX1JFRl0gPSB0aGlzO1xuXG4gICAgdmFyIGZyYW1lID0gdGhpcy5fZmluZFBhcmVudEZyYW1lKCk7XG5cbiAgICBpZiAoZnJhbWUpIHtcbiAgICAgIGZyYW1lLm5vdGlmeVBhZ2VNb3VudGVkKHRoaXMpO1xuICAgIH1cblxuICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLmlzQmFja05hdmlnYXRpb24pIHtcbiAgICAgICAgdGhpcyQxLiRlbC5uYXRpdmVWaWV3Lm9mZignbmF2aWdhdGVkRnJvbScsIGhhbmRsZXIpO1xuICAgICAgICB0aGlzJDEuJHBhcmVudC4kZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLiRlbC5uYXRpdmVWaWV3Lm9uKCduYXZpZ2F0ZWRGcm9tJywgaGFuZGxlcik7XG5cbiAgICAvLyBlbnN1cmUgdGhhdCB0aGUgcGFyZW50IHZ1ZSBpbnN0YW5jZSBpcyBkZXN0cm95ZWQgd2hlbiB0aGVcbiAgICAvLyBwYWdlIGlzIGRpc3Bvc2VkIChjbGVhckhpc3Rvcnk6IHRydWUgZm9yIGV4YW1wbGUpXG4gICAgdmFyIGRpc3Bvc2UgPSB0aGlzLiRlbC5uYXRpdmVWaWV3LmRpc3Bvc2VOYXRpdmVWaWV3O1xuICAgIHRoaXMuJGVsLm5hdGl2ZVZpZXcuZGlzcG9zZU5hdGl2ZVZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgdGhpcyQxLiRwYXJlbnQuJGRlc3Ryb3koKTtcbiAgICAgIGRpc3Bvc2UuY2FsbCh0aGlzJDEuJGVsLm5hdGl2ZVZpZXcsIGFyZ3MpO1xuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBfZmluZFBhcmVudEZyYW1lOiBmdW5jdGlvbiBfZmluZFBhcmVudEZyYW1lKCkge1xuICAgICAgdmFyIGZyYW1lID0gdGhpcy4kcGFyZW50O1xuXG4gICAgICB3aGlsZSAoZnJhbWUgJiYgZnJhbWUuJG9wdGlvbnMubmFtZSAhPT0gJ0ZyYW1lJykge1xuICAgICAgICBmcmFtZSA9IGZyYW1lLiRwYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmcmFtZVxuICAgIH1cbiAgfVxufTtcblxudmFyIHRhYlZpZXcgPSB7XG4gIG1vZGVsOiB7XG4gICAgcHJvcDogJ3NlbGVjdGVkSW5kZXgnLFxuICAgIGV2ZW50OiAnc2VsZWN0ZWRJbmRleENoYW5nZSdcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoKSB7XG4gICAgcmV0dXJuIGgoXG4gICAgICAnTmF0aXZlVGFiVmlldycsXG4gICAgICB7XG4gICAgICAgIG9uOiB0aGlzLiRsaXN0ZW5lcnMsXG4gICAgICAgIGF0dHJzOiB0aGlzLiRhdHRyc1xuICAgICAgfSxcbiAgICAgIHRoaXMuJHNsb3RzLmRlZmF1bHRcbiAgICApXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIHJlZ2lzdGVyVGFiOiBmdW5jdGlvbiByZWdpc3RlclRhYih0YWJWaWV3KSB7XG4gICAgICB2YXIgaXRlbXMgPSB0aGlzLiRlbC5uYXRpdmVWaWV3Lml0ZW1zIHx8IFtdO1xuXG4gICAgICB0aGlzLiRlbC5zZXRBdHRyaWJ1dGUoJ2l0ZW1zJywgaXRlbXMuY29uY2F0KFt0YWJWaWV3XSkpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHRhYlZpZXdJdGVtID0ge1xuICB0ZW1wbGF0ZTogXCI8TmF0aXZlVGFiVmlld0l0ZW0+PHNsb3QgLz48L05hdGl2ZVRhYlZpZXdJdGVtPlwiLFxuXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7XG4gICAgaWYgKHRoaXMuJGVsLmNoaWxkTm9kZXMubGVuZ3RoID4gMSkge1xuICAgICAgd2FybignVGFiVmlld0l0ZW0gc2hvdWxkIGNvbnRhaW4gb25seSAxIHJvb3QgZWxlbWVudCcsIHRoaXMpO1xuICAgIH1cblxuICAgIHZhciBfbmF0aXZlVmlldyA9IHRoaXMuJGVsLm5hdGl2ZVZpZXc7XG4gICAgX25hdGl2ZVZpZXcudmlldyA9IHRoaXMuJGVsLmNoaWxkTm9kZXNbMF0ubmF0aXZlVmlldztcbiAgICB0aGlzLiRwYXJlbnQucmVnaXN0ZXJUYWIoX25hdGl2ZVZpZXcpO1xuICB9XG59O1xuXG52YXIgYm90dG9tTmF2aWdhdGlvbiA9IHtcbiAgbW9kZWw6IHtcbiAgICBwcm9wOiAnc2VsZWN0ZWRJbmRleCcsXG4gICAgZXZlbnQ6ICdzZWxlY3RlZEluZGV4Q2hhbmdlJ1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKGgpIHtcbiAgICByZXR1cm4gaChcbiAgICAgICdOYXRpdmVCb3R0b21OYXZpZ2F0aW9uJyxcbiAgICAgIHtcbiAgICAgICAgb246IHRoaXMuJGxpc3RlbmVycyxcbiAgICAgICAgYXR0cnM6IHRoaXMuJGF0dHJzXG4gICAgICB9LFxuICAgICAgdGhpcy4kc2xvdHMuZGVmYXVsdFxuICAgIClcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgcmVnaXN0ZXJUYWJTdHJpcDogZnVuY3Rpb24gcmVnaXN0ZXJUYWJTdHJpcCh0YWJTdHJpcCkge1xuICAgICAgdGhpcy4kZWwuc2V0QXR0cmlidXRlKCd0YWJTdHJpcCcsIHRhYlN0cmlwKTtcbiAgICB9LFxuICAgIHJlZ2lzdGVyVGFiQ29udGVudEl0ZW06IGZ1bmN0aW9uIHJlZ2lzdGVyVGFiQ29udGVudEl0ZW0odGFiQ29udGVudEl0ZW0pIHtcbiAgICAgIHZhciBpdGVtcyA9IHRoaXMuJGVsLm5hdGl2ZVZpZXcuaXRlbXMgfHwgW107XG5cbiAgICAgIHRoaXMuJGVsLnNldEF0dHJpYnV0ZSgnaXRlbXMnLCBpdGVtcy5jb25jYXQoW3RhYkNvbnRlbnRJdGVtXSkpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHRhYnMgPSB7XG4gIG1vZGVsOiB7XG4gICAgcHJvcDogJ3NlbGVjdGVkSW5kZXgnLFxuICAgIGV2ZW50OiAnc2VsZWN0ZWRJbmRleENoYW5nZSdcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoKSB7XG4gICAgcmV0dXJuIGgoXG4gICAgICAnTmF0aXZlVGFicycsXG4gICAgICB7XG4gICAgICAgIG9uOiB0aGlzLiRsaXN0ZW5lcnMsXG4gICAgICAgIGF0dHJzOiB0aGlzLiRhdHRyc1xuICAgICAgfSxcbiAgICAgIHRoaXMuJHNsb3RzLmRlZmF1bHRcbiAgICApXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIHJlZ2lzdGVyVGFiU3RyaXA6IGZ1bmN0aW9uIHJlZ2lzdGVyVGFiU3RyaXAodGFiU3RyaXApIHtcbiAgICAgIHRoaXMuJGVsLnNldEF0dHJpYnV0ZSgndGFiU3RyaXAnLCB0YWJTdHJpcCk7XG4gICAgfSxcbiAgICByZWdpc3RlclRhYkNvbnRlbnRJdGVtOiBmdW5jdGlvbiByZWdpc3RlclRhYkNvbnRlbnRJdGVtKHRhYkNvbnRlbnRJdGVtKSB7XG4gICAgICB2YXIgaXRlbXMgPSB0aGlzLiRlbC5uYXRpdmVWaWV3Lml0ZW1zIHx8IFtdO1xuXG4gICAgICB0aGlzLiRlbC5zZXRBdHRyaWJ1dGUoJ2l0ZW1zJywgaXRlbXMuY29uY2F0KFt0YWJDb250ZW50SXRlbV0pKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB0YWJTdHJpcCA9IHtcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoaCkge1xuICAgIHJldHVybiBoKFxuICAgICAgJ05hdGl2ZVRhYlN0cmlwJyxcbiAgICAgIHtcbiAgICAgICAgb246IHRoaXMuJGxpc3RlbmVycyxcbiAgICAgICAgYXR0cnM6IHRoaXMuJGF0dHJzXG4gICAgICB9LFxuICAgICAgdGhpcy4kc2xvdHMuZGVmYXVsdFxuICAgIClcbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkge1xuICAgIHZhciBfbmF0aXZlVmlldyA9IHRoaXMuJGVsLm5hdGl2ZVZpZXc7XG4gICAgdGhpcy4kcGFyZW50LnJlZ2lzdGVyVGFiU3RyaXAoX25hdGl2ZVZpZXcpO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICByZWdpc3RlclRhYlN0cmlwSXRlbTogZnVuY3Rpb24gcmVnaXN0ZXJUYWJTdHJpcEl0ZW0odGFiU3RyaXBJdGVtKSB7XG4gICAgICB2YXIgaXRlbXMgPSB0aGlzLiRlbC5uYXRpdmVWaWV3Lml0ZW1zIHx8IFtdO1xuXG4gICAgICB0aGlzLiRlbC5zZXRBdHRyaWJ1dGUoJ2l0ZW1zJywgaXRlbXMuY29uY2F0KFt0YWJTdHJpcEl0ZW1dKSk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdGFiU3RyaXBJdGVtID0ge1xuICB0ZW1wbGF0ZTogXCI8TmF0aXZlVGFiU3RyaXBJdGVtPjxzbG90IC8+PC9OYXRpdmVUYWJTdHJpcEl0ZW0+XCIsXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHtcbiAgICB2YXIgX25hdGl2ZVZpZXcgPSB0aGlzLiRlbC5uYXRpdmVWaWV3O1xuICAgIHRoaXMuJHBhcmVudC5yZWdpc3RlclRhYlN0cmlwSXRlbShfbmF0aXZlVmlldyk7XG4gIH1cbn07XG5cbnZhciB0YWJDb250ZW50SXRlbSA9IHtcbiAgdGVtcGxhdGU6IFwiPE5hdGl2ZVRhYkNvbnRlbnRJdGVtPjxzbG90IC8+PC9OYXRpdmVUYWJDb250ZW50SXRlbT5cIixcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkge1xuICAgIGlmICh0aGlzLiRlbC5jaGlsZE5vZGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHdhcm4oJ1RhYkNvbnRlbnRJdGVtIHNob3VsZCBjb250YWluIG9ubHkgMSByb290IGVsZW1lbnQnLCB0aGlzKTtcbiAgICB9XG5cbiAgICB2YXIgX25hdGl2ZVZpZXcgPSB0aGlzLiRlbC5uYXRpdmVWaWV3O1xuICAgIF9uYXRpdmVWaWV3LnZpZXcgPSB0aGlzLiRlbC5jaGlsZE5vZGVzWzBdLm5hdGl2ZVZpZXc7XG4gICAgdGhpcy4kcGFyZW50LnJlZ2lzdGVyVGFiQ29udGVudEl0ZW0oX25hdGl2ZVZpZXcpO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHRyYW5zaXRpb25Qcm9wcyA9IHtcbiAgbmFtZTogU3RyaW5nLFxuICBhcHBlYXI6IEJvb2xlYW4sXG4gIGNzczogQm9vbGVhbixcbiAgbW9kZTogU3RyaW5nLFxuICB0eXBlOiBTdHJpbmcsXG4gIGVudGVyQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVDbGFzczogU3RyaW5nLFxuICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVUb0NsYXNzOiBTdHJpbmcsXG4gIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJDbGFzczogU3RyaW5nLFxuICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBhcHBlYXJUb0NsYXNzOiBTdHJpbmcsXG4gIGR1cmF0aW9uOiBbTnVtYmVyLCBTdHJpbmcsIE9iamVjdF1cbn07XG5cbi8vIGluIGNhc2UgdGhlIGNoaWxkIGlzIGFsc28gYW4gYWJzdHJhY3QgY29tcG9uZW50LCBlLmcuIDxrZWVwLWFsaXZlPlxuLy8gd2Ugd2FudCB0byByZWN1cnNpdmVseSByZXRyaWV2ZSB0aGUgcmVhbCBjb21wb25lbnQgdG8gYmUgcmVuZGVyZWRcbmZ1bmN0aW9uIGdldFJlYWxDaGlsZCAodm5vZGUpIHtcbiAgdmFyIGNvbXBPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGNvbXBPcHRpb25zICYmIGNvbXBPcHRpb25zLkN0b3Iub3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHJldHVybiBnZXRSZWFsQ2hpbGQoZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjb21wT3B0aW9ucy5jaGlsZHJlbikpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFRyYW5zaXRpb25EYXRhIChjb21wKSB7XG4gIHZhciBkYXRhID0ge307XG4gIHZhciBvcHRpb25zID0gY29tcC4kb3B0aW9ucztcbiAgLy8gcHJvcHNcbiAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMucHJvcHNEYXRhKSB7XG4gICAgZGF0YVtrZXldID0gY29tcFtrZXldO1xuICB9XG4gIC8vIGV2ZW50cy5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMgYW5kIHBhc3MgdGhlbSBkaXJlY3RseSB0byB0aGUgdHJhbnNpdGlvbiBtZXRob2RzXG4gIHZhciBsaXN0ZW5lcnMgPSBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGZvciAodmFyIGtleSQxIGluIGxpc3RlbmVycykge1xuICAgIGRhdGFbY2FtZWxpemUoa2V5JDEpXSA9IGxpc3RlbmVyc1trZXkkMV07XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gcGxhY2Vob2xkZXIgKGgsIHJhd0NoaWxkKSB7XG4gIGlmICgvXFxkLWtlZXAtYWxpdmUkLy50ZXN0KHJhd0NoaWxkLnRhZykpIHtcbiAgICByZXR1cm4gaCgna2VlcC1hbGl2ZScsIHtcbiAgICAgIHByb3BzOiByYXdDaGlsZC5jb21wb25lbnRPcHRpb25zLnByb3BzRGF0YVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzUGFyZW50VHJhbnNpdGlvbiAodm5vZGUpIHtcbiAgd2hpbGUgKCh2bm9kZSA9IHZub2RlLnBhcmVudCkpIHtcbiAgICBpZiAodm5vZGUuZGF0YS50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1NhbWVDaGlsZCAoY2hpbGQsIG9sZENoaWxkKSB7XG4gIHJldHVybiBvbGRDaGlsZC5rZXkgPT09IGNoaWxkLmtleSAmJiBvbGRDaGlsZC50YWcgPT09IGNoaWxkLnRhZ1xufVxuXG52YXIgaXNOb3RUZXh0Tm9kZSA9IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRhZyB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYyk7IH07XG5cbnZhciBpc1ZTaG93RGlyZWN0aXZlID0gZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubmFtZSA9PT0gJ3Nob3cnOyB9O1xuXG52YXIgVHJhbnNpdGlvbiA9IHtcbiAgbmFtZTogJ3RyYW5zaXRpb24nLFxuICBwcm9wczogdHJhbnNpdGlvblByb3BzLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGlzTm90VGV4dE5vZGUpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgd2FybihcbiAgICAgICAgJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQuIFVzZSAnICtcbiAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBtb2RlID0gdGhpcy5tb2RlO1xuXG4gICAgLy8gd2FybiBpbnZhbGlkIG1vZGVcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgbW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJ1xuICAgICkge1xuICAgICAgd2FybihcbiAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHJhd0NoaWxkID0gY2hpbGRyZW5bMF07XG5cbiAgICAvLyBpZiB0aGlzIGlzIGEgY29tcG9uZW50IHJvb3Qgbm9kZSBhbmQgdGhlIGNvbXBvbmVudCdzXG4gICAgLy8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG4gICAgaWYgKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICAvLyBhcHBseSB0cmFuc2l0aW9uIGRhdGEgdG8gY2hpbGRcbiAgICAvLyB1c2UgZ2V0UmVhbENoaWxkKCkgdG8gaWdub3JlIGFic3RyYWN0IGNvbXBvbmVudHMgZS5nLiBrZWVwLWFsaXZlXG4gICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGVhdmluZykge1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgIH1cblxuICAgIC8vIGVuc3VyZSBhIGtleSB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgdm5vZGUgdHlwZSBhbmQgdG8gdGhpcyB0cmFuc2l0aW9uXG4gICAgLy8gY29tcG9uZW50IGluc3RhbmNlLiBUaGlzIGtleSB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHBlbmRpbmcgbGVhdmluZyBub2Rlc1xuICAgIC8vIGR1cmluZyBlbnRlcmluZy5cbiAgICB2YXIgaWQgPSBcIl9fdHJhbnNpdGlvbi1cIiArICh0aGlzLl91aWQpICsgXCItXCI7XG4gICAgY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGxcbiAgICAgID8gY2hpbGQuaXNDb21tZW50XG4gICAgICAgID8gaWQgKyAnY29tbWVudCdcbiAgICAgICAgOiBpZCArIGNoaWxkLnRhZ1xuICAgICAgOiBpc1ByaW1pdGl2ZShjaGlsZC5rZXkpXG4gICAgICAgID8gKFN0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpID09PSAwID8gY2hpbGQua2V5IDogaWQgKyBjaGlsZC5rZXkpXG4gICAgICAgIDogY2hpbGQua2V5O1xuXG4gICAgdmFyIGRhdGEgPSAoY2hpbGQuZGF0YSB8fCAoY2hpbGQuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcbiAgICB2YXIgb2xkUmF3Q2hpbGQgPSB0aGlzLl92bm9kZTtcbiAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXG4gICAgLy8gbWFyayB2LXNob3dcbiAgICAvLyBzbyB0aGF0IHRoZSB0cmFuc2l0aW9uIG1vZHVsZSBjYW4gaGFuZCBvdmVyIHRoZSBjb250cm9sIHRvIHRoZSBkaXJlY3RpdmVcbiAgICBpZiAoY2hpbGQuZGF0YS5kaXJlY3RpdmVzICYmIGNoaWxkLmRhdGEuZGlyZWN0aXZlcy5zb21lKGlzVlNob3dEaXJlY3RpdmUpKSB7XG4gICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIG9sZENoaWxkICYmXG4gICAgICBvbGRDaGlsZC5kYXRhICYmXG4gICAgICAhaXNTYW1lQ2hpbGQoY2hpbGQsIG9sZENoaWxkKSAmJlxuICAgICAgIWlzQXN5bmNQbGFjZWhvbGRlcihvbGRDaGlsZCkgJiZcbiAgICAgIC8vICM2Njg3IGNvbXBvbmVudCByb290IGlzIGEgY29tbWVudCBub2RlXG4gICAgICAhKG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlICYmIG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpXG4gICAgKSB7XG4gICAgICAvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmVcbiAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbiAgICAgIHZhciBvbGREYXRhID0gb2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMkMS5fbGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gb2xkUmF3Q2hpbGRcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkgeyBkZWxheWVkTGVhdmUoKTsgfTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkgeyBkZWxheWVkTGVhdmUgPSBsZWF2ZTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn07XG5cbnZhciBlbGVtZW50TWFwID0ge307XG52YXIgbmF0aXZlUmVnRXhwID0gL05hdGl2ZS9naTtcbnZhciBkYXNoUmVnRXhwID0gLy0vZztcblxudmFyIGRlZmF1bHRWaWV3TWV0YSA9IHtcbiAgc2tpcEFkZFRvRG9tOiBmYWxzZSxcbiAgaXNVbmFyeVRhZzogZmFsc2UsXG4gIHRhZ05hbWVzcGFjZTogJycsXG4gIGNhbkJlTGVmdE9wZW5UYWc6IGZhbHNlLFxuICBtb2RlbDogbnVsbCxcbiAgY29tcG9uZW50OiBudWxsXG59O1xuXG5mdW5jdGlvbiBub3JtYWxpemVFbGVtZW50TmFtZShlbGVtZW50TmFtZSkge1xuICByZXR1cm4gKFwibmF0aXZlXCIgKyAoZWxlbWVudE5hbWVcbiAgICAucmVwbGFjZShuYXRpdmVSZWdFeHAsICcnKVxuICAgIC5yZXBsYWNlKGRhc2hSZWdFeHAsICcnKVxuICAgIC50b0xvd2VyQ2FzZSgpKSlcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJFbGVtZW50KGVsZW1lbnROYW1lLCByZXNvbHZlciwgbWV0YSkge1xuICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemVFbGVtZW50TmFtZShlbGVtZW50TmFtZSk7XG5cbiAgbWV0YSA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRWaWV3TWV0YSwgbWV0YSk7XG5cbiAgaWYgKGVsZW1lbnRNYXBbbm9ybWFsaXplZE5hbWVdKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKChcIkVsZW1lbnQgZm9yIFwiICsgZWxlbWVudE5hbWUgKyBcIiBhbHJlYWR5IHJlZ2lzdGVyZWQuXCIpKVxuICB9XG5cbiAgaWYgKCFtZXRhLmNvbXBvbmVudCkge1xuICAgIC8vIGlmIG5vIFZ1ZSBjb21wb25lbnQgaXMgcGFzc2VkLCB3cmFwIHRoZSBzaW1wbGVyIHZ1ZSBjb21wb25lbnRcbiAgICAvLyB3aGljaCBiaW5kIHRoZSBldmVudHMgYW5kIGF0dHJpYnV0ZXMgdG8gdGhlIE5TIG9uZVxuICAgIG1ldGEuY29tcG9uZW50ID0ge1xuICAgICAgZnVuY3Rpb25hbDogdHJ1ZSxcbiAgICAgIG1vZGVsOiBtZXRhLm1vZGVsLFxuICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoaCwgcmVmKSB7XG4gICAgICAgIHZhciBkYXRhID0gcmVmLmRhdGE7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHJlZi5jaGlsZHJlbjtcblxuICAgICAgICByZXR1cm4gaChub3JtYWxpemVkTmFtZSwgZGF0YSwgY2hpbGRyZW4pXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBtZXRhLmNvbXBvbmVudC5uYW1lID0gZWxlbWVudE5hbWU7XG5cbiAgdmFyIGVudHJ5ID0ge1xuICAgIHJlc29sdmVyOiByZXNvbHZlcixcbiAgICBtZXRhOiBtZXRhXG4gIH07XG4gIGVsZW1lbnRNYXBbbm9ybWFsaXplZE5hbWVdID0gZW50cnk7XG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRNYXAoKSB7XG4gIHJldHVybiBlbGVtZW50TWFwXG59XG5cbmZ1bmN0aW9uIGdldFZpZXdDbGFzcyhlbGVtZW50TmFtZSkge1xuICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemVFbGVtZW50TmFtZShlbGVtZW50TmFtZSk7XG4gIHZhciBlbnRyeSA9IGVsZW1lbnRNYXBbbm9ybWFsaXplZE5hbWVdO1xuXG4gIGlmICghZW50cnkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKChcIk5vIGtub3duIGNvbXBvbmVudCBmb3IgZWxlbWVudCBcIiArIGVsZW1lbnROYW1lICsgXCIuXCIpKVxuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cnkucmVzb2x2ZXIoKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigoXCJDb3VsZCBub3QgbG9hZCB2aWV3IGZvcjogXCIgKyBlbGVtZW50TmFtZSArIFwiLiBcIiArIGUpKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFZpZXdNZXRhKGVsZW1lbnROYW1lKSB7XG4gIHZhciBub3JtYWxpemVkTmFtZSA9IG5vcm1hbGl6ZUVsZW1lbnROYW1lKGVsZW1lbnROYW1lKTtcblxuICB2YXIgbWV0YSA9IGRlZmF1bHRWaWV3TWV0YTtcbiAgdmFyIGVudHJ5ID0gZWxlbWVudE1hcFtub3JtYWxpemVkTmFtZV07XG5cbiAgaWYgKGVudHJ5ICYmIGVudHJ5Lm1ldGEpIHtcbiAgICBtZXRhID0gZW50cnkubWV0YTtcbiAgfVxuXG4gIHJldHVybiBtZXRhXG59XG5cbmZ1bmN0aW9uIGlzS25vd25WaWV3KGVsZW1lbnROYW1lKSB7XG4gIHJldHVybiBlbGVtZW50TWFwW25vcm1hbGl6ZUVsZW1lbnROYW1lKGVsZW1lbnROYW1lKV1cbn1cblxucmVnaXN0ZXJFbGVtZW50KFxuICAnQWN0aW9uQmFyJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9hY3Rpb24tYmFyJykuQWN0aW9uQmFyOyB9LFxuICB7XG4gICAgcmVtb3ZlQ2hpbGQ6IGZ1bmN0aW9uIHJlbW92ZUNoaWxkKHBhcmVudCwgY2hpbGQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHBhcmVudC5uYXRpdmVWaWV3Ll9yZW1vdmVWaWV3KGNoaWxkLm5hdGl2ZVZpZXcpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpZ25vcmUgZXhjZXB0aW9uIC0gY2hpbGQgaXMgbGlrZWx5IGFscmVhZHkgcmVtb3ZlZC9yZXBsYWNlZFxuICAgICAgICAvLyBmaXhlcyAjNzZcbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbXBvbmVudDogYWN0aW9uQmFyXG4gIH1cbik7XG5cbnJlZ2lzdGVyRWxlbWVudChcbiAgJ0FjdGlvbkl0ZW0nLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2FjdGlvbi1iYXInKS5BY3Rpb25JdGVtOyB9XG4pO1xuXG5yZWdpc3RlckVsZW1lbnQoJ2FuZHJvaWQnLCBudWxsLCB7XG4gIGNvbXBvbmVudDogYW5kcm9pZFxufSk7XG5cbnJlZ2lzdGVyRWxlbWVudCgnaW9zJywgbnVsbCwge1xuICBjb21wb25lbnQ6IGlvc1xufSk7XG5cbnJlZ2lzdGVyRWxlbWVudChcbiAgJ0xpc3RWaWV3JyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9saXN0LXZpZXcnKS5MaXN0VmlldzsgfSxcbiAge1xuICAgIGNvbXBvbmVudDogbGlzdFZpZXdcbiAgfVxuKTtcblxucmVnaXN0ZXJFbGVtZW50KFxuICAnTmF2aWdhdGlvbkJ1dHRvbicsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvYWN0aW9uLWJhcicpLk5hdmlnYXRpb25CdXR0b247IH1cbik7XG5cbnJlZ2lzdGVyRWxlbWVudChcbiAgJ1RhYlZpZXcnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3RhYi12aWV3JykuVGFiVmlldzsgfSxcbiAge1xuICAgIG1vZGVsOiB7XG4gICAgICBwcm9wOiAnc2VsZWN0ZWRJbmRleCcsXG4gICAgICBldmVudDogJ3NlbGVjdGVkSW5kZXhDaGFuZ2UnXG4gICAgfSxcbiAgICBjb21wb25lbnQ6IHRhYlZpZXdcbiAgfVxuKTtcblxucmVnaXN0ZXJFbGVtZW50KFxuICAnVGFiVmlld0l0ZW0nLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3RhYi12aWV3JykuVGFiVmlld0l0ZW07IH0sXG4gIHtcbiAgICBza2lwQWRkVG9Eb206IHRydWUsXG4gICAgY29tcG9uZW50OiB0YWJWaWV3SXRlbVxuICB9XG4pO1xuXG5yZWdpc3RlckVsZW1lbnQoXG4gICdCb3R0b21OYXZpZ2F0aW9uJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9ib3R0b20tbmF2aWdhdGlvbicpLkJvdHRvbU5hdmlnYXRpb247IH0sXG4gIHtcbiAgICBtb2RlbDoge1xuICAgICAgcHJvcDogJ3NlbGVjdGVkSW5kZXgnLFxuICAgICAgZXZlbnQ6ICdzZWxlY3RlZEluZGV4Q2hhbmdlJ1xuICAgIH0sXG4gICAgY29tcG9uZW50OiBib3R0b21OYXZpZ2F0aW9uXG4gIH1cbik7XG5cbnJlZ2lzdGVyRWxlbWVudCgnVGFicycsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvdGFicycpLlRhYnM7IH0sIHtcbiAgbW9kZWw6IHtcbiAgICBwcm9wOiAnc2VsZWN0ZWRJbmRleCcsXG4gICAgZXZlbnQ6ICdzZWxlY3RlZEluZGV4Q2hhbmdlJ1xuICB9LFxuICBjb21wb25lbnQ6IHRhYnNcbn0pO1xuXG5yZWdpc3RlckVsZW1lbnQoXG4gICdUYWJTdHJpcCcsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvdGFiLW5hdmlnYXRpb24tYmFzZS90YWItc3RyaXAnKS5UYWJTdHJpcDsgfSxcbiAge1xuICAgIHNraXBBZGRUb0RvbTogdHJ1ZSxcbiAgICBjb21wb25lbnQ6IHRhYlN0cmlwXG4gIH1cbik7XG5cbnJlZ2lzdGVyRWxlbWVudChcbiAgJ1RhYlN0cmlwSXRlbScsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvdGFiLW5hdmlnYXRpb24tYmFzZS90YWItc3RyaXAtaXRlbScpXG4gICAgICAuVGFiU3RyaXBJdGVtOyB9LFxuICB7XG4gICAgc2tpcEFkZFRvRG9tOiB0cnVlLFxuICAgIGNvbXBvbmVudDogdGFiU3RyaXBJdGVtXG4gIH1cbik7XG5cbnJlZ2lzdGVyRWxlbWVudChcbiAgJ1RhYkNvbnRlbnRJdGVtJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS90YWItbmF2aWdhdGlvbi1iYXNlL3RhYi1jb250ZW50LWl0ZW0nKVxuICAgICAgLlRhYkNvbnRlbnRJdGVtOyB9LFxuICB7XG4gICAgc2tpcEFkZFRvRG9tOiB0cnVlLFxuICAgIGNvbXBvbmVudDogdGFiQ29udGVudEl0ZW1cbiAgfVxuKTtcblxucmVnaXN0ZXJFbGVtZW50KCd0cmFuc2l0aW9uJywgbnVsbCwge1xuICBjb21wb25lbnQ6IFRyYW5zaXRpb25cbn0pO1xuXG5yZWdpc3RlckVsZW1lbnQoJ3YtdGVtcGxhdGUnLCBudWxsLCB7XG4gIGNvbXBvbmVudDogdlRlbXBsYXRlXG59KTtcblxuLy8gTlMgY29tcG9uZW50cyB3aGljaCB1c2VzIHRoZSBhdXRvbWF0aWMgcmVnaXN0ZXJFbGVtZW50IFZ1ZSB3cmFwcGVyXG4vLyBhcyB0aGV5IGRvIG5vdCBuZWVkIGFueSBzcGVjaWFsIGxvZ2ljXG5cbnJlZ2lzdGVyRWxlbWVudCgnTGFiZWwnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2xhYmVsJykuTGFiZWw7IH0sIHtcbiAgbW9kZWw6IHtcbiAgICBwcm9wOiAndGV4dCcsXG4gICAgZXZlbnQ6ICd0ZXh0Q2hhbmdlJ1xuICB9XG59KTtcblxucmVnaXN0ZXJFbGVtZW50KFxuICAnRGF0ZVBpY2tlcicsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvZGF0ZS1waWNrZXInKS5EYXRlUGlja2VyOyB9LFxuICB7XG4gICAgbW9kZWw6IHtcbiAgICAgIHByb3A6ICdkYXRlJyxcbiAgICAgIGV2ZW50OiAnZGF0ZUNoYW5nZSdcbiAgICB9XG4gIH1cbik7XG5cbnJlZ2lzdGVyRWxlbWVudChcbiAgJ0Fic29sdXRlTGF5b3V0JyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9sYXlvdXRzL2Fic29sdXRlLWxheW91dCcpLkFic29sdXRlTGF5b3V0OyB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnQWN0aXZpdHlJbmRpY2F0b3InLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2FjdGl2aXR5LWluZGljYXRvcicpLkFjdGl2aXR5SW5kaWNhdG9yOyB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KCdCb3JkZXInLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2JvcmRlcicpLkJvcmRlcjsgfSk7XG5yZWdpc3RlckVsZW1lbnQoJ0J1dHRvbicsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvYnV0dG9uJykuQnV0dG9uOyB9KTtcbnJlZ2lzdGVyRWxlbWVudChcbiAgJ0NvbnRlbnRWaWV3JyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9jb250ZW50LXZpZXcnKS5Db250ZW50VmlldzsgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudChcbiAgJ0RvY2tMYXlvdXQnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2xheW91dHMvZG9jay1sYXlvdXQnKS5Eb2NrTGF5b3V0OyB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnR3JpZExheW91dCcsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvbGF5b3V0cy9ncmlkLWxheW91dCcpLkdyaWRMYXlvdXQ7IH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdIdG1sVmlldycsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvaHRtbC12aWV3JykuSHRtbFZpZXc7IH1cbik7XG5yZWdpc3RlckVsZW1lbnQoJ0ltYWdlJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9pbWFnZScpLkltYWdlOyB9KTtcbnJlZ2lzdGVyRWxlbWVudCgnaW1nJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9pbWFnZScpLkltYWdlOyB9KTtcbnJlZ2lzdGVyRWxlbWVudChcbiAgJ0xpc3RQaWNrZXInLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2xpc3QtcGlja2VyJykuTGlzdFBpY2tlcjsgfSxcbiAge1xuICAgIG1vZGVsOiB7XG4gICAgICBwcm9wOiAnc2VsZWN0ZWRJbmRleCcsXG4gICAgICBldmVudDogJ3NlbGVjdGVkSW5kZXhDaGFuZ2UnXG4gICAgfVxuICB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KCdQYWdlJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9wYWdlJykuUGFnZTsgfSwge1xuICBza2lwQWRkVG9Eb206IHRydWUsXG4gIGNvbXBvbmVudDogcGFnZVxufSk7XG5cbnJlZ2lzdGVyRWxlbWVudChcbiAgJ1BsYWNlaG9sZGVyJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9wbGFjZWhvbGRlcicpLlBsYWNlaG9sZGVyOyB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnUHJvZ3Jlc3MnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3Byb2dyZXNzJykuUHJvZ3Jlc3M7IH0sXG4gIHtcbiAgICBtb2RlbDoge1xuICAgICAgcHJvcDogJ3ZhbHVlJyxcbiAgICAgIGV2ZW50OiAndmFsdWVDaGFuZ2UnXG4gICAgfVxuICB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnUHJveHlWaWV3Q29udGFpbmVyJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9wcm94eS12aWV3LWNvbnRhaW5lcicpLlByb3h5Vmlld0NvbnRhaW5lcjsgfVxuKTtcbi8vIHJlZ2lzdGVyRWxlbWVudChcbi8vICAgJ1JlcGVhdGVyJyxcbi8vICAgKCkgPT4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9yZXBlYXRlcicpLlJlcGVhdGVyXG4vLyApXG5yZWdpc3RlckVsZW1lbnQoXG4gICdTY3JvbGxWaWV3JyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9zY3JvbGwtdmlldycpLlNjcm9sbFZpZXc7IH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdTZWFyY2hCYXInLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3NlYXJjaC1iYXInKS5TZWFyY2hCYXI7IH0sXG4gIHtcbiAgICBtb2RlbDoge1xuICAgICAgcHJvcDogJ3RleHQnLFxuICAgICAgZXZlbnQ6ICd0ZXh0Q2hhbmdlJ1xuICAgIH1cbiAgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudChcbiAgJ1NlZ21lbnRlZEJhcicsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvc2VnbWVudGVkLWJhcicpLlNlZ21lbnRlZEJhcjsgfSxcbiAge1xuICAgIG1vZGVsOiB7XG4gICAgICBwcm9wOiAnc2VsZWN0ZWRJbmRleCcsXG4gICAgICBldmVudDogJ3NlbGVjdGVkSW5kZXhDaGFuZ2UnXG4gICAgfVxuICB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnU2VnbWVudGVkQmFySXRlbScsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvc2VnbWVudGVkLWJhcicpLlNlZ21lbnRlZEJhckl0ZW07IH1cbik7XG5yZWdpc3RlckVsZW1lbnQoJ1NsaWRlcicsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvc2xpZGVyJykuU2xpZGVyOyB9LCB7XG4gIG1vZGVsOiB7XG4gICAgcHJvcDogJ3ZhbHVlJyxcbiAgICBldmVudDogJ3ZhbHVlQ2hhbmdlJ1xuICB9XG59KTtcbnJlZ2lzdGVyRWxlbWVudChcbiAgJ1N0YWNrTGF5b3V0JyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9sYXlvdXRzL3N0YWNrLWxheW91dCcpLlN0YWNrTGF5b3V0OyB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnRmxleGJveExheW91dCcsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvbGF5b3V0cy9mbGV4Ym94LWxheW91dCcpLkZsZXhib3hMYXlvdXQ7IH1cbik7XG5yZWdpc3RlckVsZW1lbnQoJ1N3aXRjaCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvc3dpdGNoJykuU3dpdGNoOyB9LCB7XG4gIG1vZGVsOiB7XG4gICAgcHJvcDogJ2NoZWNrZWQnLFxuICAgIGV2ZW50OiAnY2hlY2tlZENoYW5nZSdcbiAgfVxufSk7XG5cbnJlZ2lzdGVyRWxlbWVudChcbiAgJ1RleHRGaWVsZCcsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvdGV4dC1maWVsZCcpLlRleHRGaWVsZDsgfSxcbiAge1xuICAgIG1vZGVsOiB7XG4gICAgICBwcm9wOiAndGV4dCcsXG4gICAgICBldmVudDogJ3RleHRDaGFuZ2UnXG4gICAgfVxuICB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnVGV4dFZpZXcnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3RleHQtdmlldycpLlRleHRWaWV3OyB9LFxuICB7XG4gICAgbW9kZWw6IHtcbiAgICAgIHByb3A6ICd0ZXh0JyxcbiAgICAgIGV2ZW50OiAndGV4dENoYW5nZSdcbiAgICB9XG4gIH1cbik7XG5yZWdpc3RlckVsZW1lbnQoXG4gICdUaW1lUGlja2VyJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS90aW1lLXBpY2tlcicpLlRpbWVQaWNrZXI7IH0sXG4gIHtcbiAgICBtb2RlbDoge1xuICAgICAgcHJvcDogJ3RpbWUnLFxuICAgICAgZXZlbnQ6ICd0aW1lQ2hhbmdlJ1xuICAgIH1cbiAgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudChcbiAgJ1dlYlZpZXcnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3dlYi12aWV3JykuV2ViVmlldzsgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudChcbiAgJ1dyYXBMYXlvdXQnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2xheW91dHMvd3JhcC1sYXlvdXQnKS5XcmFwTGF5b3V0OyB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnRm9ybWF0dGVkU3RyaW5nJyxcbiAgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy90ZXh0L2Zvcm1hdHRlZC1zdHJpbmcnKS5Gb3JtYXR0ZWRTdHJpbmc7IH1cbik7XG5yZWdpc3RlckVsZW1lbnQoJ1NwYW4nLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3RleHQvc3BhbicpLlNwYW47IH0pO1xuXG5yZWdpc3RlckVsZW1lbnQoXG4gICdEZXRhY2hlZENvbnRhaW5lcicsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvcHJveHktdmlldy1jb250YWluZXInKS5Qcm94eVZpZXdDb250YWluZXI7IH0sXG4gIHtcbiAgICBza2lwQWRkVG9Eb206IHRydWVcbiAgfVxuKTtcbnJlZ2lzdGVyRWxlbWVudChcbiAgJ0RldGFjaGVkVGV4dCcsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvcGxhY2Vob2xkZXInKS5QbGFjZWhvbGRlcjsgfSxcbiAge1xuICAgIHNraXBBZGRUb0RvbTogdHJ1ZVxuICB9XG4pO1xucmVnaXN0ZXJFbGVtZW50KFxuICAnQ29tbWVudCcsXG4gIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvcGxhY2Vob2xkZXInKS5QbGFjZWhvbGRlcjsgfVxuKTtcblxucmVnaXN0ZXJFbGVtZW50KFxuICAnRG9jdW1lbnQnLFxuICBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL3Byb3h5LXZpZXctY29udGFpbmVyJykuUHJveHlWaWV3Q29udGFpbmVyOyB9LFxuICB7XG4gICAgc2tpcEFkZFRvRG9tOiB0cnVlXG4gIH1cbik7XG5cbnJlZ2lzdGVyRWxlbWVudCgnRnJhbWUnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2ZyYW1lJykuRnJhbWU7IH0sIHtcbiAgaW5zZXJ0Q2hpbGQ6IGZ1bmN0aW9uIGluc2VydENoaWxkKHBhcmVudE5vZGUsIGNoaWxkTm9kZSwgYXRJbmRleCkge1xuICAgIC8vIGlmIChub3JtYWxpemVFbGVtZW50TmFtZShjaGlsZE5vZGUudGFnTmFtZSkgPT09ICduYXRpdmVwYWdlJykge1xuICAgIC8vIHBhcmVudE5vZGUubmF0aXZlVmlldy5uYXZpZ2F0ZSh7IGNyZWF0ZTogKCkgPT4gY2hpbGROb2RlLm5hdGl2ZVZpZXcgfSlcbiAgICAvLyB9XG4gIH0sXG4gIGNvbXBvbmVudDogZnJhbWVcbn0pO1xuXG4vKiFcbiAqIGlzb2JqZWN0IDxodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9pc29iamVjdD5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNywgSm9uIFNjaGxpbmtlcnQuXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxudmFyIGlzb2JqZWN0ID0gZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KHZhbCkgPT09IGZhbHNlO1xufTtcblxuZnVuY3Rpb24gaXNPYmplY3RPYmplY3Qobykge1xuICByZXR1cm4gaXNvYmplY3QobykgPT09IHRydWVcbiAgICAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuXG52YXIgaXNQbGFpbk9iamVjdCQxID0gZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvKSB7XG4gIHZhciBjdG9yLHByb3Q7XG5cbiAgaWYgKGlzT2JqZWN0T2JqZWN0KG8pID09PSBmYWxzZSkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAvLyBJZiBoYXMgbW9kaWZpZWQgY29uc3RydWN0b3JcbiAgY3RvciA9IG8uY29uc3RydWN0b3I7XG4gIGlmICh0eXBlb2YgY3RvciAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblxuICAvLyBJZiBoYXMgbW9kaWZpZWQgcHJvdG90eXBlXG4gIHByb3QgPSBjdG9yLnByb3RvdHlwZTtcbiAgaWYgKGlzT2JqZWN0T2JqZWN0KHByb3QpID09PSBmYWxzZSkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAvLyBJZiBjb25zdHJ1Y3RvciBkb2VzIG5vdCBoYXZlIGFuIE9iamVjdC1zcGVjaWZpYyBtZXRob2RcbiAgaWYgKHByb3QuaGFzT3duUHJvcGVydHkoJ2lzUHJvdG90eXBlT2YnKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBNb3N0IGxpa2VseSBhIHBsYWluIE9iamVjdFxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIHNldCQxKHRhcmdldCwgcGF0aCwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc09iamVjdCQyKHRhcmdldCkpIHtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgdmFyIG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkocGF0aCk7XG4gIGlmICghaXNBcnJheSAmJiB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgdmFyIG1lcmdlID0gb3B0cy5tZXJnZTtcbiAgaWYgKG1lcmdlICYmIHR5cGVvZiBtZXJnZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIG1lcmdlID0gT2JqZWN0LmFzc2lnbjtcbiAgfVxuXG4gIHZhciBrZXlzID0gaXNBcnJheSA/IHBhdGggOiBzcGxpdChwYXRoLCBvcHRzKTtcbiAgdmFyIGxlbiA9IGtleXMubGVuZ3RoO1xuICB2YXIgb3JpZyA9IHRhcmdldDtcblxuICBpZiAoIW9wdGlvbnMgJiYga2V5cy5sZW5ndGggPT09IDEpIHtcbiAgICByZXN1bHQodGFyZ2V0LCBrZXlzWzBdLCB2YWx1ZSwgbWVyZ2UpO1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIHByb3AgPSBrZXlzW2ldO1xuXG4gICAgaWYgKCFpc09iamVjdCQyKHRhcmdldFtwcm9wXSkpIHtcbiAgICAgIHRhcmdldFtwcm9wXSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChpID09PSBsZW4gLSAxKSB7XG4gICAgICByZXN1bHQodGFyZ2V0LCBwcm9wLCB2YWx1ZSwgbWVyZ2UpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdGFyZ2V0ID0gdGFyZ2V0W3Byb3BdO1xuICB9XG5cbiAgcmV0dXJuIG9yaWc7XG59XG5cbmZ1bmN0aW9uIHJlc3VsdCh0YXJnZXQsIHBhdGgsIHZhbHVlLCBtZXJnZSkge1xuICBpZiAobWVyZ2UgJiYgaXNQbGFpbk9iamVjdCQxKHRhcmdldFtwYXRoXSkgJiYgaXNQbGFpbk9iamVjdCQxKHZhbHVlKSkge1xuICAgIHRhcmdldFtwYXRoXSA9IG1lcmdlKHt9LCB0YXJnZXRbcGF0aF0sIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRbcGF0aF0gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzcGxpdChwYXRoLCBvcHRpb25zKSB7XG4gIHZhciBpZCA9IGNyZWF0ZUtleShwYXRoLCBvcHRpb25zKTtcbiAgaWYgKHNldCQxLm1lbW9baWRdKSB7IHJldHVybiBzZXQkMS5tZW1vW2lkXTsgfVxuXG4gIHZhciBjaGFyID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5zZXBhcmF0b3IpID8gb3B0aW9ucy5zZXBhcmF0b3IgOiAnLic7XG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZXMgPSBbXTtcblxuICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5zcGxpdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGtleXMgPSBvcHRpb25zLnNwbGl0KHBhdGgpO1xuICB9IGVsc2Uge1xuICAgIGtleXMgPSBwYXRoLnNwbGl0KGNoYXIpO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByb3AgPSBrZXlzW2ldO1xuICAgIHdoaWxlIChwcm9wICYmIHByb3Auc2xpY2UoLTEpID09PSAnXFxcXCcgJiYga2V5c1tpICsgMV0pIHtcbiAgICAgIHByb3AgPSBwcm9wLnNsaWNlKDAsIC0xKSArIGNoYXIgKyBrZXlzWysraV07XG4gICAgfVxuICAgIHJlcy5wdXNoKHByb3ApO1xuICB9XG4gIHNldCQxLm1lbW9baWRdID0gcmVzO1xuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXkocGF0dGVybiwgb3B0aW9ucykge1xuICB2YXIgaWQgPSBwYXR0ZXJuO1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGlkICsgJyc7XG4gIH1cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWQgKz0gJzsnICsga2V5ICsgJz0nICsgU3RyaW5nKG9wdGlvbnNba2V5XSk7XG4gIH1cbiAgcmV0dXJuIGlkO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdCQyKHZhbCkge1xuICBzd2l0Y2ggKHR5cGVvZiB2YWwpIHtcbiAgICBjYXNlICdudWxsJzpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDoge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuXG5zZXQkMS5tZW1vID0ge307XG52YXIgc2V0VmFsdWUgPSBzZXQkMTtcblxuZnVuY3Rpb24gaXNWaWV3KHZpZXcpIHtcbiAgcmV0dXJuIHZpZXcgaW5zdGFuY2VvZiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2NvcmUvdmlldycpLlZpZXdcbn1cblxuZnVuY3Rpb24gaXNMYXlvdXQodmlldykge1xuICByZXR1cm4gKFxuICAgIHZpZXcgaW5zdGFuY2VvZlxuICAgIHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvbGF5b3V0cy9sYXlvdXQtYmFzZScpLkxheW91dEJhc2VcbiAgKVxufVxuXG5mdW5jdGlvbiBpc0NvbnRlbnRWaWV3KHZpZXcpIHtcbiAgcmV0dXJuIHZpZXcgaW5zdGFuY2VvZiByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3VpL2NvbnRlbnQtdmlldycpLkNvbnRlbnRWaWV3XG59XG5cbmZ1bmN0aW9uIGluc2VydENoaWxkKHBhcmVudE5vZGUsIGNoaWxkTm9kZSwgYXRJbmRleCkge1xuICBpZiAoIGF0SW5kZXggPT09IHZvaWQgMCApIGF0SW5kZXggPSAtMTtcblxuICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmIChwYXJlbnROb2RlLm1ldGEgJiYgdHlwZW9mIHBhcmVudE5vZGUubWV0YS5pbnNlcnRDaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBwYXJlbnROb2RlLm1ldGEuaW5zZXJ0Q2hpbGQocGFyZW50Tm9kZSwgY2hpbGROb2RlLCBhdEluZGV4KVxuICB9XG5cbiAgaWYgKGNoaWxkTm9kZS5tZXRhLnNraXBBZGRUb0RvbSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHBhcmVudFZpZXcgPSBwYXJlbnROb2RlLm5hdGl2ZVZpZXc7XG4gIHZhciBjaGlsZFZpZXcgPSBjaGlsZE5vZGUubmF0aXZlVmlldztcblxuICBpZiAoaXNMYXlvdXQocGFyZW50VmlldykpIHtcbiAgICBpZiAoY2hpbGRWaWV3LnBhcmVudCA9PT0gcGFyZW50Vmlldykge1xuICAgICAgdmFyIGluZGV4ID0gcGFyZW50Vmlldy5nZXRDaGlsZEluZGV4KGNoaWxkVmlldyk7XG4gICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIHBhcmVudFZpZXcucmVtb3ZlQ2hpbGQoY2hpbGRWaWV3KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGF0SW5kZXggIT09IC0xKSB7XG4gICAgICBwYXJlbnRWaWV3Lmluc2VydENoaWxkKGNoaWxkVmlldywgYXRJbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudFZpZXcuYWRkQ2hpbGQoY2hpbGRWaWV3KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNDb250ZW50VmlldyhwYXJlbnRWaWV3KSkge1xuICAgIGlmIChjaGlsZE5vZGUubm9kZVR5cGUgPT09IDgpIHtcbiAgICAgIHBhcmVudFZpZXcuX2FkZFZpZXcoY2hpbGRWaWV3LCBhdEluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50Vmlldy5jb250ZW50ID0gY2hpbGRWaWV3O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJlbnRWaWV3ICYmIHBhcmVudFZpZXcuX2FkZENoaWxkRnJvbUJ1aWxkZXIpIHtcbiAgICBwYXJlbnRWaWV3Ll9hZGRDaGlsZEZyb21CdWlsZGVyKFxuICAgICAgY2hpbGROb2RlLl9uYXRpdmVWaWV3LmNvbnN0cnVjdG9yLm5hbWUsXG4gICAgICBjaGlsZFZpZXdcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkKHBhcmVudE5vZGUsIGNoaWxkTm9kZSkge1xuICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmIChwYXJlbnROb2RlLm1ldGEgJiYgdHlwZW9mIHBhcmVudE5vZGUubWV0YS5yZW1vdmVDaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBwYXJlbnROb2RlLm1ldGEucmVtb3ZlQ2hpbGQocGFyZW50Tm9kZSwgY2hpbGROb2RlKVxuICB9XG5cbiAgaWYgKGNoaWxkTm9kZS5tZXRhLnNraXBBZGRUb0RvbSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHBhcmVudFZpZXcgPSBwYXJlbnROb2RlLm5hdGl2ZVZpZXc7XG4gIHZhciBjaGlsZFZpZXcgPSBjaGlsZE5vZGUubmF0aXZlVmlldztcblxuICBpZiAoaXNMYXlvdXQocGFyZW50VmlldykpIHtcbiAgICBwYXJlbnRWaWV3LnJlbW92ZUNoaWxkKGNoaWxkVmlldyk7XG4gIH0gZWxzZSBpZiAoaXNDb250ZW50VmlldyhwYXJlbnRWaWV3KSkge1xuICAgIGlmIChwYXJlbnRWaWV3LmNvbnRlbnQgPT09IGNoaWxkVmlldykge1xuICAgICAgcGFyZW50Vmlldy5jb250ZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2RlLm5vZGVUeXBlID09PSA4KSB7XG4gICAgICBwYXJlbnRWaWV3Ll9yZW1vdmVWaWV3KGNoaWxkVmlldyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzVmlldyhwYXJlbnRWaWV3KSkge1xuICAgIHBhcmVudFZpZXcuX3JlbW92ZVZpZXcoY2hpbGRWaWV3KTtcbiAgfVxufVxuXG52YXIgWE1MX0FUVFJJQlVURVMgPSBPYmplY3QuZnJlZXplKFtcbiAgJ3N0eWxlJyxcbiAgJ3Jvd3MnLFxuICAnY29sdW1ucycsXG4gICdmb250QXR0cmlidXRlcydcbl0pO1xuXG52YXIgVmlld05vZGUgPSBmdW5jdGlvbiBWaWV3Tm9kZSgpIHtcbiAgdGhpcy5ub2RlVHlwZSA9IG51bGw7XG4gIHRoaXMuX3RhZ05hbWUgPSBudWxsO1xuICB0aGlzLnBhcmVudE5vZGUgPSBudWxsO1xuICB0aGlzLmNoaWxkTm9kZXMgPSBbXTtcbiAgdGhpcy5wcmV2U2libGluZyA9IG51bGw7XG4gIHRoaXMubmV4dFNpYmxpbmcgPSBudWxsO1xuXG4gIHRoaXMuX293bmVyRG9jdW1lbnQgPSBudWxsO1xuICB0aGlzLl9uYXRpdmVWaWV3ID0gbnVsbDtcbiAgdGhpcy5fbWV0YSA9IG51bGw7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICogbWFrZSB2dWUgaGFwcHkgOilcbiAgICovXG4gIHRoaXMuaGFzQXR0cmlidXRlID0gdGhpcy5yZW1vdmVBdHRyaWJ1dGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMiA9IHsgdGFnTmFtZTogeyBjb25maWd1cmFibGU6IHRydWUgfSxmaXJzdENoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGxhc3RDaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSxuYXRpdmVWaWV3OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LG1ldGE6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sb3duZXJEb2N1bWVudDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuVmlld05vZGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICByZXR1cm4gKCh0aGlzLmNvbnN0cnVjdG9yLm5hbWUpICsgXCIoXCIgKyAodGhpcy50YWdOYW1lKSArIFwiKVwiKVxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDIudGFnTmFtZS5zZXQgPSBmdW5jdGlvbiAobmFtZSkge1xuICB0aGlzLl90YWdOYW1lID0gbm9ybWFsaXplRWxlbWVudE5hbWUobmFtZSk7XG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMi50YWdOYW1lLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3RhZ05hbWVcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQyLmZpcnN0Q2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jaGlsZE5vZGVzLmxlbmd0aCA/IHRoaXMuY2hpbGROb2Rlc1swXSA6IG51bGxcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQyLmxhc3RDaGlsZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmNoaWxkTm9kZXMubGVuZ3RoXG4gICAgPyB0aGlzLmNoaWxkTm9kZXNbdGhpcy5jaGlsZE5vZGVzLmxlbmd0aCAtIDFdXG4gICAgOiBudWxsXG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMi5uYXRpdmVWaWV3LmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX25hdGl2ZVZpZXdcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQyLm5hdGl2ZVZpZXcuc2V0ID0gZnVuY3Rpb24gKHZpZXcpIHtcbiAgaWYgKHRoaXMuX25hdGl2ZVZpZXcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBvdmVycmlkZSBuYXRpdmUgdmlldy5cIilcbiAgfVxuXG4gIHRoaXMuX25hdGl2ZVZpZXcgPSB2aWV3O1xufTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDIubWV0YS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9tZXRhKSB7XG4gICAgcmV0dXJuIHRoaXMuX21ldGFcbiAgfVxuXG4gIHJldHVybiAodGhpcy5fbWV0YSA9IGdldFZpZXdNZXRhKHRoaXMudGFnTmFtZSkpXG59O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzJDIub3duZXJEb2N1bWVudC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9vd25lckRvY3VtZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuX293bmVyRG9jdW1lbnRcbiAgfVxuXG4gIHZhciBlbCA9IHRoaXM7XG4gIHdoaWxlICgoZWwgPSBlbC5wYXJlbnROb2RlKS5ub2RlVHlwZSAhPT0gOSkge1xuICAgIC8vIGRvIG5vdGhpbmdcbiAgfVxuXG4gIHJldHVybiAodGhpcy5fb3duZXJEb2N1bWVudCA9IGVsKVxufTtcblxuVmlld05vZGUucHJvdG90eXBlLmdldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIGdldEF0dHJpYnV0ZSAoa2V5KSB7XG4gIHJldHVybiB0aGlzLm5hdGl2ZVZpZXdba2V5XVxufTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblZpZXdOb2RlLnByb3RvdHlwZS5zZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbiBzZXRBdHRyaWJ1dGUgKGtleSwgdmFsdWUpIHtcbiAgdmFyIHJlZiA9IHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvcGxhdGZvcm0nKTtcbiAgICB2YXIgaXNBbmRyb2lkID0gcmVmLmlzQW5kcm9pZDtcbiAgICB2YXIgaXNJT1MgPSByZWYuaXNJT1M7XG4gIHZhciBudiA9IHRoaXMubmF0aXZlVmlldztcblxuICB0cnkge1xuICAgIGlmIChYTUxfQVRUUklCVVRFUy5pbmRleE9mKGtleSkgIT09IC0xKSB7XG4gICAgICBudltrZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGRldGVjdCBleHBhbmRhYmxlIGF0dHJzIGZvciBib29sZWFuIHZhbHVlc1xuICAgICAgLy8gU2VlIGh0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL2NvbXBvbmVudHMtcHJvcHMuaHRtbCNQYXNzaW5nLWEtQm9vbGVhblxuICAgICAgaWYgKFxuICAgICAgICByZXF1aXJlKCd0bnMtY29yZS1tb2R1bGVzL3V0aWxzL3R5cGVzJykuaXNCb29sZWFuKG52W2tleV0pICYmXG4gICAgICAgIHZhbHVlID09PSAnJ1xuICAgICAgKSB7XG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzQW5kcm9pZCAmJiBrZXkuc3RhcnRzV2l0aCgnYW5kcm9pZDonKSkge1xuICAgICAgICBzZXRWYWx1ZShudiwga2V5LnN1YnN0cig4KSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0lPUyAmJiBrZXkuc3RhcnRzV2l0aCgnaW9zOicpKSB7XG4gICAgICAgIHNldFZhbHVlKG52LCBrZXkuc3Vic3RyKDQpLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGtleS5lbmRzV2l0aCgnLmRlY29kZScpKSB7XG4gICAgICAgIHNldFZhbHVlKFxuICAgICAgICAgIG52LFxuICAgICAgICAgIGtleS5zbGljZSgwLCAtNyksXG4gICAgICAgICAgcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy94bWwnKS5YbWxQYXJzZXIuX2RlcmVmZXJlbmNlRW50aXRpZXMoXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFZhbHVlKG52LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBpZ25vcmVcbiAgfVxufTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblZpZXdOb2RlLnByb3RvdHlwZS5zZXRTdHlsZSA9IGZ1bmN0aW9uIHNldFN0eWxlIChwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKCEodmFsdWUgPSB2YWx1ZS50cmltKCkpLmxlbmd0aCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHByb3BlcnR5LmVuZHNXaXRoKCdBbGlnbicpKSB7XG4gICAgLy8gTmF0aXZlU2NyaXB0IHVzZXMgQWxpZ25tZW50IGluc3RlYWQgb2YgQWxpZ24sIHRoaXMgZW5zdXJlcyB0aGF0IHRleHQtYWxpZ24gd29ya3NcbiAgICBwcm9wZXJ0eSArPSAnbWVudCc7XG4gIH1cbiAgdGhpcy5uYXRpdmVWaWV3LnN0eWxlW3Byb3BlcnR5XSA9IHZhbHVlO1xufTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblZpZXdOb2RlLnByb3RvdHlwZS5zZXRUZXh0ID0gZnVuY3Rpb24gc2V0VGV4dCAodGV4dCkge1xuICBpZiAodGhpcy5ub2RlVHlwZSA9PT0gMykge1xuICAgIHRoaXMucGFyZW50Tm9kZS5zZXRUZXh0KHRleHQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCd0ZXh0JywgdGV4dCk7XG4gIH1cbn07XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5WaWV3Tm9kZS5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIgKGV2ZW50LCBoYW5kbGVyKSB7XG4gIHRoaXMubmF0aXZlVmlldy5vbihldmVudCwgaGFuZGxlcik7XG59O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuVmlld05vZGUucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyIChldmVudCkge1xuICB0aGlzLm5hdGl2ZVZpZXcub2ZmKGV2ZW50KTtcbn07XG5cblZpZXdOb2RlLnByb3RvdHlwZS5pbnNlcnRCZWZvcmUgPSBmdW5jdGlvbiBpbnNlcnRCZWZvcmUgKGNoaWxkTm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICBpZiAoIWNoaWxkTm9kZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGluc2VydCBjaGlsZC5cIilcbiAgfVxuXG4gIC8vIGluIHNvbWUgcmFyZSBjYXNlcyBpbnNlcnRCZWZvcmUgaXMgY2FsbGVkIHdpdGggYSBudWxsIHJlZmVyZW5jZU5vZGVcbiAgLy8gdGhpcyBtYWtlcyBzdXJlIHRoYXQgaXQgZ2V0J3MgYXBwZW5kZWQgYXMgdGhlIGxhc3QgY2hpbGRcbiAgaWYgKCFyZWZlcmVuY2VOb2RlKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY2hpbGROb2RlKVxuICB9XG5cbiAgaWYgKHJlZmVyZW5jZU5vZGUucGFyZW50Tm9kZSAhPT0gdGhpcykge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiQ2FuJ3QgaW5zZXJ0IGNoaWxkLCBiZWNhdXNlIHRoZSByZWZlcmVuY2Ugbm9kZSBoYXMgYSBkaWZmZXJlbnQgcGFyZW50LlwiXG4gICAgKVxuICB9XG5cbiAgaWYgKGNoaWxkTm9kZS5wYXJlbnROb2RlICYmIGNoaWxkTm9kZS5wYXJlbnROb2RlICE9PSB0aGlzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJDYW4ndCBpbnNlcnQgY2hpbGQsIGJlY2F1c2UgaXQgYWxyZWFkeSBoYXMgYSBkaWZmZXJlbnQgcGFyZW50LlwiXG4gICAgKVxuICB9XG5cbiAgaWYgKGNoaWxkTm9kZS5wYXJlbnROb2RlID09PSB0aGlzKSA7XG5cbiAgdmFyIGluZGV4ID0gdGhpcy5jaGlsZE5vZGVzLmluZGV4T2YocmVmZXJlbmNlTm9kZSk7XG5cbiAgY2hpbGROb2RlLnBhcmVudE5vZGUgPSB0aGlzO1xuICBjaGlsZE5vZGUubmV4dFNpYmxpbmcgPSByZWZlcmVuY2VOb2RlO1xuICBjaGlsZE5vZGUucHJldlNpYmxpbmcgPSB0aGlzLmNoaWxkTm9kZXNbaW5kZXggLSAxXTtcblxuICByZWZlcmVuY2VOb2RlLnByZXZTaWJsaW5nID0gY2hpbGROb2RlO1xuICB0aGlzLmNoaWxkTm9kZXMuc3BsaWNlKGluZGV4LCAwLCBjaGlsZE5vZGUpO1xuXG4gIGluc2VydENoaWxkKHRoaXMsIGNoaWxkTm9kZSwgaW5kZXgpO1xufTtcblxuVmlld05vZGUucHJvdG90eXBlLmFwcGVuZENoaWxkID0gZnVuY3Rpb24gYXBwZW5kQ2hpbGQgKGNoaWxkTm9kZSkge1xuICBpZiAoIWNoaWxkTm9kZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGFwcGVuZCBjaGlsZC5cIilcbiAgfVxuXG4gIGlmIChjaGlsZE5vZGUucGFyZW50Tm9kZSAmJiBjaGlsZE5vZGUucGFyZW50Tm9kZSAhPT0gdGhpcykge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiQ2FuJ3QgYXBwZW5kIGNoaWxkLCBiZWNhdXNlIGl0IGFscmVhZHkgaGFzIGEgZGlmZmVyZW50IHBhcmVudC5cIlxuICAgIClcbiAgfVxuXG4gIGlmIChjaGlsZE5vZGUucGFyZW50Tm9kZSA9PT0gdGhpcykgO1xuXG4gIGNoaWxkTm9kZS5wYXJlbnROb2RlID0gdGhpcztcblxuICBpZiAodGhpcy5sYXN0Q2hpbGQpIHtcbiAgICBjaGlsZE5vZGUucHJldlNpYmxpbmcgPSB0aGlzLmxhc3RDaGlsZDtcbiAgICB0aGlzLmxhc3RDaGlsZC5uZXh0U2libGluZyA9IGNoaWxkTm9kZTtcbiAgfVxuXG4gIHRoaXMuY2hpbGROb2Rlcy5wdXNoKGNoaWxkTm9kZSk7XG5cbiAgaW5zZXJ0Q2hpbGQodGhpcywgY2hpbGROb2RlLCB0aGlzLmNoaWxkTm9kZXMubGVuZ3RoIC0gMSk7XG59O1xuXG5WaWV3Tm9kZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiByZW1vdmVDaGlsZCQxIChjaGlsZE5vZGUpIHtcbiAgaWYgKCFjaGlsZE5vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCByZW1vdmUgY2hpbGQuXCIpXG4gIH1cblxuICBpZiAoIWNoaWxkTm9kZS5wYXJlbnROb2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgcmVtb3ZlIGNoaWxkLCBiZWNhdXNlIGl0IGhhcyBubyBwYXJlbnQuXCIpXG4gIH1cblxuICBpZiAoY2hpbGROb2RlLnBhcmVudE5vZGUgIT09IHRoaXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCByZW1vdmUgY2hpbGQsIGJlY2F1c2UgaXQgaGFzIGEgZGlmZmVyZW50IHBhcmVudC5cIilcbiAgfVxuXG4gIGNoaWxkTm9kZS5wYXJlbnROb2RlID0gbnVsbDtcblxuICBpZiAoY2hpbGROb2RlLnByZXZTaWJsaW5nKSB7XG4gICAgY2hpbGROb2RlLnByZXZTaWJsaW5nLm5leHRTaWJsaW5nID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICB9XG5cbiAgaWYgKGNoaWxkTm9kZS5uZXh0U2libGluZykge1xuICAgIGNoaWxkTm9kZS5uZXh0U2libGluZy5wcmV2U2libGluZyA9IGNoaWxkTm9kZS5wcmV2U2libGluZztcbiAgfVxuXG4gIC8vIHJlc2V0IHRoZSBwcmV2U2libGluZyBhbmQgbmV4dFNpYmxpbmcuIElmIG5vdCwgYSBrZWVwLWFsaXZlZCBjb21wb25lbnQgd2lsbFxuICAvLyBzdGlsbCBoYXZlIGEgZmlsbGVkIG5leHRTaWJsaW5nIGF0dHJpYnV0ZSBzbyB2dWUgd2lsbCBub3RcbiAgLy8gaW5zZXJ0IHRoZSBub2RlIGFnYWluIHRvIHRoZSBwYXJlbnQuIFNlZSAjMjIwXG4gIGNoaWxkTm9kZS5wcmV2U2libGluZyA9IG51bGw7XG4gIGNoaWxkTm9kZS5uZXh0U2libGluZyA9IG51bGw7XG5cbiAgdGhpcy5jaGlsZE5vZGVzID0gdGhpcy5jaGlsZE5vZGVzLmZpbHRlcihmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gbm9kZSAhPT0gY2hpbGROb2RlOyB9KTtcblxuICByZW1vdmVDaGlsZCh0aGlzLCBjaGlsZE5vZGUpO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZpZXdOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDIgKTtcblxudmFyIFZVRV9FTEVNRU5UX1JFRiA9ICdfX3Z1ZV9lbGVtZW50X3JlZl9fJztcblxudmFyIEVsZW1lbnROb2RlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoVmlld05vZGUpIHtcbiAgZnVuY3Rpb24gRWxlbWVudE5vZGUodGFnTmFtZSkge1xuICAgIFZpZXdOb2RlLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLm5vZGVUeXBlID0gMTtcbiAgICB0aGlzLnRhZ05hbWUgPSB0YWdOYW1lO1xuXG4gICAgdmFyIHZpZXdDbGFzcyA9IGdldFZpZXdDbGFzcyh0YWdOYW1lKTtcbiAgICB0aGlzLl9uYXRpdmVWaWV3ID0gbmV3IHZpZXdDbGFzcygpO1xuICAgIHRoaXMuX25hdGl2ZVZpZXdbVlVFX0VMRU1FTlRfUkVGXSA9IHRoaXM7XG4gIH1cblxuICBpZiAoIFZpZXdOb2RlICkgRWxlbWVudE5vZGUuX19wcm90b19fID0gVmlld05vZGU7XG4gIEVsZW1lbnROb2RlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFZpZXdOb2RlICYmIFZpZXdOb2RlLnByb3RvdHlwZSApO1xuICBFbGVtZW50Tm9kZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFbGVtZW50Tm9kZTtcblxuICBFbGVtZW50Tm9kZS5wcm90b3R5cGUuYXBwZW5kQ2hpbGQgPSBmdW5jdGlvbiBhcHBlbmRDaGlsZCAoY2hpbGROb2RlKSB7XG4gICAgVmlld05vZGUucHJvdG90eXBlLmFwcGVuZENoaWxkLmNhbGwodGhpcywgY2hpbGROb2RlKTtcblxuICAgIGlmIChjaGlsZE5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIHRoaXMuc2V0VGV4dChjaGlsZE5vZGUudGV4dCk7XG4gICAgfVxuICB9O1xuXG4gIEVsZW1lbnROb2RlLnByb3RvdHlwZS5pbnNlcnRCZWZvcmUgPSBmdW5jdGlvbiBpbnNlcnRCZWZvcmUgKGNoaWxkTm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICAgIFZpZXdOb2RlLnByb3RvdHlwZS5pbnNlcnRCZWZvcmUuY2FsbCh0aGlzLCBjaGlsZE5vZGUsIHJlZmVyZW5jZU5vZGUpO1xuXG4gICAgaWYgKGNoaWxkTm9kZS5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgdGhpcy5zZXRUZXh0KGNoaWxkTm9kZS50ZXh0KTtcbiAgICB9XG4gIH07XG5cbiAgRWxlbWVudE5vZGUucHJvdG90eXBlLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKGNoaWxkTm9kZSkge1xuICAgIFZpZXdOb2RlLnByb3RvdHlwZS5yZW1vdmVDaGlsZC5jYWxsKHRoaXMsIGNoaWxkTm9kZSk7XG5cbiAgICBpZiAoY2hpbGROb2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICB0aGlzLnNldFRleHQoJycpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gRWxlbWVudE5vZGU7XG59KFZpZXdOb2RlKSk7XG5cbnZhciBDb21tZW50Tm9kZSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEVsZW1lbnROb2RlKSB7XG4gIGZ1bmN0aW9uIENvbW1lbnROb2RlKHRleHQpIHtcbiAgICBFbGVtZW50Tm9kZS5jYWxsKHRoaXMsICdjb21tZW50Jyk7XG5cbiAgICB0aGlzLm5vZGVUeXBlID0gODtcbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICB9XG5cbiAgaWYgKCBFbGVtZW50Tm9kZSApIENvbW1lbnROb2RlLl9fcHJvdG9fXyA9IEVsZW1lbnROb2RlO1xuICBDb21tZW50Tm9kZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFbGVtZW50Tm9kZSAmJiBFbGVtZW50Tm9kZS5wcm90b3R5cGUgKTtcbiAgQ29tbWVudE5vZGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29tbWVudE5vZGU7XG5cbiAgcmV0dXJuIENvbW1lbnROb2RlO1xufShFbGVtZW50Tm9kZSkpO1xuXG52YXIgVGV4dE5vZGUgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChWaWV3Tm9kZSkge1xuICBmdW5jdGlvbiBUZXh0Tm9kZSh0ZXh0KSB7XG4gICAgVmlld05vZGUuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMubm9kZVR5cGUgPSAzO1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG5cbiAgICB0aGlzLl9tZXRhID0ge1xuICAgICAgc2tpcEFkZFRvRG9tOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIGlmICggVmlld05vZGUgKSBUZXh0Tm9kZS5fX3Byb3RvX18gPSBWaWV3Tm9kZTtcbiAgVGV4dE5vZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVmlld05vZGUgJiYgVmlld05vZGUucHJvdG90eXBlICk7XG4gIFRleHROb2RlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRleHROb2RlO1xuXG4gIFRleHROb2RlLnByb3RvdHlwZS5zZXRUZXh0ID0gZnVuY3Rpb24gc2V0VGV4dCAodGV4dCkge1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgdGhpcy5wYXJlbnROb2RlLnNldFRleHQodGV4dCk7XG4gIH07XG5cbiAgcmV0dXJuIFRleHROb2RlO1xufShWaWV3Tm9kZSkpO1xuXG52YXIgRG9jdW1lbnROb2RlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoVmlld05vZGUpIHtcbiAgZnVuY3Rpb24gRG9jdW1lbnROb2RlKCkge1xuICAgIFZpZXdOb2RlLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLm5vZGVUeXBlID0gOTtcbiAgICB0aGlzLmRvY3VtZW50RWxlbWVudCA9IG5ldyBFbGVtZW50Tm9kZSgnZG9jdW1lbnQnKTtcblxuICAgIC8vIG1ha2Ugc3RhdGljIG1ldGhvZHMgYWNjZXNzaWJsZSB2aWEgdGhpc1xuICAgIHRoaXMuY3JlYXRlQ29tbWVudCA9IHRoaXMuY29uc3RydWN0b3IuY3JlYXRlQ29tbWVudDtcbiAgICB0aGlzLmNyZWF0ZUVsZW1lbnQgPSB0aGlzLmNvbnN0cnVjdG9yLmNyZWF0ZUVsZW1lbnQ7XG4gICAgdGhpcy5jcmVhdGVFbGVtZW50TlMgPSB0aGlzLmNvbnN0cnVjdG9yLmNyZWF0ZUVsZW1lbnROUztcbiAgICB0aGlzLmNyZWF0ZVRleHROb2RlID0gdGhpcy5jb25zdHJ1Y3Rvci5jcmVhdGVUZXh0Tm9kZTtcbiAgfVxuXG4gIGlmICggVmlld05vZGUgKSBEb2N1bWVudE5vZGUuX19wcm90b19fID0gVmlld05vZGU7XG4gIERvY3VtZW50Tm9kZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBWaWV3Tm9kZSAmJiBWaWV3Tm9kZS5wcm90b3R5cGUgKTtcbiAgRG9jdW1lbnROb2RlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERvY3VtZW50Tm9kZTtcblxuICBEb2N1bWVudE5vZGUuY3JlYXRlQ29tbWVudCA9IGZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHtcbiAgICByZXR1cm4gbmV3IENvbW1lbnROb2RlKHRleHQpXG4gIH07XG5cbiAgRG9jdW1lbnROb2RlLmNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiBjcmVhdGVFbGVtZW50ICh0YWdOYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBFbGVtZW50Tm9kZSh0YWdOYW1lKVxuICB9O1xuXG4gIERvY3VtZW50Tm9kZS5jcmVhdGVFbGVtZW50TlMgPSBmdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMgKG5hbWVzcGFjZSwgdGFnTmFtZSkge1xuICAgIHJldHVybiBuZXcgRWxlbWVudE5vZGUobmFtZXNwYWNlICsgJzonICsgdGFnTmFtZSlcbiAgfTtcblxuICBEb2N1bWVudE5vZGUuY3JlYXRlVGV4dE5vZGUgPSBmdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSAodGV4dCkge1xuICAgIHJldHVybiBuZXcgVGV4dE5vZGUodGV4dClcbiAgfTtcblxuICByZXR1cm4gRG9jdW1lbnROb2RlO1xufShWaWV3Tm9kZSkpO1xuXG52YXIgaXNSZXNlcnZlZFRhZyA9IG1ha2VNYXAoJ3RlbXBsYXRlJywgdHJ1ZSk7XG5cbnZhciBfVnVlO1xuXG5mdW5jdGlvbiBzZXRWdWUoVnVlKSB7XG4gIF9WdWUgPSBWdWU7XG59XG5cbnZhciBjYW5CZUxlZnRPcGVuVGFnID0gZnVuY3Rpb24oZWwpIHtcbiAgcmV0dXJuIGdldFZpZXdNZXRhKGVsKS5jYW5CZUxlZnRPcGVuVGFnXG59O1xuXG52YXIgaXNVbmFyeVRhZyA9IGZ1bmN0aW9uKGVsKSB7XG4gIHJldHVybiBnZXRWaWV3TWV0YShlbCkuaXNVbmFyeVRhZ1xufTtcblxuZnVuY3Rpb24gbXVzdFVzZVByb3AoKSB7XG4gIC8vIGNvbnNvbGUubG9nKCdtdXN0VXNlUHJvcCcpXG59XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZShlbCkge1xuICByZXR1cm4gZ2V0Vmlld01ldGEoZWwpLnRhZ05hbWVzcGFjZVxufVxuXG5mdW5jdGlvbiBpc1Vua25vd25FbGVtZW50KGVsKSB7XG4gIHJldHVybiAhaXNLbm93blZpZXcoZWwpXG59XG5cbnZhciBWVUVfVkVSU0lPTiA9IHByb2Nlc3MuZW52LlZVRV9WRVJTSU9OIHx8ICcyLjYuMTAnO1xudmFyIE5TX1ZVRV9WRVJTSU9OID0gcHJvY2Vzcy5lbnYuTlNfVlVFX1ZFUlNJT04gfHwgJzIuNC4wJztcblxudmFyIGluZm9UcmFjZSA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICBjb25zb2xlLmxvZyhcbiAgICBcIk5hdGl2ZVNjcmlwdC1WdWUgaGFzIFxcXCJWdWUuY29uZmlnLnNpbGVudFxcXCIgc2V0IHRvIHRydWUsIHRvIHNlZSBvdXRwdXQgbG9ncyBzZXQgaXQgdG8gZmFsc2UuXCJcbiAgKTtcbn0pO1xuXG5mdW5jdGlvbiB0cmFjZShtZXNzYWdlKSB7XG4gIGlmIChfVnVlICYmIF9WdWUuY29uZmlnLnNpbGVudCkge1xuICAgIHJldHVybiBpbmZvVHJhY2UoKVxuICB9XG5cbiAgY29uc29sZS5sb2coXG4gICAgKFwie05TVnVlIChWdWU6IFwiICsgVlVFX1ZFUlNJT04gKyBcIiB8IE5TVnVlOiBcIiArIE5TX1ZVRV9WRVJTSU9OICsgXCIpfSAtPiBcIiArIG1lc3NhZ2UpXG4gICk7XG59XG5cbnZhciBuYW1lc3BhY2VNYXAgPSB7fTtcblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCQxKHRhZ05hbWUsIHZub2RlKSB7XG4gIHRyYWNlKChcIkNyZWF0ZUVsZW1lbnQoXCIgKyB0YWdOYW1lICsgXCIpXCIpKTtcbiAgcmV0dXJuIERvY3VtZW50Tm9kZS5jcmVhdGVFbGVtZW50KHRhZ05hbWUpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsIHRhZ05hbWUpIHtcbiAgdHJhY2UoKFwiQ3JlYXRlRWxlbWVudE5TKFwiICsgbmFtZXNwYWNlICsgXCIjXCIgKyB0YWdOYW1lICsgXCIpXCIpKTtcbiAgcmV0dXJuIERvY3VtZW50Tm9kZS5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCB0YWdOYW1lKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSh0ZXh0KSB7XG4gIHRyYWNlKChcIkNyZWF0ZVRleHROb2RlKFwiICsgdGV4dCArIFwiKVwiKSk7XG4gIHJldHVybiBEb2N1bWVudE5vZGUuY3JlYXRlVGV4dE5vZGUodGV4dClcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudCh0ZXh0KSB7XG4gIHRyYWNlKChcIkNyZWF0ZUNvbW1lbnQoXCIgKyB0ZXh0ICsgXCIpXCIpKTtcblxuICByZXR1cm4gRG9jdW1lbnROb2RlLmNyZWF0ZUNvbW1lbnQodGV4dClcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlKHBhcmVudE5vZGUsIG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgdHJhY2UoKFwiSW5zZXJ0QmVmb3JlKFwiICsgcGFyZW50Tm9kZSArIFwiLCBcIiArIG5ld05vZGUgKyBcIiwgXCIgKyByZWZlcmVuY2VOb2RlICsgXCIpXCIpKTtcbiAgcmV0dXJuIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpXG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkJDEobm9kZSwgY2hpbGQpIHtcbiAgdHJhY2UoKFwiUmVtb3ZlQ2hpbGQoXCIgKyBub2RlICsgXCIsIFwiICsgY2hpbGQgKyBcIilcIikpO1xuICByZXR1cm4gbm9kZS5yZW1vdmVDaGlsZChjaGlsZClcbn1cblxuZnVuY3Rpb24gYXBwZW5kQ2hpbGQobm9kZSwgY2hpbGQpIHtcbiAgdHJhY2UoKFwiQXBwZW5kQ2hpbGQoXCIgKyBub2RlICsgXCIsIFwiICsgY2hpbGQgKyBcIilcIikpO1xuXG4gIHJldHVybiBub2RlLmFwcGVuZENoaWxkKGNoaWxkKVxufVxuXG5mdW5jdGlvbiBwYXJlbnROb2RlKG5vZGUpIHtcbiAgdHJhY2UoKFwiUGFyZW50Tm9kZShcIiArIG5vZGUgKyBcIikgLT4gXCIgKyAobm9kZS5wYXJlbnROb2RlKSkpO1xuXG4gIHJldHVybiBub2RlLnBhcmVudE5vZGVcbn1cblxuZnVuY3Rpb24gbmV4dFNpYmxpbmcobm9kZSkge1xuICB0cmFjZSgoXCJOZXh0U2libGluZyhcIiArIG5vZGUgKyBcIikgLT4gXCIgKyAobm9kZS5uZXh0U2libGluZykpKTtcblxuICByZXR1cm4gbm9kZS5uZXh0U2libGluZ1xufVxuXG5mdW5jdGlvbiB0YWdOYW1lKGVsZW1lbnROb2RlKSB7XG4gIHRyYWNlKChcIlRhZ05hbWUoXCIgKyBlbGVtZW50Tm9kZSArIFwiKSAtPiBcIiArIChlbGVtZW50Tm9kZS50YWdOYW1lKSkpO1xuXG4gIHJldHVybiBlbGVtZW50Tm9kZS50YWdOYW1lXG59XG5cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50KG5vZGUsIHRleHQpIHtcbiAgdHJhY2UoKFwiU2V0VGV4dENvbnRlbnQoXCIgKyBub2RlICsgXCIsIFwiICsgdGV4dCArIFwiKVwiKSk7XG5cbiAgbm9kZS5zZXRUZXh0KHRleHQpO1xufVxuXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGUobm9kZSwga2V5LCB2YWwpIHtcbiAgdHJhY2UoKFwiU2V0QXR0cmlidXRlKFwiICsgbm9kZSArIFwiLCBcIiArIGtleSArIFwiLCBcIiArIHZhbCArIFwiKVwiKSk7XG5cbiAgbm9kZS5zZXRBdHRyaWJ1dGUoa2V5LCB2YWwpO1xufVxuXG5mdW5jdGlvbiBzZXRTdHlsZVNjb3BlKG5vZGUsIHNjb3BlSWQpIHtcbiAgbm9kZS5zZXRBdHRyaWJ1dGUoc2NvcGVJZCwgJycpO1xufVxuXG52YXIgbm9kZU9wcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgICBuYW1lc3BhY2VNYXA6IG5hbWVzcGFjZU1hcCxcbiAgICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50JDEsXG4gICAgY3JlYXRlRWxlbWVudE5TOiBjcmVhdGVFbGVtZW50TlMsXG4gICAgY3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuICAgIGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG4gICAgaW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsXG4gICAgcmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkJDEsXG4gICAgYXBwZW5kQ2hpbGQ6IGFwcGVuZENoaWxkLFxuICAgIHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG4gICAgbmV4dFNpYmxpbmc6IG5leHRTaWJsaW5nLFxuICAgIHRhZ05hbWU6IHRhZ05hbWUsXG4gICAgc2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuICAgIHNldEF0dHJpYnV0ZTogc2V0QXR0cmlidXRlLFxuICAgIHNldFN0eWxlU2NvcGU6IHNldFN0eWxlU2NvcGVcbn0pO1xuXG52YXIgbW9kdWxlcyA9IHBsYXRmb3JtTW9kdWxlcy5jb25jYXQoYmFzZU1vZHVsZXMpO1xuXG52YXIgcGF0Y2ggPSBjcmVhdGVQYXRjaEZ1bmN0aW9uKHtcbiAgbm9kZU9wczogbm9kZU9wcyxcbiAgbW9kdWxlczogbW9kdWxlc1xufSk7XG5cbnZhciBoZSA9IHtcbiAgZGVjb2RlOiBkZWNvZGVcbn07XG5cbmZ1bmN0aW9uIGRlY29kZShodG1sKSB7XG4gIC8vIHRvZG8/XG4gIHJldHVybiBodG1sXG59XG5cbi8qICAqL1xuXG52YXIgaXNVbmFyeVRhZyQxID0gbWFrZU1hcChcbiAgJ2FyZWEsYmFzZSxicixjb2wsZW1iZWQsZnJhbWUsaHIsaW1nLGlucHV0LGlzaW5kZXgsa2V5Z2VuLCcgK1xuICAnbGluayxtZXRhLHBhcmFtLHNvdXJjZSx0cmFjayx3YnInXG4pO1xuXG4vLyBFbGVtZW50cyB0aGF0IHlvdSBjYW4sIGludGVudGlvbmFsbHksIGxlYXZlIG9wZW5cbi8vIChhbmQgd2hpY2ggY2xvc2UgdGhlbXNlbHZlcylcbnZhciBjYW5CZUxlZnRPcGVuVGFnJDEgPSBtYWtlTWFwKFxuICAnY29sZ3JvdXAsZGQsZHQsbGksb3B0aW9ucyxwLHRkLHRmb290LHRoLHRoZWFkLHRyLHNvdXJjZSdcbik7XG5cbi8vIEhUTUw1IHRhZ3MgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5kaWNlcy5odG1sI2VsZW1lbnRzLTNcbi8vIFBocmFzaW5nIENvbnRlbnQgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZG9tLmh0bWwjcGhyYXNpbmctY29udGVudFxudmFyIGlzTm9uUGhyYXNpbmdUYWcgPSBtYWtlTWFwKFxuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGJhc2UsYmxvY2txdW90ZSxib2R5LGNhcHRpb24sY29sLGNvbGdyb3VwLGRkLCcgK1xuICAnZGV0YWlscyxkaWFsb2csZGl2LGRsLGR0LGZpZWxkc2V0LGZpZ2NhcHRpb24sZmlndXJlLGZvb3Rlcixmb3JtLCcgK1xuICAnaDEsaDIsaDMsaDQsaDUsaDYsaGVhZCxoZWFkZXIsaGdyb3VwLGhyLGh0bWwsbGVnZW5kLGxpLG1lbnVpdGVtLG1ldGEsJyArXG4gICdvcHRncm91cCxvcHRpb24scGFyYW0scnAscnQsc291cmNlLHN0eWxlLHN1bW1hcnksdGJvZHksdGQsdGZvb3QsdGgsdGhlYWQsJyArXG4gICd0aXRsZSx0cix0cmFjaydcbik7XG5cbi8qKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgaXQncyBtb3N0bHkgdmVuZG9yIGNvZGUuXG4gKi9cblxuLy8gUmVndWxhciBFeHByZXNzaW9ucyBmb3IgcGFyc2luZyB0YWdzIGFuZCBhdHRyaWJ1dGVzXG52YXIgYXR0cmlidXRlID0gL15cXHMqKFteXFxzXCInPD5cXC89XSspKD86XFxzKig9KVxccyooPzpcIihbXlwiXSopXCIrfCcoW14nXSopJyt8KFteXFxzXCInPTw+YF0rKSkpPy87XG52YXIgZHluYW1pY0FyZ0F0dHJpYnV0ZSA9IC9eXFxzKigoPzp2LVtcXHctXSs6fEB8OnwjKVxcW1tePV0rXFxdW15cXHNcIic8PlxcLz1dKikoPzpcXHMqKD0pXFxzKig/OlwiKFteXCJdKilcIit8JyhbXiddKiknK3woW15cXHNcIic9PD5gXSspKSk/LztcbnZhciBuY25hbWUgPSBcIlthLXpBLVpfXVtcXFxcLVxcXFwuMC05X2EtekEtWlwiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiXSpcIjtcbnZhciBxbmFtZUNhcHR1cmUgPSBcIigoPzpcIiArIG5jbmFtZSArIFwiXFxcXDopP1wiICsgbmNuYW1lICsgXCIpXCI7XG52YXIgc3RhcnRUYWdPcGVuID0gbmV3IFJlZ0V4cCgoXCJePFwiICsgcW5hbWVDYXB0dXJlKSk7XG52YXIgc3RhcnRUYWdDbG9zZSA9IC9eXFxzKihcXC8/KT4vO1xudmFyIGVuZFRhZyA9IG5ldyBSZWdFeHAoKFwiXjxcXFxcL1wiICsgcW5hbWVDYXB0dXJlICsgXCJbXj5dKj5cIikpO1xudmFyIGRvY3R5cGUgPSAvXjwhRE9DVFlQRSBbXj5dKz4vaTtcbi8vICM3Mjk4OiBlc2NhcGUgLSB0byBhdm9pZCBiZWluZyBwYXNlZCBhcyBIVE1MIGNvbW1lbnQgd2hlbiBpbmxpbmVkIGluIHBhZ2VcbnZhciBjb21tZW50ID0gL148IVxcLS0vO1xudmFyIGNvbmRpdGlvbmFsQ29tbWVudCA9IC9ePCFcXFsvO1xuXG4vLyBTcGVjaWFsIEVsZW1lbnRzIChjYW4gY29udGFpbiBhbnl0aGluZylcbnZhciBpc1BsYWluVGV4dEVsZW1lbnQgPSBtYWtlTWFwKCdzY3JpcHQsc3R5bGUsdGV4dGFyZWEnLCB0cnVlKTtcbnZhciByZUNhY2hlID0ge307XG5cbnZhciBkZWNvZGluZ01hcCA9IHtcbiAgJyZsdDsnOiAnPCcsXG4gICcmZ3Q7JzogJz4nLFxuICAnJnF1b3Q7JzogJ1wiJyxcbiAgJyZhbXA7JzogJyYnLFxuICAnJiMxMDsnOiAnXFxuJyxcbiAgJyYjOTsnOiAnXFx0JyxcbiAgJyYjMzk7JzogXCInXCJcbn07XG52YXIgZW5jb2RlZEF0dHIgPSAvJig/Omx0fGd0fHF1b3R8YW1wfCMzOSk7L2c7XG52YXIgZW5jb2RlZEF0dHJXaXRoTmV3TGluZXMgPSAvJig/Omx0fGd0fHF1b3R8YW1wfCMzOXwjMTB8IzkpOy9nO1xuXG4vLyAjNTk5MlxudmFyIGlzSWdub3JlTmV3bGluZVRhZyA9IG1ha2VNYXAoJ3ByZSx0ZXh0YXJlYScsIHRydWUpO1xudmFyIHNob3VsZElnbm9yZUZpcnN0TmV3bGluZSA9IGZ1bmN0aW9uICh0YWcsIGh0bWwpIHsgcmV0dXJuIHRhZyAmJiBpc0lnbm9yZU5ld2xpbmVUYWcodGFnKSAmJiBodG1sWzBdID09PSAnXFxuJzsgfTtcblxuZnVuY3Rpb24gZGVjb2RlQXR0ciAodmFsdWUsIHNob3VsZERlY29kZU5ld2xpbmVzKSB7XG4gIHZhciByZSA9IHNob3VsZERlY29kZU5ld2xpbmVzID8gZW5jb2RlZEF0dHJXaXRoTmV3TGluZXMgOiBlbmNvZGVkQXR0cjtcbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UocmUsIGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gZGVjb2RpbmdNYXBbbWF0Y2hdOyB9KVxufVxuXG5mdW5jdGlvbiBwYXJzZUhUTUwgKGh0bWwsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YWNrID0gW107XG4gIHZhciBleHBlY3RIVE1MID0gb3B0aW9ucy5leHBlY3RIVE1MO1xuICB2YXIgaXNVbmFyeVRhZyA9IG9wdGlvbnMuaXNVbmFyeVRhZyB8fCBubztcbiAgdmFyIGNhbkJlTGVmdE9wZW5UYWcgPSBvcHRpb25zLmNhbkJlTGVmdE9wZW5UYWcgfHwgbm87XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0LCBsYXN0VGFnO1xuICB3aGlsZSAoaHRtbCkge1xuICAgIGxhc3QgPSBodG1sO1xuICAgIC8vIE1ha2Ugc3VyZSB3ZSdyZSBub3QgaW4gYSBwbGFpbnRleHQgY29udGVudCBlbGVtZW50IGxpa2Ugc2NyaXB0L3N0eWxlXG4gICAgaWYgKCFsYXN0VGFnIHx8ICFpc1BsYWluVGV4dEVsZW1lbnQobGFzdFRhZykpIHtcbiAgICAgIHZhciB0ZXh0RW5kID0gaHRtbC5pbmRleE9mKCc8Jyk7XG4gICAgICBpZiAodGV4dEVuZCA9PT0gMCkge1xuICAgICAgICAvLyBDb21tZW50OlxuICAgICAgICBpZiAoY29tbWVudC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgdmFyIGNvbW1lbnRFbmQgPSBodG1sLmluZGV4T2YoJy0tPicpO1xuXG4gICAgICAgICAgaWYgKGNvbW1lbnRFbmQgPj0gMCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvdWxkS2VlcENvbW1lbnQpIHtcbiAgICAgICAgICAgICAgb3B0aW9ucy5jb21tZW50KGh0bWwuc3Vic3RyaW5nKDQsIGNvbW1lbnRFbmQpLCBpbmRleCwgaW5kZXggKyBjb21tZW50RW5kICsgMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZHZhbmNlKGNvbW1lbnRFbmQgKyAzKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db25kaXRpb25hbF9jb21tZW50I0Rvd25sZXZlbC1yZXZlYWxlZF9jb25kaXRpb25hbF9jb21tZW50XG4gICAgICAgIGlmIChjb25kaXRpb25hbENvbW1lbnQudGVzdChodG1sKSkge1xuICAgICAgICAgIHZhciBjb25kaXRpb25hbEVuZCA9IGh0bWwuaW5kZXhPZignXT4nKTtcblxuICAgICAgICAgIGlmIChjb25kaXRpb25hbEVuZCA+PSAwKSB7XG4gICAgICAgICAgICBhZHZhbmNlKGNvbmRpdGlvbmFsRW5kICsgMik7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERvY3R5cGU6XG4gICAgICAgIHZhciBkb2N0eXBlTWF0Y2ggPSBodG1sLm1hdGNoKGRvY3R5cGUpO1xuICAgICAgICBpZiAoZG9jdHlwZU1hdGNoKSB7XG4gICAgICAgICAgYWR2YW5jZShkb2N0eXBlTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRW5kIHRhZzpcbiAgICAgICAgdmFyIGVuZFRhZ01hdGNoID0gaHRtbC5tYXRjaChlbmRUYWcpO1xuICAgICAgICBpZiAoZW5kVGFnTWF0Y2gpIHtcbiAgICAgICAgICB2YXIgY3VySW5kZXggPSBpbmRleDtcbiAgICAgICAgICBhZHZhbmNlKGVuZFRhZ01hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgcGFyc2VFbmRUYWcoZW5kVGFnTWF0Y2hbMV0sIGN1ckluZGV4LCBpbmRleCk7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0YXJ0IHRhZzpcbiAgICAgICAgdmFyIHN0YXJ0VGFnTWF0Y2ggPSBwYXJzZVN0YXJ0VGFnKCk7XG4gICAgICAgIGlmIChzdGFydFRhZ01hdGNoKSB7XG4gICAgICAgICAgaGFuZGxlU3RhcnRUYWcoc3RhcnRUYWdNYXRjaCk7XG4gICAgICAgICAgaWYgKHNob3VsZElnbm9yZUZpcnN0TmV3bGluZShzdGFydFRhZ01hdGNoLnRhZ05hbWUsIGh0bWwpKSB7XG4gICAgICAgICAgICBhZHZhbmNlKDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZXh0ID0gKHZvaWQgMCksIHJlc3QgPSAodm9pZCAwKSwgbmV4dCA9ICh2b2lkIDApO1xuICAgICAgaWYgKHRleHRFbmQgPj0gMCkge1xuICAgICAgICByZXN0ID0gaHRtbC5zbGljZSh0ZXh0RW5kKTtcbiAgICAgICAgd2hpbGUgKFxuICAgICAgICAgICFlbmRUYWcudGVzdChyZXN0KSAmJlxuICAgICAgICAgICFzdGFydFRhZ09wZW4udGVzdChyZXN0KSAmJlxuICAgICAgICAgICFjb21tZW50LnRlc3QocmVzdCkgJiZcbiAgICAgICAgICAhY29uZGl0aW9uYWxDb21tZW50LnRlc3QocmVzdClcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gPCBpbiBwbGFpbiB0ZXh0LCBiZSBmb3JnaXZpbmcgYW5kIHRyZWF0IGl0IGFzIHRleHRcbiAgICAgICAgICBuZXh0ID0gcmVzdC5pbmRleE9mKCc8JywgMSk7XG4gICAgICAgICAgaWYgKG5leHQgPCAwKSB7IGJyZWFrIH1cbiAgICAgICAgICB0ZXh0RW5kICs9IG5leHQ7XG4gICAgICAgICAgcmVzdCA9IGh0bWwuc2xpY2UodGV4dEVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGV4dCA9IGh0bWwuc3Vic3RyaW5nKDAsIHRleHRFbmQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGV4dEVuZCA8IDApIHtcbiAgICAgICAgdGV4dCA9IGh0bWw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgIGFkdmFuY2UodGV4dC5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5jaGFycyAmJiB0ZXh0KSB7XG4gICAgICAgIG9wdGlvbnMuY2hhcnModGV4dCwgaW5kZXggLSB0ZXh0Lmxlbmd0aCwgaW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZW5kVGFnTGVuZ3RoID0gMDtcbiAgICAgIHZhciBzdGFja2VkVGFnID0gbGFzdFRhZy50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIHJlU3RhY2tlZFRhZyA9IHJlQ2FjaGVbc3RhY2tlZFRhZ10gfHwgKHJlQ2FjaGVbc3RhY2tlZFRhZ10gPSBuZXcgUmVnRXhwKCcoW1xcXFxzXFxcXFNdKj8pKDwvJyArIHN0YWNrZWRUYWcgKyAnW14+XSo+KScsICdpJykpO1xuICAgICAgdmFyIHJlc3QkMSA9IGh0bWwucmVwbGFjZShyZVN0YWNrZWRUYWcsIGZ1bmN0aW9uIChhbGwsIHRleHQsIGVuZFRhZykge1xuICAgICAgICBlbmRUYWdMZW5ndGggPSBlbmRUYWcubGVuZ3RoO1xuICAgICAgICBpZiAoIWlzUGxhaW5UZXh0RWxlbWVudChzdGFja2VkVGFnKSAmJiBzdGFja2VkVGFnICE9PSAnbm9zY3JpcHQnKSB7XG4gICAgICAgICAgdGV4dCA9IHRleHRcbiAgICAgICAgICAgIC5yZXBsYWNlKC88IVxcLS0oW1xcc1xcU10qPyktLT4vZywgJyQxJykgLy8gIzcyOThcbiAgICAgICAgICAgIC5yZXBsYWNlKC88IVxcW0NEQVRBXFxbKFtcXHNcXFNdKj8pXV0+L2csICckMScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUoc3RhY2tlZFRhZywgdGV4dCkpIHtcbiAgICAgICAgICB0ZXh0ID0gdGV4dC5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5jaGFycykge1xuICAgICAgICAgIG9wdGlvbnMuY2hhcnModGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnXG4gICAgICB9KTtcbiAgICAgIGluZGV4ICs9IGh0bWwubGVuZ3RoIC0gcmVzdCQxLmxlbmd0aDtcbiAgICAgIGh0bWwgPSByZXN0JDE7XG4gICAgICBwYXJzZUVuZFRhZyhzdGFja2VkVGFnLCBpbmRleCAtIGVuZFRhZ0xlbmd0aCwgaW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChodG1sID09PSBsYXN0KSB7XG4gICAgICBvcHRpb25zLmNoYXJzICYmIG9wdGlvbnMuY2hhcnMoaHRtbCk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhc3RhY2subGVuZ3RoICYmIG9wdGlvbnMud2Fybikge1xuICAgICAgICBvcHRpb25zLndhcm4oKFwiTWFsLWZvcm1hdHRlZCB0YWcgYXQgZW5kIG9mIHRlbXBsYXRlOiBcXFwiXCIgKyBodG1sICsgXCJcXFwiXCIpLCB7IHN0YXJ0OiBpbmRleCArIGh0bWwubGVuZ3RoIH0pO1xuICAgICAgfVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICAvLyBDbGVhbiB1cCBhbnkgcmVtYWluaW5nIHRhZ3NcbiAgcGFyc2VFbmRUYWcoKTtcblxuICBmdW5jdGlvbiBhZHZhbmNlIChuKSB7XG4gICAgaW5kZXggKz0gbjtcbiAgICBodG1sID0gaHRtbC5zdWJzdHJpbmcobik7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVN0YXJ0VGFnICgpIHtcbiAgICB2YXIgc3RhcnQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnT3Blbik7XG4gICAgaWYgKHN0YXJ0KSB7XG4gICAgICB2YXIgbWF0Y2ggPSB7XG4gICAgICAgIHRhZ05hbWU6IHN0YXJ0WzFdLFxuICAgICAgICBhdHRyczogW10sXG4gICAgICAgIHN0YXJ0OiBpbmRleFxuICAgICAgfTtcbiAgICAgIGFkdmFuY2Uoc3RhcnRbMF0ubGVuZ3RoKTtcbiAgICAgIHZhciBlbmQsIGF0dHI7XG4gICAgICB3aGlsZSAoIShlbmQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnQ2xvc2UpKSAmJiAoYXR0ciA9IGh0bWwubWF0Y2goZHluYW1pY0FyZ0F0dHJpYnV0ZSkgfHwgaHRtbC5tYXRjaChhdHRyaWJ1dGUpKSkge1xuICAgICAgICBhdHRyLnN0YXJ0ID0gaW5kZXg7XG4gICAgICAgIGFkdmFuY2UoYXR0clswXS5sZW5ndGgpO1xuICAgICAgICBhdHRyLmVuZCA9IGluZGV4O1xuICAgICAgICBtYXRjaC5hdHRycy5wdXNoKGF0dHIpO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCkge1xuICAgICAgICBtYXRjaC51bmFyeVNsYXNoID0gZW5kWzFdO1xuICAgICAgICBhZHZhbmNlKGVuZFswXS5sZW5ndGgpO1xuICAgICAgICBtYXRjaC5lbmQgPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIG1hdGNoXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3RhcnRUYWcgKG1hdGNoKSB7XG4gICAgdmFyIHRhZ05hbWUgPSBtYXRjaC50YWdOYW1lO1xuICAgIHZhciB1bmFyeVNsYXNoID0gbWF0Y2gudW5hcnlTbGFzaDtcblxuICAgIGlmIChleHBlY3RIVE1MKSB7XG4gICAgICBpZiAobGFzdFRhZyA9PT0gJ3AnICYmIGlzTm9uUGhyYXNpbmdUYWcodGFnTmFtZSkpIHtcbiAgICAgICAgcGFyc2VFbmRUYWcobGFzdFRhZyk7XG4gICAgICB9XG4gICAgICBpZiAoY2FuQmVMZWZ0T3BlblRhZyh0YWdOYW1lKSAmJiBsYXN0VGFnID09PSB0YWdOYW1lKSB7XG4gICAgICAgIHBhcnNlRW5kVGFnKHRhZ05hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB1bmFyeSA9IGlzVW5hcnlUYWcodGFnTmFtZSkgfHwgISF1bmFyeVNsYXNoO1xuXG4gICAgdmFyIGwgPSBtYXRjaC5hdHRycy5sZW5ndGg7XG4gICAgdmFyIGF0dHJzID0gbmV3IEFycmF5KGwpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgYXJncyA9IG1hdGNoLmF0dHJzW2ldO1xuICAgICAgdmFyIHZhbHVlID0gYXJnc1szXSB8fCBhcmdzWzRdIHx8IGFyZ3NbNV0gfHwgJyc7XG4gICAgICB2YXIgc2hvdWxkRGVjb2RlTmV3bGluZXMgPSB0YWdOYW1lID09PSAnYScgJiYgYXJnc1sxXSA9PT0gJ2hyZWYnXG4gICAgICAgID8gb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWZcbiAgICAgICAgOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzO1xuICAgICAgYXR0cnNbaV0gPSB7XG4gICAgICAgIG5hbWU6IGFyZ3NbMV0sXG4gICAgICAgIHZhbHVlOiBkZWNvZGVBdHRyKHZhbHVlLCBzaG91bGREZWNvZGVOZXdsaW5lcylcbiAgICAgIH07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgIGF0dHJzW2ldLnN0YXJ0ID0gYXJncy5zdGFydCArIGFyZ3NbMF0ubWF0Y2goL15cXHMqLykubGVuZ3RoO1xuICAgICAgICBhdHRyc1tpXS5lbmQgPSBhcmdzLmVuZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXVuYXJ5KSB7XG4gICAgICBzdGFjay5wdXNoKHsgdGFnOiB0YWdOYW1lLCBsb3dlckNhc2VkVGFnOiB0YWdOYW1lLnRvTG93ZXJDYXNlKCksIGF0dHJzOiBhdHRycywgc3RhcnQ6IG1hdGNoLnN0YXJ0LCBlbmQ6IG1hdGNoLmVuZCB9KTtcbiAgICAgIGxhc3RUYWcgPSB0YWdOYW1lO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIGF0dHJzLCB1bmFyeSwgbWF0Y2guc3RhcnQsIG1hdGNoLmVuZCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VFbmRUYWcgKHRhZ05hbWUsIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgcG9zLCBsb3dlckNhc2VkVGFnTmFtZTtcbiAgICBpZiAoc3RhcnQgPT0gbnVsbCkgeyBzdGFydCA9IGluZGV4OyB9XG4gICAgaWYgKGVuZCA9PSBudWxsKSB7IGVuZCA9IGluZGV4OyB9XG5cbiAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IG9wZW5lZCB0YWcgb2YgdGhlIHNhbWUgdHlwZVxuICAgIGlmICh0YWdOYW1lKSB7XG4gICAgICBsb3dlckNhc2VkVGFnTmFtZSA9IHRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGZvciAocG9zID0gc3RhY2subGVuZ3RoIC0gMTsgcG9zID49IDA7IHBvcy0tKSB7XG4gICAgICAgIGlmIChzdGFja1twb3NdLmxvd2VyQ2FzZWRUYWcgPT09IGxvd2VyQ2FzZWRUYWdOYW1lKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBubyB0YWcgbmFtZSBpcyBwcm92aWRlZCwgY2xlYW4gc2hvcFxuICAgICAgcG9zID0gMDtcbiAgICB9XG5cbiAgICBpZiAocG9zID49IDApIHtcbiAgICAgIC8vIENsb3NlIGFsbCB0aGUgb3BlbiBlbGVtZW50cywgdXAgdGhlIHN0YWNrXG4gICAgICBmb3IgKHZhciBpID0gc3RhY2subGVuZ3RoIC0gMTsgaSA+PSBwb3M7IGktLSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgIChpID4gcG9zIHx8ICF0YWdOYW1lKSAmJlxuICAgICAgICAgIG9wdGlvbnMud2FyblxuICAgICAgICApIHtcbiAgICAgICAgICBvcHRpb25zLndhcm4oXG4gICAgICAgICAgICAoXCJ0YWcgPFwiICsgKHN0YWNrW2ldLnRhZykgKyBcIj4gaGFzIG5vIG1hdGNoaW5nIGVuZCB0YWcuXCIpLFxuICAgICAgICAgICAgeyBzdGFydDogc3RhY2tbaV0uc3RhcnQsIGVuZDogc3RhY2tbaV0uZW5kIH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmVuZCkge1xuICAgICAgICAgIG9wdGlvbnMuZW5kKHN0YWNrW2ldLnRhZywgc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIHRoZSBvcGVuIGVsZW1lbnRzIGZyb20gdGhlIHN0YWNrXG4gICAgICBzdGFjay5sZW5ndGggPSBwb3M7XG4gICAgICBsYXN0VGFnID0gcG9zICYmIHN0YWNrW3BvcyAtIDFdLnRhZztcbiAgICB9IGVsc2UgaWYgKGxvd2VyQ2FzZWRUYWdOYW1lID09PSAnYnInKSB7XG4gICAgICBpZiAob3B0aW9ucy5zdGFydCkge1xuICAgICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIFtdLCB0cnVlLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxvd2VyQ2FzZWRUYWdOYW1lID09PSAncCcpIHtcbiAgICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgW10sIGZhbHNlLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmVuZCkge1xuICAgICAgICBvcHRpb25zLmVuZCh0YWdOYW1lLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciB2YWxpZERpdmlzaW9uQ2hhclJFID0gL1tcXHcpLitcXC1fJFxcXV0vO1xuXG5mdW5jdGlvbiBwYXJzZUZpbHRlcnMgKGV4cCkge1xuICB2YXIgaW5TaW5nbGUgPSBmYWxzZTtcbiAgdmFyIGluRG91YmxlID0gZmFsc2U7XG4gIHZhciBpblRlbXBsYXRlU3RyaW5nID0gZmFsc2U7XG4gIHZhciBpblJlZ2V4ID0gZmFsc2U7XG4gIHZhciBjdXJseSA9IDA7XG4gIHZhciBzcXVhcmUgPSAwO1xuICB2YXIgcGFyZW4gPSAwO1xuICB2YXIgbGFzdEZpbHRlckluZGV4ID0gMDtcbiAgdmFyIGMsIHByZXYsIGksIGV4cHJlc3Npb24sIGZpbHRlcnM7XG5cbiAgZm9yIChpID0gMDsgaSA8IGV4cC5sZW5ndGg7IGkrKykge1xuICAgIHByZXYgPSBjO1xuICAgIGMgPSBleHAuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoaW5TaW5nbGUpIHtcbiAgICAgIGlmIChjID09PSAweDI3ICYmIHByZXYgIT09IDB4NUMpIHsgaW5TaW5nbGUgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5Eb3VibGUpIHtcbiAgICAgIGlmIChjID09PSAweDIyICYmIHByZXYgIT09IDB4NUMpIHsgaW5Eb3VibGUgPSBmYWxzZTsgfVxuICAgIH0gZWxzZSBpZiAoaW5UZW1wbGF0ZVN0cmluZykge1xuICAgICAgaWYgKGMgPT09IDB4NjAgJiYgcHJldiAhPT0gMHg1QykgeyBpblRlbXBsYXRlU3RyaW5nID0gZmFsc2U7IH1cbiAgICB9IGVsc2UgaWYgKGluUmVnZXgpIHtcbiAgICAgIGlmIChjID09PSAweDJmICYmIHByZXYgIT09IDB4NUMpIHsgaW5SZWdleCA9IGZhbHNlOyB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGMgPT09IDB4N0MgJiYgLy8gcGlwZVxuICAgICAgZXhwLmNoYXJDb2RlQXQoaSArIDEpICE9PSAweDdDICYmXG4gICAgICBleHAuY2hhckNvZGVBdChpIC0gMSkgIT09IDB4N0MgJiZcbiAgICAgICFjdXJseSAmJiAhc3F1YXJlICYmICFwYXJlblxuICAgICkge1xuICAgICAgaWYgKGV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBmaXJzdCBmaWx0ZXIsIGVuZCBvZiBleHByZXNzaW9uXG4gICAgICAgIGxhc3RGaWx0ZXJJbmRleCA9IGkgKyAxO1xuICAgICAgICBleHByZXNzaW9uID0gZXhwLnNsaWNlKDAsIGkpLnRyaW0oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hGaWx0ZXIoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgIGNhc2UgMHgyMjogaW5Eb3VibGUgPSB0cnVlOyBicmVhayAgICAgICAgIC8vIFwiXG4gICAgICAgIGNhc2UgMHgyNzogaW5TaW5nbGUgPSB0cnVlOyBicmVhayAgICAgICAgIC8vICdcbiAgICAgICAgY2FzZSAweDYwOiBpblRlbXBsYXRlU3RyaW5nID0gdHJ1ZTsgYnJlYWsgLy8gYFxuICAgICAgICBjYXNlIDB4Mjg6IHBhcmVuKys7IGJyZWFrICAgICAgICAgICAgICAgICAvLyAoXG4gICAgICAgIGNhc2UgMHgyOTogcGFyZW4tLTsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIClcbiAgICAgICAgY2FzZSAweDVCOiBzcXVhcmUrKzsgYnJlYWsgICAgICAgICAgICAgICAgLy8gW1xuICAgICAgICBjYXNlIDB4NUQ6IHNxdWFyZS0tOyBicmVhayAgICAgICAgICAgICAgICAvLyBdXG4gICAgICAgIGNhc2UgMHg3QjogY3VybHkrKzsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgY2FzZSAweDdEOiBjdXJseS0tOyBicmVhayAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgfVxuICAgICAgaWYgKGMgPT09IDB4MmYpIHsgLy8gL1xuICAgICAgICB2YXIgaiA9IGkgLSAxO1xuICAgICAgICB2YXIgcCA9ICh2b2lkIDApO1xuICAgICAgICAvLyBmaW5kIGZpcnN0IG5vbi13aGl0ZXNwYWNlIHByZXYgY2hhclxuICAgICAgICBmb3IgKDsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICBwID0gZXhwLmNoYXJBdChqKTtcbiAgICAgICAgICBpZiAocCAhPT0gJyAnKSB7IGJyZWFrIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXAgfHwgIXZhbGlkRGl2aXNpb25DaGFyUkUudGVzdChwKSkge1xuICAgICAgICAgIGluUmVnZXggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCkge1xuICAgIGV4cHJlc3Npb24gPSBleHAuc2xpY2UoMCwgaSkudHJpbSgpO1xuICB9IGVsc2UgaWYgKGxhc3RGaWx0ZXJJbmRleCAhPT0gMCkge1xuICAgIHB1c2hGaWx0ZXIoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2hGaWx0ZXIgKCkge1xuICAgIChmaWx0ZXJzIHx8IChmaWx0ZXJzID0gW10pKS5wdXNoKGV4cC5zbGljZShsYXN0RmlsdGVySW5kZXgsIGkpLnRyaW0oKSk7XG4gICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XG4gIH1cblxuICBpZiAoZmlsdGVycykge1xuICAgIGZvciAoaSA9IDA7IGkgPCBmaWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBleHByZXNzaW9uID0gd3JhcEZpbHRlcihleHByZXNzaW9uLCBmaWx0ZXJzW2ldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXhwcmVzc2lvblxufVxuXG5mdW5jdGlvbiB3cmFwRmlsdGVyIChleHAsIGZpbHRlcikge1xuICB2YXIgaSA9IGZpbHRlci5pbmRleE9mKCcoJyk7XG4gIGlmIChpIDwgMCkge1xuICAgIC8vIF9mOiByZXNvbHZlRmlsdGVyXG4gICAgcmV0dXJuIChcIl9mKFxcXCJcIiArIGZpbHRlciArIFwiXFxcIikoXCIgKyBleHAgKyBcIilcIilcbiAgfSBlbHNlIHtcbiAgICB2YXIgbmFtZSA9IGZpbHRlci5zbGljZSgwLCBpKTtcbiAgICB2YXIgYXJncyA9IGZpbHRlci5zbGljZShpICsgMSk7XG4gICAgcmV0dXJuIChcIl9mKFxcXCJcIiArIG5hbWUgKyBcIlxcXCIpKFwiICsgZXhwICsgKGFyZ3MgIT09ICcpJyA/ICcsJyArIGFyZ3MgOiBhcmdzKSlcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGRlZmF1bHRUYWdSRSA9IC9cXHtcXHsoKD86LnxcXHI/XFxuKSs/KVxcfVxcfS9nO1xudmFyIHJlZ2V4RXNjYXBlUkUgPSAvWy0uKis/XiR7fSgpfFtcXF1cXC9cXFxcXS9nO1xuXG52YXIgYnVpbGRSZWdleCA9IGNhY2hlZChmdW5jdGlvbiAoZGVsaW1pdGVycykge1xuICB2YXIgb3BlbiA9IGRlbGltaXRlcnNbMF0ucmVwbGFjZShyZWdleEVzY2FwZVJFLCAnXFxcXCQmJyk7XG4gIHZhciBjbG9zZSA9IGRlbGltaXRlcnNbMV0ucmVwbGFjZShyZWdleEVzY2FwZVJFLCAnXFxcXCQmJyk7XG4gIHJldHVybiBuZXcgUmVnRXhwKG9wZW4gKyAnKCg/Oi58XFxcXG4pKz8pJyArIGNsb3NlLCAnZycpXG59KTtcblxuXG5cbmZ1bmN0aW9uIHBhcnNlVGV4dCAoXG4gIHRleHQsXG4gIGRlbGltaXRlcnNcbikge1xuICB2YXIgdGFnUkUgPSBkZWxpbWl0ZXJzID8gYnVpbGRSZWdleChkZWxpbWl0ZXJzKSA6IGRlZmF1bHRUYWdSRTtcbiAgaWYgKCF0YWdSRS50ZXN0KHRleHQpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHRva2VucyA9IFtdO1xuICB2YXIgcmF3VG9rZW5zID0gW107XG4gIHZhciBsYXN0SW5kZXggPSB0YWdSRS5sYXN0SW5kZXggPSAwO1xuICB2YXIgbWF0Y2gsIGluZGV4LCB0b2tlblZhbHVlO1xuICB3aGlsZSAoKG1hdGNoID0gdGFnUkUuZXhlYyh0ZXh0KSkpIHtcbiAgICBpbmRleCA9IG1hdGNoLmluZGV4O1xuICAgIC8vIHB1c2ggdGV4dCB0b2tlblxuICAgIGlmIChpbmRleCA+IGxhc3RJbmRleCkge1xuICAgICAgcmF3VG9rZW5zLnB1c2godG9rZW5WYWx1ZSA9IHRleHQuc2xpY2UobGFzdEluZGV4LCBpbmRleCkpO1xuICAgICAgdG9rZW5zLnB1c2goSlNPTi5zdHJpbmdpZnkodG9rZW5WYWx1ZSkpO1xuICAgIH1cbiAgICAvLyB0YWcgdG9rZW5cbiAgICB2YXIgZXhwID0gcGFyc2VGaWx0ZXJzKG1hdGNoWzFdLnRyaW0oKSk7XG4gICAgdG9rZW5zLnB1c2goKFwiX3MoXCIgKyBleHAgKyBcIilcIikpO1xuICAgIHJhd1Rva2Vucy5wdXNoKHsgJ0BiaW5kaW5nJzogZXhwIH0pO1xuICAgIGxhc3RJbmRleCA9IGluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICB9XG4gIGlmIChsYXN0SW5kZXggPCB0ZXh0Lmxlbmd0aCkge1xuICAgIHJhd1Rva2Vucy5wdXNoKHRva2VuVmFsdWUgPSB0ZXh0LnNsaWNlKGxhc3RJbmRleCkpO1xuICAgIHRva2Vucy5wdXNoKEpTT04uc3RyaW5naWZ5KHRva2VuVmFsdWUpKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGV4cHJlc3Npb246IHRva2Vucy5qb2luKCcrJyksXG4gICAgdG9rZW5zOiByYXdUb2tlbnNcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBDcm9zcy1wbGF0Zm9ybSBjb2RlIGdlbmVyYXRpb24gZm9yIGNvbXBvbmVudCB2LW1vZGVsXG4gKi9cbmZ1bmN0aW9uIGdlbkNvbXBvbmVudE1vZGVsIChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICB2YXIgcmVmID0gbW9kaWZpZXJzIHx8IHt9O1xuICB2YXIgbnVtYmVyID0gcmVmLm51bWJlcjtcbiAgdmFyIHRyaW0gPSByZWYudHJpbTtcblxuICB2YXIgYmFzZVZhbHVlRXhwcmVzc2lvbiA9ICckJHYnO1xuICB2YXIgdmFsdWVFeHByZXNzaW9uID0gYmFzZVZhbHVlRXhwcmVzc2lvbjtcbiAgaWYgKHRyaW0pIHtcbiAgICB2YWx1ZUV4cHJlc3Npb24gPVxuICAgICAgXCIodHlwZW9mIFwiICsgYmFzZVZhbHVlRXhwcmVzc2lvbiArIFwiID09PSAnc3RyaW5nJ1wiICtcbiAgICAgIFwiPyBcIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyBcIi50cmltKClcIiArXG4gICAgICBcIjogXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIpXCI7XG4gIH1cbiAgaWYgKG51bWJlcikge1xuICAgIHZhbHVlRXhwcmVzc2lvbiA9IFwiX24oXCIgKyB2YWx1ZUV4cHJlc3Npb24gKyBcIilcIjtcbiAgfVxuICB2YXIgYXNzaWdubWVudCA9IGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCB2YWx1ZUV4cHJlc3Npb24pO1xuXG4gIGVsLm1vZGVsID0ge1xuICAgIHZhbHVlOiAoXCIoXCIgKyB2YWx1ZSArIFwiKVwiKSxcbiAgICBleHByZXNzaW9uOiBKU09OLnN0cmluZ2lmeSh2YWx1ZSksXG4gICAgY2FsbGJhY2s6IChcImZ1bmN0aW9uIChcIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyBcIikge1wiICsgYXNzaWdubWVudCArIFwifVwiKVxuICB9O1xufVxuXG4vKipcbiAqIENyb3NzLXBsYXRmb3JtIGNvZGVnZW4gaGVscGVyIGZvciBnZW5lcmF0aW5nIHYtbW9kZWwgdmFsdWUgYXNzaWdubWVudCBjb2RlLlxuICovXG5mdW5jdGlvbiBnZW5Bc3NpZ25tZW50Q29kZSAoXG4gIHZhbHVlLFxuICBhc3NpZ25tZW50XG4pIHtcbiAgdmFyIHJlcyA9IHBhcnNlTW9kZWwodmFsdWUpO1xuICBpZiAocmVzLmtleSA9PT0gbnVsbCkge1xuICAgIHJldHVybiAodmFsdWUgKyBcIj1cIiArIGFzc2lnbm1lbnQpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcIiRzZXQoXCIgKyAocmVzLmV4cCkgKyBcIiwgXCIgKyAocmVzLmtleSkgKyBcIiwgXCIgKyBhc3NpZ25tZW50ICsgXCIpXCIpXG4gIH1cbn1cblxuLyoqXG4gKiBQYXJzZSBhIHYtbW9kZWwgZXhwcmVzc2lvbiBpbnRvIGEgYmFzZSBwYXRoIGFuZCBhIGZpbmFsIGtleSBzZWdtZW50LlxuICogSGFuZGxlcyBib3RoIGRvdC1wYXRoIGFuZCBwb3NzaWJsZSBzcXVhcmUgYnJhY2tldHMuXG4gKlxuICogUG9zc2libGUgY2FzZXM6XG4gKlxuICogLSB0ZXN0XG4gKiAtIHRlc3Rba2V5XVxuICogLSB0ZXN0W3Rlc3QxW2tleV1dXG4gKiAtIHRlc3RbXCJhXCJdW2tleV1cbiAqIC0geHh4LnRlc3RbYVthXS50ZXN0MVtrZXldXVxuICogLSB0ZXN0Lnh4eC5hW1wiYXNhXCJdW3Rlc3QxW2tleV1dXG4gKlxuICovXG5cbnZhciBsZW4sIHN0ciwgY2hyLCBpbmRleCQxLCBleHByZXNzaW9uUG9zLCBleHByZXNzaW9uRW5kUG9zO1xuXG5cblxuZnVuY3Rpb24gcGFyc2VNb2RlbCAodmFsKSB7XG4gIC8vIEZpeCBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlL3B1bGwvNzczMFxuICAvLyBhbGxvdyB2LW1vZGVsPVwib2JqLnZhbCBcIiAodHJhaWxpbmcgd2hpdGVzcGFjZSlcbiAgdmFsID0gdmFsLnRyaW0oKTtcbiAgbGVuID0gdmFsLmxlbmd0aDtcblxuICBpZiAodmFsLmluZGV4T2YoJ1snKSA8IDAgfHwgdmFsLmxhc3RJbmRleE9mKCddJykgPCBsZW4gLSAxKSB7XG4gICAgaW5kZXgkMSA9IHZhbC5sYXN0SW5kZXhPZignLicpO1xuICAgIGlmIChpbmRleCQxID4gLTEpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGV4cDogdmFsLnNsaWNlKDAsIGluZGV4JDEpLFxuICAgICAgICBrZXk6ICdcIicgKyB2YWwuc2xpY2UoaW5kZXgkMSArIDEpICsgJ1wiJ1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBleHA6IHZhbCxcbiAgICAgICAga2V5OiBudWxsXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RyID0gdmFsO1xuICBpbmRleCQxID0gZXhwcmVzc2lvblBvcyA9IGV4cHJlc3Npb25FbmRQb3MgPSAwO1xuXG4gIHdoaWxlICghZW9mKCkpIHtcbiAgICBjaHIgPSBuZXh0KCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzU3RyaW5nU3RhcnQoY2hyKSkge1xuICAgICAgcGFyc2VTdHJpbmcoY2hyKTtcbiAgICB9IGVsc2UgaWYgKGNociA9PT0gMHg1Qikge1xuICAgICAgcGFyc2VCcmFja2V0KGNocik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHA6IHZhbC5zbGljZSgwLCBleHByZXNzaW9uUG9zKSxcbiAgICBrZXk6IHZhbC5zbGljZShleHByZXNzaW9uUG9zICsgMSwgZXhwcmVzc2lvbkVuZFBvcylcbiAgfVxufVxuXG5mdW5jdGlvbiBuZXh0ICgpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQ29kZUF0KCsraW5kZXgkMSlcbn1cblxuZnVuY3Rpb24gZW9mICgpIHtcbiAgcmV0dXJuIGluZGV4JDEgPj0gbGVuXG59XG5cbmZ1bmN0aW9uIGlzU3RyaW5nU3RhcnQgKGNocikge1xuICByZXR1cm4gY2hyID09PSAweDIyIHx8IGNociA9PT0gMHgyN1xufVxuXG5mdW5jdGlvbiBwYXJzZUJyYWNrZXQgKGNocikge1xuICB2YXIgaW5CcmFja2V0ID0gMTtcbiAgZXhwcmVzc2lvblBvcyA9IGluZGV4JDE7XG4gIHdoaWxlICghZW9mKCkpIHtcbiAgICBjaHIgPSBuZXh0KCk7XG4gICAgaWYgKGlzU3RyaW5nU3RhcnQoY2hyKSkge1xuICAgICAgcGFyc2VTdHJpbmcoY2hyKTtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGlmIChjaHIgPT09IDB4NUIpIHsgaW5CcmFja2V0Kys7IH1cbiAgICBpZiAoY2hyID09PSAweDVEKSB7IGluQnJhY2tldC0tOyB9XG4gICAgaWYgKGluQnJhY2tldCA9PT0gMCkge1xuICAgICAgZXhwcmVzc2lvbkVuZFBvcyA9IGluZGV4JDE7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZVN0cmluZyAoY2hyKSB7XG4gIHZhciBzdHJpbmdRdW90ZSA9IGNocjtcbiAgd2hpbGUgKCFlb2YoKSkge1xuICAgIGNociA9IG5leHQoKTtcbiAgICBpZiAoY2hyID09PSBzdHJpbmdRdW90ZSkge1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cblxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuZnVuY3Rpb24gYmFzZVdhcm4gKG1zZywgcmFuZ2UpIHtcbiAgY29uc29sZS5lcnJvcigoXCJbVnVlIGNvbXBpbGVyXTogXCIgKyBtc2cpKTtcbn1cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuZnVuY3Rpb24gcGx1Y2tNb2R1bGVGdW5jdGlvbiAoXG4gIG1vZHVsZXMsXG4gIGtleVxuKSB7XG4gIHJldHVybiBtb2R1bGVzXG4gICAgPyBtb2R1bGVzLm1hcChmdW5jdGlvbiAobSkgeyByZXR1cm4gbVtrZXldOyB9KS5maWx0ZXIoZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF87IH0pXG4gICAgOiBbXVxufVxuXG5mdW5jdGlvbiBhZGRQcm9wIChlbCwgbmFtZSwgdmFsdWUsIHJhbmdlLCBkeW5hbWljKSB7XG4gIChlbC5wcm9wcyB8fCAoZWwucHJvcHMgPSBbXSkpLnB1c2gocmFuZ2VTZXRJdGVtKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlLCBkeW5hbWljOiBkeW5hbWljIH0sIHJhbmdlKSk7XG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHIgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UsIGR5bmFtaWMpIHtcbiAgdmFyIGF0dHJzID0gZHluYW1pY1xuICAgID8gKGVsLmR5bmFtaWNBdHRycyB8fCAoZWwuZHluYW1pY0F0dHJzID0gW10pKVxuICAgIDogKGVsLmF0dHJzIHx8IChlbC5hdHRycyA9IFtdKSk7XG4gIGF0dHJzLnB1c2gocmFuZ2VTZXRJdGVtKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlLCBkeW5hbWljOiBkeW5hbWljIH0sIHJhbmdlKSk7XG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbi8vIGFkZCBhIHJhdyBhdHRyICh1c2UgdGhpcyBpbiBwcmVUcmFuc2Zvcm1zKVxuZnVuY3Rpb24gYWRkUmF3QXR0ciAoZWwsIG5hbWUsIHZhbHVlLCByYW5nZSkge1xuICBlbC5hdHRyc01hcFtuYW1lXSA9IHZhbHVlO1xuICBlbC5hdHRyc0xpc3QucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUgfSwgcmFuZ2UpKTtcbn1cblxuZnVuY3Rpb24gYWRkRGlyZWN0aXZlIChcbiAgZWwsXG4gIG5hbWUsXG4gIHJhd05hbWUsXG4gIHZhbHVlLFxuICBhcmcsXG4gIGlzRHluYW1pY0FyZyxcbiAgbW9kaWZpZXJzLFxuICByYW5nZVxuKSB7XG4gIChlbC5kaXJlY3RpdmVzIHx8IChlbC5kaXJlY3RpdmVzID0gW10pKS5wdXNoKHJhbmdlU2V0SXRlbSh7XG4gICAgbmFtZTogbmFtZSxcbiAgICByYXdOYW1lOiByYXdOYW1lLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBhcmc6IGFyZyxcbiAgICBpc0R5bmFtaWNBcmc6IGlzRHluYW1pY0FyZyxcbiAgICBtb2RpZmllcnM6IG1vZGlmaWVyc1xuICB9LCByYW5nZSkpO1xuICBlbC5wbGFpbiA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBwcmVwZW5kTW9kaWZpZXJNYXJrZXIgKHN5bWJvbCwgbmFtZSwgZHluYW1pYykge1xuICByZXR1cm4gZHluYW1pY1xuICAgID8gKFwiX3AoXCIgKyBuYW1lICsgXCIsXFxcIlwiICsgc3ltYm9sICsgXCJcXFwiKVwiKVxuICAgIDogc3ltYm9sICsgbmFtZSAvLyBtYXJrIHRoZSBldmVudCBhcyBjYXB0dXJlZFxufVxuXG5mdW5jdGlvbiBhZGRIYW5kbGVyIChcbiAgZWwsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICBtb2RpZmllcnMsXG4gIGltcG9ydGFudCxcbiAgd2FybixcbiAgcmFuZ2UsXG4gIGR5bmFtaWNcbikge1xuICBtb2RpZmllcnMgPSBtb2RpZmllcnMgfHwgZW1wdHlPYmplY3Q7XG4gIC8vIHdhcm4gcHJldmVudCBhbmQgcGFzc2l2ZSBtb2RpZmllclxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybiAmJlxuICAgIG1vZGlmaWVycy5wcmV2ZW50ICYmIG1vZGlmaWVycy5wYXNzaXZlXG4gICkge1xuICAgIHdhcm4oXG4gICAgICAncGFzc2l2ZSBhbmQgcHJldmVudCBjYW5cXCd0IGJlIHVzZWQgdG9nZXRoZXIuICcgK1xuICAgICAgJ1Bhc3NpdmUgaGFuZGxlciBjYW5cXCd0IHByZXZlbnQgZGVmYXVsdCBldmVudC4nLFxuICAgICAgcmFuZ2VcbiAgICApO1xuICB9XG5cbiAgLy8gbm9ybWFsaXplIGNsaWNrLnJpZ2h0IGFuZCBjbGljay5taWRkbGUgc2luY2UgdGhleSBkb24ndCBhY3R1YWxseSBmaXJlXG4gIC8vIHRoaXMgaXMgdGVjaG5pY2FsbHkgYnJvd3Nlci1zcGVjaWZpYywgYnV0IGF0IGxlYXN0IGZvciBub3cgYnJvd3NlcnMgYXJlXG4gIC8vIHRoZSBvbmx5IHRhcmdldCBlbnZzIHRoYXQgaGF2ZSByaWdodC9taWRkbGUgY2xpY2tzLlxuICBpZiAobW9kaWZpZXJzLnJpZ2h0KSB7XG4gICAgaWYgKGR5bmFtaWMpIHtcbiAgICAgIG5hbWUgPSBcIihcIiArIG5hbWUgKyBcIik9PT0nY2xpY2snPydjb250ZXh0bWVudSc6KFwiICsgbmFtZSArIFwiKVwiO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ2NsaWNrJykge1xuICAgICAgbmFtZSA9ICdjb250ZXh0bWVudSc7XG4gICAgICBkZWxldGUgbW9kaWZpZXJzLnJpZ2h0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChtb2RpZmllcnMubWlkZGxlKSB7XG4gICAgaWYgKGR5bmFtaWMpIHtcbiAgICAgIG5hbWUgPSBcIihcIiArIG5hbWUgKyBcIik9PT0nY2xpY2snPydtb3VzZXVwJzooXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAnY2xpY2snKSB7XG4gICAgICBuYW1lID0gJ21vdXNldXAnO1xuICAgIH1cbiAgfVxuXG4gIC8vIGNoZWNrIGNhcHR1cmUgbW9kaWZpZXJcbiAgaWYgKG1vZGlmaWVycy5jYXB0dXJlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5jYXB0dXJlO1xuICAgIG5hbWUgPSBwcmVwZW5kTW9kaWZpZXJNYXJrZXIoJyEnLCBuYW1lLCBkeW5hbWljKTtcbiAgfVxuICBpZiAobW9kaWZpZXJzLm9uY2UpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLm9uY2U7XG4gICAgbmFtZSA9IHByZXBlbmRNb2RpZmllck1hcmtlcignficsIG5hbWUsIGR5bmFtaWMpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAobW9kaWZpZXJzLnBhc3NpdmUpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLnBhc3NpdmU7XG4gICAgbmFtZSA9IHByZXBlbmRNb2RpZmllck1hcmtlcignJicsIG5hbWUsIGR5bmFtaWMpO1xuICB9XG5cbiAgdmFyIGV2ZW50cztcbiAgaWYgKG1vZGlmaWVycy5uYXRpdmUpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLm5hdGl2ZTtcbiAgICBldmVudHMgPSBlbC5uYXRpdmVFdmVudHMgfHwgKGVsLm5hdGl2ZUV2ZW50cyA9IHt9KTtcbiAgfSBlbHNlIHtcbiAgICBldmVudHMgPSBlbC5ldmVudHMgfHwgKGVsLmV2ZW50cyA9IHt9KTtcbiAgfVxuXG4gIHZhciBuZXdIYW5kbGVyID0gcmFuZ2VTZXRJdGVtKHsgdmFsdWU6IHZhbHVlLnRyaW0oKSwgZHluYW1pYzogZHluYW1pYyB9LCByYW5nZSk7XG4gIGlmIChtb2RpZmllcnMgIT09IGVtcHR5T2JqZWN0KSB7XG4gICAgbmV3SGFuZGxlci5tb2RpZmllcnMgPSBtb2RpZmllcnM7XG4gIH1cblxuICB2YXIgaGFuZGxlcnMgPSBldmVudHNbbmFtZV07XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVycykpIHtcbiAgICBpbXBvcnRhbnQgPyBoYW5kbGVycy51bnNoaWZ0KG5ld0hhbmRsZXIpIDogaGFuZGxlcnMucHVzaChuZXdIYW5kbGVyKTtcbiAgfSBlbHNlIGlmIChoYW5kbGVycykge1xuICAgIGV2ZW50c1tuYW1lXSA9IGltcG9ydGFudCA/IFtuZXdIYW5kbGVyLCBoYW5kbGVyc10gOiBbaGFuZGxlcnMsIG5ld0hhbmRsZXJdO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50c1tuYW1lXSA9IG5ld0hhbmRsZXI7XG4gIH1cblxuICBlbC5wbGFpbiA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRSYXdCaW5kaW5nQXR0ciAoXG4gIGVsLFxuICBuYW1lXG4pIHtcbiAgcmV0dXJuIGVsLnJhd0F0dHJzTWFwWyc6JyArIG5hbWVdIHx8XG4gICAgZWwucmF3QXR0cnNNYXBbJ3YtYmluZDonICsgbmFtZV0gfHxcbiAgICBlbC5yYXdBdHRyc01hcFtuYW1lXVxufVxuXG5mdW5jdGlvbiBnZXRCaW5kaW5nQXR0ciAoXG4gIGVsLFxuICBuYW1lLFxuICBnZXRTdGF0aWNcbikge1xuICB2YXIgZHluYW1pY1ZhbHVlID1cbiAgICBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnOicgKyBuYW1lKSB8fFxuICAgIGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWJpbmQ6JyArIG5hbWUpO1xuICBpZiAoZHluYW1pY1ZhbHVlICE9IG51bGwpIHtcbiAgICByZXR1cm4gcGFyc2VGaWx0ZXJzKGR5bmFtaWNWYWx1ZSlcbiAgfSBlbHNlIGlmIChnZXRTdGF0aWMgIT09IGZhbHNlKSB7XG4gICAgdmFyIHN0YXRpY1ZhbHVlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgbmFtZSk7XG4gICAgaWYgKHN0YXRpY1ZhbHVlICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdGF0aWNWYWx1ZSlcbiAgICB9XG4gIH1cbn1cblxuLy8gbm90ZTogdGhpcyBvbmx5IHJlbW92ZXMgdGhlIGF0dHIgZnJvbSB0aGUgQXJyYXkgKGF0dHJzTGlzdCkgc28gdGhhdCBpdFxuLy8gZG9lc24ndCBnZXQgcHJvY2Vzc2VkIGJ5IHByb2Nlc3NBdHRycy5cbi8vIEJ5IGRlZmF1bHQgaXQgZG9lcyBOT1QgcmVtb3ZlIGl0IGZyb20gdGhlIG1hcCAoYXR0cnNNYXApIGJlY2F1c2UgdGhlIG1hcCBpc1xuLy8gbmVlZGVkIGR1cmluZyBjb2RlZ2VuLlxuZnVuY3Rpb24gZ2V0QW5kUmVtb3ZlQXR0ciAoXG4gIGVsLFxuICBuYW1lLFxuICByZW1vdmVGcm9tTWFwXG4pIHtcbiAgdmFyIHZhbDtcbiAgaWYgKCh2YWwgPSBlbC5hdHRyc01hcFtuYW1lXSkgIT0gbnVsbCkge1xuICAgIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChsaXN0W2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgbGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChyZW1vdmVGcm9tTWFwKSB7XG4gICAgZGVsZXRlIGVsLmF0dHJzTWFwW25hbWVdO1xuICB9XG4gIHJldHVybiB2YWxcbn1cblxuZnVuY3Rpb24gZ2V0QW5kUmVtb3ZlQXR0ckJ5UmVnZXggKFxuICBlbCxcbiAgbmFtZVxuKSB7XG4gIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGF0dHIgPSBsaXN0W2ldO1xuICAgIGlmIChuYW1lLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgbGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgICByZXR1cm4gYXR0clxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByYW5nZVNldEl0ZW0gKFxuICBpdGVtLFxuICByYW5nZVxuKSB7XG4gIGlmIChyYW5nZSkge1xuICAgIGlmIChyYW5nZS5zdGFydCAhPSBudWxsKSB7XG4gICAgICBpdGVtLnN0YXJ0ID0gcmFuZ2Uuc3RhcnQ7XG4gICAgfVxuICAgIGlmIChyYW5nZS5lbmQgIT0gbnVsbCkge1xuICAgICAgaXRlbS5lbmQgPSByYW5nZS5lbmQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBpdGVtXG59XG5cbi8qICAqL1xuXG52YXIgb25SRSA9IC9eQHxedi1vbjovO1xudmFyIGRpclJFID0gL152LXxeQHxeOi87XG52YXIgZm9yQWxpYXNSRSA9IC8oW1xcc1xcU10qPylcXHMrKD86aW58b2YpXFxzKyhbXFxzXFxTXSopLztcbnZhciBmb3JJdGVyYXRvclJFID0gLywoW14sXFx9XFxdXSopKD86LChbXixcXH1cXF1dKikpPyQvO1xudmFyIHN0cmlwUGFyZW5zUkUgPSAvXlxcKHxcXCkkL2c7XG52YXIgZHluYW1pY0FyZ1JFID0gL15cXFsuKlxcXSQvO1xuXG52YXIgYXJnUkUgPSAvOiguKikkLztcbnZhciBiaW5kUkUgPSAvXjp8XlxcLnxedi1iaW5kOi87XG52YXIgbW9kaWZpZXJSRSA9IC9cXC5bXi5cXF1dKyg/PVteXFxdXSokKS9nO1xuXG52YXIgc2xvdFJFID0gL152LXNsb3QoOnwkKXxeIy87XG5cbnZhciBsaW5lQnJlYWtSRSA9IC9bXFxyXFxuXS87XG52YXIgd2hpdGVzcGFjZVJFJDEgPSAvXFxzKy9nO1xuXG52YXIgaW52YWxpZEF0dHJpYnV0ZVJFID0gL1tcXHNcIic8PlxcLz1dLztcblxudmFyIGRlY29kZUhUTUxDYWNoZWQgPSBjYWNoZWQoaGUuZGVjb2RlKTtcblxudmFyIGVtcHR5U2xvdFNjb3BlVG9rZW4gPSBcIl9lbXB0eV9cIjtcblxuLy8gY29uZmlndXJhYmxlIHN0YXRlXG52YXIgd2FybiQxO1xudmFyIGRlbGltaXRlcnM7XG52YXIgdHJhbnNmb3JtcztcbnZhciBwcmVUcmFuc2Zvcm1zO1xudmFyIHBvc3RUcmFuc2Zvcm1zO1xudmFyIHBsYXRmb3JtSXNQcmVUYWc7XG52YXIgcGxhdGZvcm1NdXN0VXNlUHJvcDtcbnZhciBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZTtcbnZhciBtYXliZUNvbXBvbmVudDtcblxuZnVuY3Rpb24gY3JlYXRlQVNURWxlbWVudCAoXG4gIHRhZyxcbiAgYXR0cnMsXG4gIHBhcmVudFxuKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogMSxcbiAgICB0YWc6IHRhZyxcbiAgICBhdHRyc0xpc3Q6IGF0dHJzLFxuICAgIGF0dHJzTWFwOiBtYWtlQXR0cnNNYXAoYXR0cnMpLFxuICAgIHJhd0F0dHJzTWFwOiB7fSxcbiAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICBjaGlsZHJlbjogW11cbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnQgSFRNTCBzdHJpbmcgdG8gQVNULlxuICovXG5mdW5jdGlvbiBwYXJzZSAoXG4gIHRlbXBsYXRlLFxuICBvcHRpb25zXG4pIHtcbiAgd2FybiQxID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuXG4gIHBsYXRmb3JtSXNQcmVUYWcgPSBvcHRpb25zLmlzUHJlVGFnIHx8IG5vO1xuICBwbGF0Zm9ybU11c3RVc2VQcm9wID0gb3B0aW9ucy5tdXN0VXNlUHJvcCB8fCBubztcbiAgcGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UgPSBvcHRpb25zLmdldFRhZ05hbWVzcGFjZSB8fCBubztcbiAgdmFyIGlzUmVzZXJ2ZWRUYWcgPSBvcHRpb25zLmlzUmVzZXJ2ZWRUYWcgfHwgbm87XG4gIG1heWJlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiAhIWVsLmNvbXBvbmVudCB8fCAhaXNSZXNlcnZlZFRhZyhlbC50YWcpOyB9O1xuXG4gIHRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3RyYW5zZm9ybU5vZGUnKTtcbiAgcHJlVHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAncHJlVHJhbnNmb3JtTm9kZScpO1xuICBwb3N0VHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAncG9zdFRyYW5zZm9ybU5vZGUnKTtcblxuICBkZWxpbWl0ZXJzID0gb3B0aW9ucy5kZWxpbWl0ZXJzO1xuXG4gIHZhciBzdGFjayA9IFtdO1xuICB2YXIgcHJlc2VydmVXaGl0ZXNwYWNlID0gb3B0aW9ucy5wcmVzZXJ2ZVdoaXRlc3BhY2UgIT09IGZhbHNlO1xuICB2YXIgd2hpdGVzcGFjZU9wdGlvbiA9IG9wdGlvbnMud2hpdGVzcGFjZTtcbiAgdmFyIHJvb3Q7XG4gIHZhciBjdXJyZW50UGFyZW50O1xuICB2YXIgaW5WUHJlID0gZmFsc2U7XG4gIHZhciBpblByZSA9IGZhbHNlO1xuICB2YXIgd2FybmVkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gd2Fybk9uY2UgKG1zZywgcmFuZ2UpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgIHdhcm4kMShtc2csIHJhbmdlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZUVsZW1lbnQgKGVsZW1lbnQpIHtcbiAgICB0cmltRW5kaW5nV2hpdGVzcGFjZShlbGVtZW50KTtcbiAgICBpZiAoIWluVlByZSAmJiAhZWxlbWVudC5wcm9jZXNzZWQpIHtcbiAgICAgIGVsZW1lbnQgPSBwcm9jZXNzRWxlbWVudChlbGVtZW50LCBvcHRpb25zKTtcbiAgICB9XG4gICAgLy8gdHJlZSBtYW5hZ2VtZW50XG4gICAgaWYgKCFzdGFjay5sZW5ndGggJiYgZWxlbWVudCAhPT0gcm9vdCkge1xuICAgICAgLy8gYWxsb3cgcm9vdCBlbGVtZW50cyB3aXRoIHYtaWYsIHYtZWxzZS1pZiBhbmQgdi1lbHNlXG4gICAgICBpZiAocm9vdC5pZiAmJiAoZWxlbWVudC5lbHNlaWYgfHwgZWxlbWVudC5lbHNlKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrUm9vdENvbnN0cmFpbnRzKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGFkZElmQ29uZGl0aW9uKHJvb3QsIHtcbiAgICAgICAgICBleHA6IGVsZW1lbnQuZWxzZWlmLFxuICAgICAgICAgIGJsb2NrOiBlbGVtZW50XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm5PbmNlKFxuICAgICAgICAgIFwiQ29tcG9uZW50IHRlbXBsYXRlIHNob3VsZCBjb250YWluIGV4YWN0bHkgb25lIHJvb3QgZWxlbWVudC4gXCIgK1xuICAgICAgICAgIFwiSWYgeW91IGFyZSB1c2luZyB2LWlmIG9uIG11bHRpcGxlIGVsZW1lbnRzLCBcIiArXG4gICAgICAgICAgXCJ1c2Ugdi1lbHNlLWlmIHRvIGNoYWluIHRoZW0gaW5zdGVhZC5cIixcbiAgICAgICAgICB7IHN0YXJ0OiBlbGVtZW50LnN0YXJ0IH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGN1cnJlbnRQYXJlbnQgJiYgIWVsZW1lbnQuZm9yYmlkZGVuKSB7XG4gICAgICBpZiAoZWxlbWVudC5lbHNlaWYgfHwgZWxlbWVudC5lbHNlKSB7XG4gICAgICAgIHByb2Nlc3NJZkNvbmRpdGlvbnMoZWxlbWVudCwgY3VycmVudFBhcmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZWxlbWVudC5zbG90U2NvcGUpIHtcbiAgICAgICAgICAvLyBzY29wZWQgc2xvdFxuICAgICAgICAgIC8vIGtlZXAgaXQgaW4gdGhlIGNoaWxkcmVuIGxpc3Qgc28gdGhhdCB2LWVsc2UoLWlmKSBjb25kaXRpb25zIGNhblxuICAgICAgICAgIC8vIGZpbmQgaXQgYXMgdGhlIHByZXYgbm9kZS5cbiAgICAgICAgICB2YXIgbmFtZSA9IGVsZW1lbnQuc2xvdFRhcmdldCB8fCAnXCJkZWZhdWx0XCInXG4gICAgICAgICAgOyhjdXJyZW50UGFyZW50LnNjb3BlZFNsb3RzIHx8IChjdXJyZW50UGFyZW50LnNjb3BlZFNsb3RzID0ge30pKVtuYW1lXSA9IGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudFBhcmVudC5jaGlsZHJlbi5wdXNoKGVsZW1lbnQpO1xuICAgICAgICBlbGVtZW50LnBhcmVudCA9IGN1cnJlbnRQYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZmluYWwgY2hpbGRyZW4gY2xlYW51cFxuICAgIC8vIGZpbHRlciBvdXQgc2NvcGVkIHNsb3RzXG4gICAgZWxlbWVudC5jaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiAhKGMpLnNsb3RTY29wZTsgfSk7XG4gICAgLy8gcmVtb3ZlIHRyYWlsaW5nIHdoaXRlc3BhY2Ugbm9kZSBhZ2FpblxuICAgIHRyaW1FbmRpbmdXaGl0ZXNwYWNlKGVsZW1lbnQpO1xuXG4gICAgLy8gY2hlY2sgcHJlIHN0YXRlXG4gICAgaWYgKGVsZW1lbnQucHJlKSB7XG4gICAgICBpblZQcmUgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHBsYXRmb3JtSXNQcmVUYWcoZWxlbWVudC50YWcpKSB7XG4gICAgICBpblByZSA9IGZhbHNlO1xuICAgIH1cbiAgICAvLyBhcHBseSBwb3N0LXRyYW5zZm9ybXNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvc3RUcmFuc2Zvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwb3N0VHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0cmltRW5kaW5nV2hpdGVzcGFjZSAoZWwpIHtcbiAgICAvLyByZW1vdmUgdHJhaWxpbmcgd2hpdGVzcGFjZSBub2RlXG4gICAgaWYgKCFpblByZSkge1xuICAgICAgdmFyIGxhc3ROb2RlO1xuICAgICAgd2hpbGUgKFxuICAgICAgICAobGFzdE5vZGUgPSBlbC5jaGlsZHJlbltlbC5jaGlsZHJlbi5sZW5ndGggLSAxXSkgJiZcbiAgICAgICAgbGFzdE5vZGUudHlwZSA9PT0gMyAmJlxuICAgICAgICBsYXN0Tm9kZS50ZXh0ID09PSAnICdcbiAgICAgICkge1xuICAgICAgICBlbC5jaGlsZHJlbi5wb3AoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja1Jvb3RDb25zdHJhaW50cyAoZWwpIHtcbiAgICBpZiAoZWwudGFnID09PSAnc2xvdCcgfHwgZWwudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICB3YXJuT25jZShcbiAgICAgICAgXCJDYW5ub3QgdXNlIDxcIiArIChlbC50YWcpICsgXCI+IGFzIGNvbXBvbmVudCByb290IGVsZW1lbnQgYmVjYXVzZSBpdCBtYXkgXCIgK1xuICAgICAgICAnY29udGFpbiBtdWx0aXBsZSBub2Rlcy4nLFxuICAgICAgICB7IHN0YXJ0OiBlbC5zdGFydCB9XG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZWwuYXR0cnNNYXAuaGFzT3duUHJvcGVydHkoJ3YtZm9yJykpIHtcbiAgICAgIHdhcm5PbmNlKFxuICAgICAgICAnQ2Fubm90IHVzZSB2LWZvciBvbiBzdGF0ZWZ1bCBjb21wb25lbnQgcm9vdCBlbGVtZW50IGJlY2F1c2UgJyArXG4gICAgICAgICdpdCByZW5kZXJzIG11bHRpcGxlIGVsZW1lbnRzLicsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LWZvciddXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHBhcnNlSFRNTCh0ZW1wbGF0ZSwge1xuICAgIHdhcm46IHdhcm4kMSxcbiAgICBleHBlY3RIVE1MOiBvcHRpb25zLmV4cGVjdEhUTUwsXG4gICAgaXNVbmFyeVRhZzogb3B0aW9ucy5pc1VuYXJ5VGFnLFxuICAgIGNhbkJlTGVmdE9wZW5UYWc6IG9wdGlvbnMuY2FuQmVMZWZ0T3BlblRhZyxcbiAgICBzaG91bGREZWNvZGVOZXdsaW5lczogb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lcyxcbiAgICBzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWY6IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmLFxuICAgIHNob3VsZEtlZXBDb21tZW50OiBvcHRpb25zLmNvbW1lbnRzLFxuICAgIG91dHB1dFNvdXJjZVJhbmdlOiBvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlLFxuICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydCAodGFnLCBhdHRycywgdW5hcnksIHN0YXJ0JDEsIGVuZCkge1xuICAgICAgLy8gY2hlY2sgbmFtZXNwYWNlLlxuICAgICAgLy8gaW5oZXJpdCBwYXJlbnQgbnMgaWYgdGhlcmUgaXMgb25lXG4gICAgICB2YXIgbnMgPSAoY3VycmVudFBhcmVudCAmJiBjdXJyZW50UGFyZW50Lm5zKSB8fCBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSh0YWcpO1xuXG4gICAgICAvLyBoYW5kbGUgSUUgc3ZnIGJ1Z1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNJRSAmJiBucyA9PT0gJ3N2ZycpIHtcbiAgICAgICAgYXR0cnMgPSBndWFyZElFU1ZHQnVnKGF0dHJzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsZW1lbnQgPSBjcmVhdGVBU1RFbGVtZW50KHRhZywgYXR0cnMsIGN1cnJlbnRQYXJlbnQpO1xuICAgICAgaWYgKG5zKSB7XG4gICAgICAgIGVsZW1lbnQubnMgPSBucztcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBlbGVtZW50LnN0YXJ0ID0gc3RhcnQkMTtcbiAgICAgICAgICBlbGVtZW50LmVuZCA9IGVuZDtcbiAgICAgICAgICBlbGVtZW50LnJhd0F0dHJzTWFwID0gZWxlbWVudC5hdHRyc0xpc3QucmVkdWNlKGZ1bmN0aW9uIChjdW11bGF0ZWQsIGF0dHIpIHtcbiAgICAgICAgICAgIGN1bXVsYXRlZFthdHRyLm5hbWVdID0gYXR0cjtcbiAgICAgICAgICAgIHJldHVybiBjdW11bGF0ZWRcbiAgICAgICAgICB9LCB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgYXR0cnMuZm9yRWFjaChmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICAgIGlmIChpbnZhbGlkQXR0cmlidXRlUkUudGVzdChhdHRyLm5hbWUpKSB7XG4gICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgIFwiSW52YWxpZCBkeW5hbWljIGFyZ3VtZW50IGV4cHJlc3Npb246IGF0dHJpYnV0ZSBuYW1lcyBjYW5ub3QgY29udGFpbiBcIiArXG4gICAgICAgICAgICAgIFwic3BhY2VzLCBxdW90ZXMsIDwsID4sIC8gb3IgPS5cIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBhdHRyLnN0YXJ0ICsgYXR0ci5uYW1lLmluZGV4T2YoXCJbXCIpLFxuICAgICAgICAgICAgICAgIGVuZDogYXR0ci5zdGFydCArIGF0dHIubmFtZS5sZW5ndGhcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNGb3JiaWRkZW5UYWcoZWxlbWVudCkgJiYgIWlzU2VydmVyUmVuZGVyaW5nKCkpIHtcbiAgICAgICAgZWxlbWVudC5mb3JiaWRkZW4gPSB0cnVlO1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4kMShcbiAgICAgICAgICAnVGVtcGxhdGVzIHNob3VsZCBvbmx5IGJlIHJlc3BvbnNpYmxlIGZvciBtYXBwaW5nIHRoZSBzdGF0ZSB0byB0aGUgJyArXG4gICAgICAgICAgJ1VJLiBBdm9pZCBwbGFjaW5nIHRhZ3Mgd2l0aCBzaWRlLWVmZmVjdHMgaW4geW91ciB0ZW1wbGF0ZXMsIHN1Y2ggYXMgJyArXG4gICAgICAgICAgXCI8XCIgKyB0YWcgKyBcIj5cIiArICcsIGFzIHRoZXkgd2lsbCBub3QgYmUgcGFyc2VkLicsXG4gICAgICAgICAgeyBzdGFydDogZWxlbWVudC5zdGFydCB9XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIGFwcGx5IHByZS10cmFuc2Zvcm1zXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByZVRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZWxlbWVudCA9IHByZVRyYW5zZm9ybXNbaV0oZWxlbWVudCwgb3B0aW9ucykgfHwgZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpblZQcmUpIHtcbiAgICAgICAgcHJvY2Vzc1ByZShlbGVtZW50KTtcbiAgICAgICAgaWYgKGVsZW1lbnQucHJlKSB7XG4gICAgICAgICAgaW5WUHJlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBsYXRmb3JtSXNQcmVUYWcoZWxlbWVudC50YWcpKSB7XG4gICAgICAgIGluUHJlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpblZQcmUpIHtcbiAgICAgICAgcHJvY2Vzc1Jhd0F0dHJzKGVsZW1lbnQpO1xuICAgICAgfSBlbHNlIGlmICghZWxlbWVudC5wcm9jZXNzZWQpIHtcbiAgICAgICAgLy8gc3RydWN0dXJhbCBkaXJlY3RpdmVzXG4gICAgICAgIHByb2Nlc3NGb3IoZWxlbWVudCk7XG4gICAgICAgIHByb2Nlc3NJZihlbGVtZW50KTtcbiAgICAgICAgcHJvY2Vzc09uY2UoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghcm9vdCkge1xuICAgICAgICByb290ID0gZWxlbWVudDtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjaGVja1Jvb3RDb25zdHJhaW50cyhyb290KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXVuYXJ5KSB7XG4gICAgICAgIGN1cnJlbnRQYXJlbnQgPSBlbGVtZW50O1xuICAgICAgICBzdGFjay5wdXNoKGVsZW1lbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xvc2VFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBlbmQ6IGZ1bmN0aW9uIGVuZCAodGFnLCBzdGFydCwgZW5kJDEpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAvLyBwb3Agc3RhY2tcbiAgICAgIHN0YWNrLmxlbmd0aCAtPSAxO1xuICAgICAgY3VycmVudFBhcmVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgb3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICBlbGVtZW50LmVuZCA9IGVuZCQxO1xuICAgICAgfVxuICAgICAgY2xvc2VFbGVtZW50KGVsZW1lbnQpO1xuICAgIH0sXG5cbiAgICBjaGFyczogZnVuY3Rpb24gY2hhcnMgKHRleHQsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIGlmICghY3VycmVudFBhcmVudCkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0ZXh0ID09PSB0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgICAgICdDb21wb25lbnQgdGVtcGxhdGUgcmVxdWlyZXMgYSByb290IGVsZW1lbnQsIHJhdGhlciB0aGFuIGp1c3QgdGV4dC4nLFxuICAgICAgICAgICAgICB7IHN0YXJ0OiBzdGFydCB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSBpZiAoKHRleHQgPSB0ZXh0LnRyaW0oKSkpIHtcbiAgICAgICAgICAgIHdhcm5PbmNlKFxuICAgICAgICAgICAgICAoXCJ0ZXh0IFxcXCJcIiArIHRleHQgKyBcIlxcXCIgb3V0c2lkZSByb290IGVsZW1lbnQgd2lsbCBiZSBpZ25vcmVkLlwiKSxcbiAgICAgICAgICAgICAgeyBzdGFydDogc3RhcnQgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvLyBJRSB0ZXh0YXJlYSBwbGFjZWhvbGRlciBidWdcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGlzSUUgJiZcbiAgICAgICAgY3VycmVudFBhcmVudC50YWcgPT09ICd0ZXh0YXJlYScgJiZcbiAgICAgICAgY3VycmVudFBhcmVudC5hdHRyc01hcC5wbGFjZWhvbGRlciA9PT0gdGV4dFxuICAgICAgKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdmFyIGNoaWxkcmVuID0gY3VycmVudFBhcmVudC5jaGlsZHJlbjtcbiAgICAgIGlmIChpblByZSB8fCB0ZXh0LnRyaW0oKSkge1xuICAgICAgICB0ZXh0ID0gaXNUZXh0VGFnKGN1cnJlbnRQYXJlbnQpID8gdGV4dCA6IGRlY29kZUhUTUxDYWNoZWQodGV4dCk7XG4gICAgICB9IGVsc2UgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgLy8gcmVtb3ZlIHRoZSB3aGl0ZXNwYWNlLW9ubHkgbm9kZSByaWdodCBhZnRlciBhbiBvcGVuaW5nIHRhZ1xuICAgICAgICB0ZXh0ID0gJyc7XG4gICAgICB9IGVsc2UgaWYgKHdoaXRlc3BhY2VPcHRpb24pIHtcbiAgICAgICAgaWYgKHdoaXRlc3BhY2VPcHRpb24gPT09ICdjb25kZW5zZScpIHtcbiAgICAgICAgICAvLyBpbiBjb25kZW5zZSBtb2RlLCByZW1vdmUgdGhlIHdoaXRlc3BhY2Ugbm9kZSBpZiBpdCBjb250YWluc1xuICAgICAgICAgIC8vIGxpbmUgYnJlYWssIG90aGVyd2lzZSBjb25kZW5zZSB0byBhIHNpbmdsZSBzcGFjZVxuICAgICAgICAgIHRleHQgPSBsaW5lQnJlYWtSRS50ZXN0KHRleHQpID8gJycgOiAnICc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dCA9ICcgJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dCA9IHByZXNlcnZlV2hpdGVzcGFjZSA/ICcgJyA6ICcnO1xuICAgICAgfVxuICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgaWYgKCFpblByZSAmJiB3aGl0ZXNwYWNlT3B0aW9uID09PSAnY29uZGVuc2UnKSB7XG4gICAgICAgICAgLy8gY29uZGVuc2UgY29uc2VjdXRpdmUgd2hpdGVzcGFjZXMgaW50byBzaW5nbGUgc3BhY2VcbiAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHdoaXRlc3BhY2VSRSQxLCAnICcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIHZhciBjaGlsZDtcbiAgICAgICAgaWYgKCFpblZQcmUgJiYgdGV4dCAhPT0gJyAnICYmIChyZXMgPSBwYXJzZVRleHQodGV4dCwgZGVsaW1pdGVycykpKSB7XG4gICAgICAgICAgY2hpbGQgPSB7XG4gICAgICAgICAgICB0eXBlOiAyLFxuICAgICAgICAgICAgZXhwcmVzc2lvbjogcmVzLmV4cHJlc3Npb24sXG4gICAgICAgICAgICB0b2tlbnM6IHJlcy50b2tlbnMsXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICh0ZXh0ICE9PSAnICcgfHwgIWNoaWxkcmVuLmxlbmd0aCB8fCBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS50ZXh0ICE9PSAnICcpIHtcbiAgICAgICAgICBjaGlsZCA9IHtcbiAgICAgICAgICAgIHR5cGU6IDMsXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgICBjaGlsZC5zdGFydCA9IHN0YXJ0O1xuICAgICAgICAgICAgY2hpbGQuZW5kID0gZW5kO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY29tbWVudDogZnVuY3Rpb24gY29tbWVudCAodGV4dCwgc3RhcnQsIGVuZCkge1xuICAgICAgLy8gYWRkaW5nIGFueXRpbmcgYXMgYSBzaWJsaW5nIHRvIHRoZSByb290IG5vZGUgaXMgZm9yYmlkZGVuXG4gICAgICAvLyBjb21tZW50cyBzaG91bGQgc3RpbGwgYmUgYWxsb3dlZCwgYnV0IGlnbm9yZWRcbiAgICAgIGlmIChjdXJyZW50UGFyZW50KSB7XG4gICAgICAgIHZhciBjaGlsZCA9IHtcbiAgICAgICAgICB0eXBlOiAzLFxuICAgICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgICAgaXNDb21tZW50OiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBjaGlsZC5zdGFydCA9IHN0YXJ0O1xuICAgICAgICAgIGNoaWxkLmVuZCA9IGVuZDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50UGFyZW50LmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiByb290XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NQcmUgKGVsKSB7XG4gIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1wcmUnKSAhPSBudWxsKSB7XG4gICAgZWwucHJlID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzUmF3QXR0cnMgKGVsKSB7XG4gIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICB2YXIgbGVuID0gbGlzdC5sZW5ndGg7XG4gIGlmIChsZW4pIHtcbiAgICB2YXIgYXR0cnMgPSBlbC5hdHRycyA9IG5ldyBBcnJheShsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGF0dHJzW2ldID0ge1xuICAgICAgICBuYW1lOiBsaXN0W2ldLm5hbWUsXG4gICAgICAgIHZhbHVlOiBKU09OLnN0cmluZ2lmeShsaXN0W2ldLnZhbHVlKVxuICAgICAgfTtcbiAgICAgIGlmIChsaXN0W2ldLnN0YXJ0ICE9IG51bGwpIHtcbiAgICAgICAgYXR0cnNbaV0uc3RhcnQgPSBsaXN0W2ldLnN0YXJ0O1xuICAgICAgICBhdHRyc1tpXS5lbmQgPSBsaXN0W2ldLmVuZDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoIWVsLnByZSkge1xuICAgIC8vIG5vbiByb290IG5vZGUgaW4gcHJlIGJsb2NrcyB3aXRoIG5vIGF0dHJpYnV0ZXNcbiAgICBlbC5wbGFpbiA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0VsZW1lbnQgKFxuICBlbGVtZW50LFxuICBvcHRpb25zXG4pIHtcbiAgcHJvY2Vzc0tleShlbGVtZW50KTtcblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciB0aGlzIGlzIGEgcGxhaW4gZWxlbWVudCBhZnRlclxuICAvLyByZW1vdmluZyBzdHJ1Y3R1cmFsIGF0dHJpYnV0ZXNcbiAgZWxlbWVudC5wbGFpbiA9IChcbiAgICAhZWxlbWVudC5rZXkgJiZcbiAgICAhZWxlbWVudC5zY29wZWRTbG90cyAmJlxuICAgICFlbGVtZW50LmF0dHJzTGlzdC5sZW5ndGhcbiAgKTtcblxuICBwcm9jZXNzUmVmKGVsZW1lbnQpO1xuICBwcm9jZXNzU2xvdENvbnRlbnQoZWxlbWVudCk7XG4gIHByb2Nlc3NTbG90T3V0bGV0KGVsZW1lbnQpO1xuICBwcm9jZXNzQ29tcG9uZW50KGVsZW1lbnQpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICBlbGVtZW50ID0gdHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKSB8fCBlbGVtZW50O1xuICB9XG4gIHByb2Nlc3NBdHRycyhlbGVtZW50KTtcbiAgcmV0dXJuIGVsZW1lbnRcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0tleSAoZWwpIHtcbiAgdmFyIGV4cCA9IGdldEJpbmRpbmdBdHRyKGVsLCAna2V5Jyk7XG4gIGlmIChleHApIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgXCI8dGVtcGxhdGU+IGNhbm5vdCBiZSBrZXllZC4gUGxhY2UgdGhlIGtleSBvbiByZWFsIGVsZW1lbnRzIGluc3RlYWQuXCIsXG4gICAgICAgICAgZ2V0UmF3QmluZGluZ0F0dHIoZWwsICdrZXknKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGVsLmZvcikge1xuICAgICAgICB2YXIgaXRlcmF0b3IgPSBlbC5pdGVyYXRvcjIgfHwgZWwuaXRlcmF0b3IxO1xuICAgICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50O1xuICAgICAgICBpZiAoaXRlcmF0b3IgJiYgaXRlcmF0b3IgPT09IGV4cCAmJiBwYXJlbnQgJiYgcGFyZW50LnRhZyA9PT0gJ3RyYW5zaXRpb24tZ3JvdXAnKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgXCJEbyBub3QgdXNlIHYtZm9yIGluZGV4IGFzIGtleSBvbiA8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4sIFwiICtcbiAgICAgICAgICAgIFwidGhpcyBpcyB0aGUgc2FtZSBhcyBub3QgdXNpbmcga2V5cy5cIixcbiAgICAgICAgICAgIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAna2V5JyksXG4gICAgICAgICAgICB0cnVlIC8qIHRpcCAqL1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZWwua2V5ID0gZXhwO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSZWYgKGVsKSB7XG4gIHZhciByZWYgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3JlZicpO1xuICBpZiAocmVmKSB7XG4gICAgZWwucmVmID0gcmVmO1xuICAgIGVsLnJlZkluRm9yID0gY2hlY2tJbkZvcihlbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0ZvciAoZWwpIHtcbiAgdmFyIGV4cDtcbiAgaWYgKChleHAgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1mb3InKSkpIHtcbiAgICB2YXIgcmVzID0gcGFyc2VGb3IoZXhwKTtcbiAgICBpZiAocmVzKSB7XG4gICAgICBleHRlbmQoZWwsIHJlcyk7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIChcIkludmFsaWQgdi1mb3IgZXhwcmVzc2lvbjogXCIgKyBleHApLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1mb3InXVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuXG5cbmZ1bmN0aW9uIHBhcnNlRm9yIChleHApIHtcbiAgdmFyIGluTWF0Y2ggPSBleHAubWF0Y2goZm9yQWxpYXNSRSk7XG4gIGlmICghaW5NYXRjaCkgeyByZXR1cm4gfVxuICB2YXIgcmVzID0ge307XG4gIHJlcy5mb3IgPSBpbk1hdGNoWzJdLnRyaW0oKTtcbiAgdmFyIGFsaWFzID0gaW5NYXRjaFsxXS50cmltKCkucmVwbGFjZShzdHJpcFBhcmVuc1JFLCAnJyk7XG4gIHZhciBpdGVyYXRvck1hdGNoID0gYWxpYXMubWF0Y2goZm9ySXRlcmF0b3JSRSk7XG4gIGlmIChpdGVyYXRvck1hdGNoKSB7XG4gICAgcmVzLmFsaWFzID0gYWxpYXMucmVwbGFjZShmb3JJdGVyYXRvclJFLCAnJykudHJpbSgpO1xuICAgIHJlcy5pdGVyYXRvcjEgPSBpdGVyYXRvck1hdGNoWzFdLnRyaW0oKTtcbiAgICBpZiAoaXRlcmF0b3JNYXRjaFsyXSkge1xuICAgICAgcmVzLml0ZXJhdG9yMiA9IGl0ZXJhdG9yTWF0Y2hbMl0udHJpbSgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXMuYWxpYXMgPSBhbGlhcztcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NJZiAoZWwpIHtcbiAgdmFyIGV4cCA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWlmJyk7XG4gIGlmIChleHApIHtcbiAgICBlbC5pZiA9IGV4cDtcbiAgICBhZGRJZkNvbmRpdGlvbihlbCwge1xuICAgICAgZXhwOiBleHAsXG4gICAgICBibG9jazogZWxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZScpICE9IG51bGwpIHtcbiAgICAgIGVsLmVsc2UgPSB0cnVlO1xuICAgIH1cbiAgICB2YXIgZWxzZWlmID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZS1pZicpO1xuICAgIGlmIChlbHNlaWYpIHtcbiAgICAgIGVsLmVsc2VpZiA9IGVsc2VpZjtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0lmQ29uZGl0aW9ucyAoZWwsIHBhcmVudCkge1xuICB2YXIgcHJldiA9IGZpbmRQcmV2RWxlbWVudChwYXJlbnQuY2hpbGRyZW4pO1xuICBpZiAocHJldiAmJiBwcmV2LmlmKSB7XG4gICAgYWRkSWZDb25kaXRpb24ocHJldiwge1xuICAgICAgZXhwOiBlbC5lbHNlaWYsXG4gICAgICBibG9jazogZWxcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybiQxKFxuICAgICAgXCJ2LVwiICsgKGVsLmVsc2VpZiA/ICgnZWxzZS1pZj1cIicgKyBlbC5lbHNlaWYgKyAnXCInKSA6ICdlbHNlJykgKyBcIiBcIiArXG4gICAgICBcInVzZWQgb24gZWxlbWVudCA8XCIgKyAoZWwudGFnKSArIFwiPiB3aXRob3V0IGNvcnJlc3BvbmRpbmcgdi1pZi5cIixcbiAgICAgIGVsLnJhd0F0dHJzTWFwW2VsLmVsc2VpZiA/ICd2LWVsc2UtaWYnIDogJ3YtZWxzZSddXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kUHJldkVsZW1lbnQgKGNoaWxkcmVuKSB7XG4gIHZhciBpID0gY2hpbGRyZW4ubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKGNoaWxkcmVuW2ldLnR5cGUgPT09IDEpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlbltpXVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGlsZHJlbltpXS50ZXh0ICE9PSAnICcpIHtcbiAgICAgICAgd2FybiQxKFxuICAgICAgICAgIFwidGV4dCBcXFwiXCIgKyAoY2hpbGRyZW5baV0udGV4dC50cmltKCkpICsgXCJcXFwiIGJldHdlZW4gdi1pZiBhbmQgdi1lbHNlKC1pZikgXCIgK1xuICAgICAgICAgIFwid2lsbCBiZSBpZ25vcmVkLlwiLFxuICAgICAgICAgIGNoaWxkcmVuW2ldXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjaGlsZHJlbi5wb3AoKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkSWZDb25kaXRpb24gKGVsLCBjb25kaXRpb24pIHtcbiAgaWYgKCFlbC5pZkNvbmRpdGlvbnMpIHtcbiAgICBlbC5pZkNvbmRpdGlvbnMgPSBbXTtcbiAgfVxuICBlbC5pZkNvbmRpdGlvbnMucHVzaChjb25kaXRpb24pO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzT25jZSAoZWwpIHtcbiAgdmFyIG9uY2UgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1vbmNlJyk7XG4gIGlmIChvbmNlICE9IG51bGwpIHtcbiAgICBlbC5vbmNlID0gdHJ1ZTtcbiAgfVxufVxuXG4vLyBoYW5kbGUgY29udGVudCBiZWluZyBwYXNzZWQgdG8gYSBjb21wb25lbnQgYXMgc2xvdCxcbi8vIGUuZy4gPHRlbXBsYXRlIHNsb3Q9XCJ4eHhcIj4sIDxkaXYgc2xvdC1zY29wZT1cInh4eFwiPlxuZnVuY3Rpb24gcHJvY2Vzc1Nsb3RDb250ZW50IChlbCkge1xuICB2YXIgc2xvdFNjb3BlO1xuICBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgc2xvdFNjb3BlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Njb3BlJyk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2xvdFNjb3BlKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIFwidGhlIFxcXCJzY29wZVxcXCIgYXR0cmlidXRlIGZvciBzY29wZWQgc2xvdHMgaGF2ZSBiZWVuIGRlcHJlY2F0ZWQgYW5kIFwiICtcbiAgICAgICAgXCJyZXBsYWNlZCBieSBcXFwic2xvdC1zY29wZVxcXCIgc2luY2UgMi41LiBUaGUgbmV3IFxcXCJzbG90LXNjb3BlXFxcIiBhdHRyaWJ1dGUgXCIgK1xuICAgICAgICBcImNhbiBhbHNvIGJlIHVzZWQgb24gcGxhaW4gZWxlbWVudHMgaW4gYWRkaXRpb24gdG8gPHRlbXBsYXRlPiB0byBcIiArXG4gICAgICAgIFwiZGVub3RlIHNjb3BlZCBzbG90cy5cIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3Njb3BlJ10sXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgfVxuICAgIGVsLnNsb3RTY29wZSA9IHNsb3RTY29wZSB8fCBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc2xvdC1zY29wZScpO1xuICB9IGVsc2UgaWYgKChzbG90U2NvcGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc2xvdC1zY29wZScpKSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGVsLmF0dHJzTWFwWyd2LWZvciddKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIFwiQW1iaWd1b3VzIGNvbWJpbmVkIHVzYWdlIG9mIHNsb3Qtc2NvcGUgYW5kIHYtZm9yIG9uIDxcIiArIChlbC50YWcpICsgXCI+IFwiICtcbiAgICAgICAgXCIodi1mb3IgdGFrZXMgaGlnaGVyIHByaW9yaXR5KS4gVXNlIGEgd3JhcHBlciA8dGVtcGxhdGU+IGZvciB0aGUgXCIgK1xuICAgICAgICBcInNjb3BlZCBzbG90IHRvIG1ha2UgaXQgY2xlYXJlci5cIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3Nsb3Qtc2NvcGUnXSxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgZWwuc2xvdFNjb3BlID0gc2xvdFNjb3BlO1xuICB9XG5cbiAgLy8gc2xvdD1cInh4eFwiXG4gIHZhciBzbG90VGFyZ2V0ID0gZ2V0QmluZGluZ0F0dHIoZWwsICdzbG90Jyk7XG4gIGlmIChzbG90VGFyZ2V0KSB7XG4gICAgZWwuc2xvdFRhcmdldCA9IHNsb3RUYXJnZXQgPT09ICdcIlwiJyA/ICdcImRlZmF1bHRcIicgOiBzbG90VGFyZ2V0O1xuICAgIGVsLnNsb3RUYXJnZXREeW5hbWljID0gISEoZWwuYXR0cnNNYXBbJzpzbG90J10gfHwgZWwuYXR0cnNNYXBbJ3YtYmluZDpzbG90J10pO1xuICAgIC8vIHByZXNlcnZlIHNsb3QgYXMgYW4gYXR0cmlidXRlIGZvciBuYXRpdmUgc2hhZG93IERPTSBjb21wYXRcbiAgICAvLyBvbmx5IGZvciBub24tc2NvcGVkIHNsb3RzLlxuICAgIGlmIChlbC50YWcgIT09ICd0ZW1wbGF0ZScgJiYgIWVsLnNsb3RTY29wZSkge1xuICAgICAgYWRkQXR0cihlbCwgJ3Nsb3QnLCBzbG90VGFyZ2V0LCBnZXRSYXdCaW5kaW5nQXR0cihlbCwgJ3Nsb3QnKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gMi42IHYtc2xvdCBzeW50YXhcbiAge1xuICAgIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIC8vIHYtc2xvdCBvbiA8dGVtcGxhdGU+XG4gICAgICB2YXIgc2xvdEJpbmRpbmcgPSBnZXRBbmRSZW1vdmVBdHRyQnlSZWdleChlbCwgc2xvdFJFKTtcbiAgICAgIGlmIChzbG90QmluZGluZykge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmIChlbC5zbG90VGFyZ2V0IHx8IGVsLnNsb3RTY29wZSkge1xuICAgICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgICBcIlVuZXhwZWN0ZWQgbWl4ZWQgdXNhZ2Ugb2YgZGlmZmVyZW50IHNsb3Qgc3ludGF4ZXMuXCIsXG4gICAgICAgICAgICAgIGVsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZWwucGFyZW50ICYmICFtYXliZUNvbXBvbmVudChlbC5wYXJlbnQpKSB7XG4gICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgIFwiPHRlbXBsYXRlIHYtc2xvdD4gY2FuIG9ubHkgYXBwZWFyIGF0IHRoZSByb290IGxldmVsIGluc2lkZSBcIiArXG4gICAgICAgICAgICAgIFwidGhlIHJlY2VpdmluZyB0aGUgY29tcG9uZW50XCIsXG4gICAgICAgICAgICAgIGVsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVmID0gZ2V0U2xvdE5hbWUoc2xvdEJpbmRpbmcpO1xuICAgICAgICB2YXIgbmFtZSA9IHJlZi5uYW1lO1xuICAgICAgICB2YXIgZHluYW1pYyA9IHJlZi5keW5hbWljO1xuICAgICAgICBlbC5zbG90VGFyZ2V0ID0gbmFtZTtcbiAgICAgICAgZWwuc2xvdFRhcmdldER5bmFtaWMgPSBkeW5hbWljO1xuICAgICAgICBlbC5zbG90U2NvcGUgPSBzbG90QmluZGluZy52YWx1ZSB8fCBlbXB0eVNsb3RTY29wZVRva2VuOyAvLyBmb3JjZSBpdCBpbnRvIGEgc2NvcGVkIHNsb3QgZm9yIHBlcmZcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdi1zbG90IG9uIGNvbXBvbmVudCwgZGVub3RlcyBkZWZhdWx0IHNsb3RcbiAgICAgIHZhciBzbG90QmluZGluZyQxID0gZ2V0QW5kUmVtb3ZlQXR0ckJ5UmVnZXgoZWwsIHNsb3RSRSk7XG4gICAgICBpZiAoc2xvdEJpbmRpbmckMSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICghbWF5YmVDb21wb25lbnQoZWwpKSB7XG4gICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgIFwidi1zbG90IGNhbiBvbmx5IGJlIHVzZWQgb24gY29tcG9uZW50cyBvciA8dGVtcGxhdGU+LlwiLFxuICAgICAgICAgICAgICBzbG90QmluZGluZyQxXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZWwuc2xvdFNjb3BlIHx8IGVsLnNsb3RUYXJnZXQpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgXCJVbmV4cGVjdGVkIG1peGVkIHVzYWdlIG9mIGRpZmZlcmVudCBzbG90IHN5bnRheGVzLlwiLFxuICAgICAgICAgICAgICBlbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVsLnNjb3BlZFNsb3RzKSB7XG4gICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgIFwiVG8gYXZvaWQgc2NvcGUgYW1iaWd1aXR5LCB0aGUgZGVmYXVsdCBzbG90IHNob3VsZCBhbHNvIHVzZSBcIiArXG4gICAgICAgICAgICAgIFwiPHRlbXBsYXRlPiBzeW50YXggd2hlbiB0aGVyZSBhcmUgb3RoZXIgbmFtZWQgc2xvdHMuXCIsXG4gICAgICAgICAgICAgIHNsb3RCaW5kaW5nJDFcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGFkZCB0aGUgY29tcG9uZW50J3MgY2hpbGRyZW4gdG8gaXRzIGRlZmF1bHQgc2xvdFxuICAgICAgICB2YXIgc2xvdHMgPSBlbC5zY29wZWRTbG90cyB8fCAoZWwuc2NvcGVkU2xvdHMgPSB7fSk7XG4gICAgICAgIHZhciByZWYkMSA9IGdldFNsb3ROYW1lKHNsb3RCaW5kaW5nJDEpO1xuICAgICAgICB2YXIgbmFtZSQxID0gcmVmJDEubmFtZTtcbiAgICAgICAgdmFyIGR5bmFtaWMkMSA9IHJlZiQxLmR5bmFtaWM7XG4gICAgICAgIHZhciBzbG90Q29udGFpbmVyID0gc2xvdHNbbmFtZSQxXSA9IGNyZWF0ZUFTVEVsZW1lbnQoJ3RlbXBsYXRlJywgW10sIGVsKTtcbiAgICAgICAgc2xvdENvbnRhaW5lci5zbG90VGFyZ2V0ID0gbmFtZSQxO1xuICAgICAgICBzbG90Q29udGFpbmVyLnNsb3RUYXJnZXREeW5hbWljID0gZHluYW1pYyQxO1xuICAgICAgICBzbG90Q29udGFpbmVyLmNoaWxkcmVuID0gZWwuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgaWYgKCFjLnNsb3RTY29wZSkge1xuICAgICAgICAgICAgYy5wYXJlbnQgPSBzbG90Q29udGFpbmVyO1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzbG90Q29udGFpbmVyLnNsb3RTY29wZSA9IHNsb3RCaW5kaW5nJDEudmFsdWUgfHwgZW1wdHlTbG90U2NvcGVUb2tlbjtcbiAgICAgICAgLy8gcmVtb3ZlIGNoaWxkcmVuIGFzIHRoZXkgYXJlIHJldHVybmVkIGZyb20gc2NvcGVkU2xvdHMgbm93XG4gICAgICAgIGVsLmNoaWxkcmVuID0gW107XG4gICAgICAgIC8vIG1hcmsgZWwgbm9uLXBsYWluIHNvIGRhdGEgZ2V0cyBnZW5lcmF0ZWRcbiAgICAgICAgZWwucGxhaW4gPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2xvdE5hbWUgKGJpbmRpbmcpIHtcbiAgdmFyIG5hbWUgPSBiaW5kaW5nLm5hbWUucmVwbGFjZShzbG90UkUsICcnKTtcbiAgaWYgKCFuYW1lKSB7XG4gICAgaWYgKGJpbmRpbmcubmFtZVswXSAhPT0gJyMnKSB7XG4gICAgICBuYW1lID0gJ2RlZmF1bHQnO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybiQxKFxuICAgICAgICBcInYtc2xvdCBzaG9ydGhhbmQgc3ludGF4IHJlcXVpcmVzIGEgc2xvdCBuYW1lLlwiLFxuICAgICAgICBiaW5kaW5nXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZHluYW1pY0FyZ1JFLnRlc3QobmFtZSlcbiAgICAvLyBkeW5hbWljIFtuYW1lXVxuICAgID8geyBuYW1lOiBuYW1lLnNsaWNlKDEsIC0xKSwgZHluYW1pYzogdHJ1ZSB9XG4gICAgLy8gc3RhdGljIG5hbWVcbiAgICA6IHsgbmFtZTogKFwiXFxcIlwiICsgbmFtZSArIFwiXFxcIlwiKSwgZHluYW1pYzogZmFsc2UgfVxufVxuXG4vLyBoYW5kbGUgPHNsb3QvPiBvdXRsZXRzXG5mdW5jdGlvbiBwcm9jZXNzU2xvdE91dGxldCAoZWwpIHtcbiAgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnKSB7XG4gICAgZWwuc2xvdE5hbWUgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ25hbWUnKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBlbC5rZXkpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgXCJga2V5YCBkb2VzIG5vdCB3b3JrIG9uIDxzbG90PiBiZWNhdXNlIHNsb3RzIGFyZSBhYnN0cmFjdCBvdXRsZXRzIFwiICtcbiAgICAgICAgXCJhbmQgY2FuIHBvc3NpYmx5IGV4cGFuZCBpbnRvIG11bHRpcGxlIGVsZW1lbnRzLiBcIiArXG4gICAgICAgIFwiVXNlIHRoZSBrZXkgb24gYSB3cmFwcGluZyBlbGVtZW50IGluc3RlYWQuXCIsXG4gICAgICAgIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAna2V5JylcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NDb21wb25lbnQgKGVsKSB7XG4gIHZhciBiaW5kaW5nO1xuICBpZiAoKGJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2lzJykpKSB7XG4gICAgZWwuY29tcG9uZW50ID0gYmluZGluZztcbiAgfVxuICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ2lubGluZS10ZW1wbGF0ZScpICE9IG51bGwpIHtcbiAgICBlbC5pbmxpbmVUZW1wbGF0ZSA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0F0dHJzIChlbCkge1xuICB2YXIgbGlzdCA9IGVsLmF0dHJzTGlzdDtcbiAgdmFyIGksIGwsIG5hbWUsIHJhd05hbWUsIHZhbHVlLCBtb2RpZmllcnMsIHN5bmNHZW4sIGlzRHluYW1pYztcbiAgZm9yIChpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbmFtZSA9IHJhd05hbWUgPSBsaXN0W2ldLm5hbWU7XG4gICAgdmFsdWUgPSBsaXN0W2ldLnZhbHVlO1xuICAgIGlmIChkaXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgICAvLyBtYXJrIGVsZW1lbnQgYXMgZHluYW1pY1xuICAgICAgZWwuaGFzQmluZGluZ3MgPSB0cnVlO1xuICAgICAgLy8gbW9kaWZpZXJzXG4gICAgICBtb2RpZmllcnMgPSBwYXJzZU1vZGlmaWVycyhuYW1lLnJlcGxhY2UoZGlyUkUsICcnKSk7XG4gICAgICAvLyBzdXBwb3J0IC5mb28gc2hvcnRoYW5kIHN5bnRheCBmb3IgdGhlIC5wcm9wIG1vZGlmaWVyXG4gICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UobW9kaWZpZXJSRSwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKGJpbmRSRS50ZXN0KG5hbWUpKSB7IC8vIHYtYmluZFxuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKGJpbmRSRSwgJycpO1xuICAgICAgICB2YWx1ZSA9IHBhcnNlRmlsdGVycyh2YWx1ZSk7XG4gICAgICAgIGlzRHluYW1pYyA9IGR5bmFtaWNBcmdSRS50ZXN0KG5hbWUpO1xuICAgICAgICBpZiAoaXNEeW5hbWljKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMSwgLTEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgdmFsdWUudHJpbSgpLmxlbmd0aCA9PT0gMFxuICAgICAgICApIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAoXCJUaGUgdmFsdWUgZm9yIGEgdi1iaW5kIGV4cHJlc3Npb24gY2Fubm90IGJlIGVtcHR5LiBGb3VuZCBpbiBcXFwidi1iaW5kOlwiICsgbmFtZSArIFwiXFxcIlwiKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICAgIGlmIChtb2RpZmllcnMucHJvcCAmJiAhaXNEeW5hbWljKSB7XG4gICAgICAgICAgICBuYW1lID0gY2FtZWxpemUobmFtZSk7XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ2lubmVySHRtbCcpIHsgbmFtZSA9ICdpbm5lckhUTUwnOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtb2RpZmllcnMuY2FtZWwgJiYgIWlzRHluYW1pYykge1xuICAgICAgICAgICAgbmFtZSA9IGNhbWVsaXplKG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobW9kaWZpZXJzLnN5bmMpIHtcbiAgICAgICAgICAgIHN5bmNHZW4gPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgXCIkZXZlbnRcIik7XG4gICAgICAgICAgICBpZiAoIWlzRHluYW1pYykge1xuICAgICAgICAgICAgICBhZGRIYW5kbGVyKFxuICAgICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICAgIChcInVwZGF0ZTpcIiArIChjYW1lbGl6ZShuYW1lKSkpLFxuICAgICAgICAgICAgICAgIHN5bmNHZW4sXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB3YXJuJDEsXG4gICAgICAgICAgICAgICAgbGlzdFtpXVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBpZiAoaHlwaGVuYXRlKG5hbWUpICE9PSBjYW1lbGl6ZShuYW1lKSkge1xuICAgICAgICAgICAgICAgIGFkZEhhbmRsZXIoXG4gICAgICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgICAgIChcInVwZGF0ZTpcIiArIChoeXBoZW5hdGUobmFtZSkpKSxcbiAgICAgICAgICAgICAgICAgIHN5bmNHZW4sXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICB3YXJuJDEsXG4gICAgICAgICAgICAgICAgICBsaXN0W2ldXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gaGFuZGxlciB3LyBkeW5hbWljIGV2ZW50IG5hbWVcbiAgICAgICAgICAgICAgYWRkSGFuZGxlcihcbiAgICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgICAoXCJcXFwidXBkYXRlOlxcXCIrKFwiICsgbmFtZSArIFwiKVwiKSxcbiAgICAgICAgICAgICAgICBzeW5jR2VuLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgd2FybiQxLFxuICAgICAgICAgICAgICAgIGxpc3RbaV0sXG4gICAgICAgICAgICAgICAgdHJ1ZSAvLyBkeW5hbWljXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgobW9kaWZpZXJzICYmIG1vZGlmaWVycy5wcm9wKSB8fCAoXG4gICAgICAgICAgIWVsLmNvbXBvbmVudCAmJiBwbGF0Zm9ybU11c3RVc2VQcm9wKGVsLnRhZywgZWwuYXR0cnNNYXAudHlwZSwgbmFtZSlcbiAgICAgICAgKSkge1xuICAgICAgICAgIGFkZFByb3AoZWwsIG5hbWUsIHZhbHVlLCBsaXN0W2ldLCBpc0R5bmFtaWMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZEF0dHIoZWwsIG5hbWUsIHZhbHVlLCBsaXN0W2ldLCBpc0R5bmFtaWMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG9uUkUudGVzdChuYW1lKSkgeyAvLyB2LW9uXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2Uob25SRSwgJycpO1xuICAgICAgICBpc0R5bmFtaWMgPSBkeW5hbWljQXJnUkUudGVzdChuYW1lKTtcbiAgICAgICAgaWYgKGlzRHluYW1pYykge1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgfVxuICAgICAgICBhZGRIYW5kbGVyKGVsLCBuYW1lLCB2YWx1ZSwgbW9kaWZpZXJzLCBmYWxzZSwgd2FybiQxLCBsaXN0W2ldLCBpc0R5bmFtaWMpO1xuICAgICAgfSBlbHNlIHsgLy8gbm9ybWFsIGRpcmVjdGl2ZXNcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShkaXJSRSwgJycpO1xuICAgICAgICAvLyBwYXJzZSBhcmdcbiAgICAgICAgdmFyIGFyZ01hdGNoID0gbmFtZS5tYXRjaChhcmdSRSk7XG4gICAgICAgIHZhciBhcmcgPSBhcmdNYXRjaCAmJiBhcmdNYXRjaFsxXTtcbiAgICAgICAgaXNEeW5hbWljID0gZmFsc2U7XG4gICAgICAgIGlmIChhcmcpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgwLCAtKGFyZy5sZW5ndGggKyAxKSk7XG4gICAgICAgICAgaWYgKGR5bmFtaWNBcmdSRS50ZXN0KGFyZykpIHtcbiAgICAgICAgICAgIGFyZyA9IGFyZy5zbGljZSgxLCAtMSk7XG4gICAgICAgICAgICBpc0R5bmFtaWMgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhZGREaXJlY3RpdmUoZWwsIG5hbWUsIHJhd05hbWUsIHZhbHVlLCBhcmcsIGlzRHluYW1pYywgbW9kaWZpZXJzLCBsaXN0W2ldKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgbmFtZSA9PT0gJ21vZGVsJykge1xuICAgICAgICAgIGNoZWNrRm9yQWxpYXNNb2RlbChlbCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGxpdGVyYWwgYXR0cmlidXRlXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIgcmVzID0gcGFyc2VUZXh0KHZhbHVlLCBkZWxpbWl0ZXJzKTtcbiAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIjogXCIgK1xuICAgICAgICAgICAgJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gcmVtb3ZlZC4gJyArXG4gICAgICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgaWQ9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDppZD1cInZhbFwiPi4nLFxuICAgICAgICAgICAgbGlzdFtpXVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFkZEF0dHIoZWwsIG5hbWUsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSwgbGlzdFtpXSk7XG4gICAgICAvLyAjNjg4NyBmaXJlZm94IGRvZXNuJ3QgdXBkYXRlIG11dGVkIHN0YXRlIGlmIHNldCB2aWEgYXR0cmlidXRlXG4gICAgICAvLyBldmVuIGltbWVkaWF0ZWx5IGFmdGVyIGVsZW1lbnQgY3JlYXRpb25cbiAgICAgIGlmICghZWwuY29tcG9uZW50ICYmXG4gICAgICAgICAgbmFtZSA9PT0gJ211dGVkJyAmJlxuICAgICAgICAgIHBsYXRmb3JtTXVzdFVzZVByb3AoZWwudGFnLCBlbC5hdHRyc01hcC50eXBlLCBuYW1lKSkge1xuICAgICAgICBhZGRQcm9wKGVsLCBuYW1lLCAndHJ1ZScsIGxpc3RbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0luRm9yIChlbCkge1xuICB2YXIgcGFyZW50ID0gZWw7XG4gIHdoaWxlIChwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50LmZvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBwYXJzZU1vZGlmaWVycyAobmFtZSkge1xuICB2YXIgbWF0Y2ggPSBuYW1lLm1hdGNoKG1vZGlmaWVyUkUpO1xuICBpZiAobWF0Y2gpIHtcbiAgICB2YXIgcmV0ID0ge307XG4gICAgbWF0Y2guZm9yRWFjaChmdW5jdGlvbiAobSkgeyByZXRbbS5zbGljZSgxKV0gPSB0cnVlOyB9KTtcbiAgICByZXR1cm4gcmV0XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZUF0dHJzTWFwIChhdHRycykge1xuICB2YXIgbWFwID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXR0cnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKFxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgbWFwW2F0dHJzW2ldLm5hbWVdICYmICFpc0lFICYmICFpc0VkZ2VcbiAgICApIHtcbiAgICAgIHdhcm4kMSgnZHVwbGljYXRlIGF0dHJpYnV0ZTogJyArIGF0dHJzW2ldLm5hbWUsIGF0dHJzW2ldKTtcbiAgICB9XG4gICAgbWFwW2F0dHJzW2ldLm5hbWVdID0gYXR0cnNbaV0udmFsdWU7XG4gIH1cbiAgcmV0dXJuIG1hcFxufVxuXG4vLyBmb3Igc2NyaXB0IChlLmcuIHR5cGU9XCJ4L3RlbXBsYXRlXCIpIG9yIHN0eWxlLCBkbyBub3QgZGVjb2RlIGNvbnRlbnRcbmZ1bmN0aW9uIGlzVGV4dFRhZyAoZWwpIHtcbiAgcmV0dXJuIGVsLnRhZyA9PT0gJ3NjcmlwdCcgfHwgZWwudGFnID09PSAnc3R5bGUnXG59XG5cbmZ1bmN0aW9uIGlzRm9yYmlkZGVuVGFnIChlbCkge1xuICByZXR1cm4gKFxuICAgIGVsLnRhZyA9PT0gJ3N0eWxlJyB8fFxuICAgIChlbC50YWcgPT09ICdzY3JpcHQnICYmIChcbiAgICAgICFlbC5hdHRyc01hcC50eXBlIHx8XG4gICAgICBlbC5hdHRyc01hcC50eXBlID09PSAndGV4dC9qYXZhc2NyaXB0J1xuICAgICkpXG4gIClcbn1cblxudmFyIGllTlNCdWcgPSAvXnhtbG5zOk5TXFxkKy87XG52YXIgaWVOU1ByZWZpeCA9IC9eTlNcXGQrOi87XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBndWFyZElFU1ZHQnVnIChhdHRycykge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYXR0ciA9IGF0dHJzW2ldO1xuICAgIGlmICghaWVOU0J1Zy50ZXN0KGF0dHIubmFtZSkpIHtcbiAgICAgIGF0dHIubmFtZSA9IGF0dHIubmFtZS5yZXBsYWNlKGllTlNQcmVmaXgsICcnKTtcbiAgICAgIHJlcy5wdXNoKGF0dHIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrRm9yQWxpYXNNb2RlbCAoZWwsIHZhbHVlKSB7XG4gIHZhciBfZWwgPSBlbDtcbiAgd2hpbGUgKF9lbCkge1xuICAgIGlmIChfZWwuZm9yICYmIF9lbC5hbGlhcyA9PT0gdmFsdWUpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCI+OiBcIiArXG4gICAgICAgIFwiWW91IGFyZSBiaW5kaW5nIHYtbW9kZWwgZGlyZWN0bHkgdG8gYSB2LWZvciBpdGVyYXRpb24gYWxpYXMuIFwiICtcbiAgICAgICAgXCJUaGlzIHdpbGwgbm90IGJlIGFibGUgdG8gbW9kaWZ5IHRoZSB2LWZvciBzb3VyY2UgYXJyYXkgYmVjYXVzZSBcIiArXG4gICAgICAgIFwid3JpdGluZyB0byB0aGUgYWxpYXMgaXMgbGlrZSBtb2RpZnlpbmcgYSBmdW5jdGlvbiBsb2NhbCB2YXJpYWJsZS4gXCIgK1xuICAgICAgICBcIkNvbnNpZGVyIHVzaW5nIGFuIGFycmF5IG9mIG9iamVjdHMgYW5kIHVzZSB2LW1vZGVsIG9uIGFuIG9iamVjdCBwcm9wZXJ0eSBpbnN0ZWFkLlwiLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1tb2RlbCddXG4gICAgICApO1xuICAgIH1cbiAgICBfZWwgPSBfZWwucGFyZW50O1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgaXNTdGF0aWNLZXk7XG52YXIgaXNQbGF0Zm9ybVJlc2VydmVkVGFnO1xuXG52YXIgZ2VuU3RhdGljS2V5c0NhY2hlZCA9IGNhY2hlZChnZW5TdGF0aWNLZXlzJDEpO1xuXG4vKipcbiAqIEdvYWwgb2YgdGhlIG9wdGltaXplcjogd2FsayB0aGUgZ2VuZXJhdGVkIHRlbXBsYXRlIEFTVCB0cmVlXG4gKiBhbmQgZGV0ZWN0IHN1Yi10cmVlcyB0aGF0IGFyZSBwdXJlbHkgc3RhdGljLCBpLmUuIHBhcnRzIG9mXG4gKiB0aGUgRE9NIHRoYXQgbmV2ZXIgbmVlZHMgdG8gY2hhbmdlLlxuICpcbiAqIE9uY2Ugd2UgZGV0ZWN0IHRoZXNlIHN1Yi10cmVlcywgd2UgY2FuOlxuICpcbiAqIDEuIEhvaXN0IHRoZW0gaW50byBjb25zdGFudHMsIHNvIHRoYXQgd2Ugbm8gbG9uZ2VyIG5lZWQgdG9cbiAqICAgIGNyZWF0ZSBmcmVzaCBub2RlcyBmb3IgdGhlbSBvbiBlYWNoIHJlLXJlbmRlcjtcbiAqIDIuIENvbXBsZXRlbHkgc2tpcCB0aGVtIGluIHRoZSBwYXRjaGluZyBwcm9jZXNzLlxuICovXG5mdW5jdGlvbiBvcHRpbWl6ZSAocm9vdCwgb3B0aW9ucykge1xuICBpZiAoIXJvb3QpIHsgcmV0dXJuIH1cbiAgaXNTdGF0aWNLZXkgPSBnZW5TdGF0aWNLZXlzQ2FjaGVkKG9wdGlvbnMuc3RhdGljS2V5cyB8fCAnJyk7XG4gIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgLy8gZmlyc3QgcGFzczogbWFyayBhbGwgbm9uLXN0YXRpYyBub2Rlcy5cbiAgbWFya1N0YXRpYyQxKHJvb3QpO1xuICAvLyBzZWNvbmQgcGFzczogbWFyayBzdGF0aWMgcm9vdHMuXG4gIG1hcmtTdGF0aWNSb290cyhyb290LCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGdlblN0YXRpY0tleXMkMSAoa2V5cykge1xuICByZXR1cm4gbWFrZU1hcChcbiAgICAndHlwZSx0YWcsYXR0cnNMaXN0LGF0dHJzTWFwLHBsYWluLHBhcmVudCxjaGlsZHJlbixhdHRycyxzdGFydCxlbmQscmF3QXR0cnNNYXAnICtcbiAgICAoa2V5cyA/ICcsJyArIGtleXMgOiAnJylcbiAgKVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljJDEgKG5vZGUpIHtcbiAgbm9kZS5zdGF0aWMgPSBpc1N0YXRpYyhub2RlKTtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIC8vIGRvIG5vdCBtYWtlIGNvbXBvbmVudCBzbG90IGNvbnRlbnQgc3RhdGljLiB0aGlzIGF2b2lkc1xuICAgIC8vIDEuIGNvbXBvbmVudHMgbm90IGFibGUgdG8gbXV0YXRlIHNsb3Qgbm9kZXNcbiAgICAvLyAyLiBzdGF0aWMgc2xvdCBjb250ZW50IGZhaWxzIGZvciBob3QtcmVsb2FkaW5nXG4gICAgaWYgKFxuICAgICAgIWlzUGxhdGZvcm1SZXNlcnZlZFRhZyhub2RlLnRhZykgJiZcbiAgICAgIG5vZGUudGFnICE9PSAnc2xvdCcgJiZcbiAgICAgIG5vZGUuYXR0cnNNYXBbJ2lubGluZS10ZW1wbGF0ZSddID09IG51bGxcbiAgICApIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgbWFya1N0YXRpYyQxKGNoaWxkKTtcbiAgICAgIGlmICghY2hpbGQuc3RhdGljKSB7XG4gICAgICAgIG5vZGUuc3RhdGljID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLmlmQ29uZGl0aW9ucykge1xuICAgICAgZm9yICh2YXIgaSQxID0gMSwgbCQxID0gbm9kZS5pZkNvbmRpdGlvbnMubGVuZ3RoOyBpJDEgPCBsJDE7IGkkMSsrKSB7XG4gICAgICAgIHZhciBibG9jayA9IG5vZGUuaWZDb25kaXRpb25zW2kkMV0uYmxvY2s7XG4gICAgICAgIG1hcmtTdGF0aWMkMShibG9jayk7XG4gICAgICAgIGlmICghYmxvY2suc3RhdGljKSB7XG4gICAgICAgICAgbm9kZS5zdGF0aWMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljUm9vdHMgKG5vZGUsIGlzSW5Gb3IpIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIGlmIChub2RlLnN0YXRpYyB8fCBub2RlLm9uY2UpIHtcbiAgICAgIG5vZGUuc3RhdGljSW5Gb3IgPSBpc0luRm9yO1xuICAgIH1cbiAgICAvLyBGb3IgYSBub2RlIHRvIHF1YWxpZnkgYXMgYSBzdGF0aWMgcm9vdCwgaXQgc2hvdWxkIGhhdmUgY2hpbGRyZW4gdGhhdFxuICAgIC8vIGFyZSBub3QganVzdCBzdGF0aWMgdGV4dC4gT3RoZXJ3aXNlIHRoZSBjb3N0IG9mIGhvaXN0aW5nIG91dCB3aWxsXG4gICAgLy8gb3V0d2VpZ2ggdGhlIGJlbmVmaXRzIGFuZCBpdCdzIGJldHRlciBvZmYgdG8ganVzdCBhbHdheXMgcmVuZGVyIGl0IGZyZXNoLlxuICAgIGlmIChub2RlLnN0YXRpYyAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCAmJiAhKFxuICAgICAgbm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDEgJiZcbiAgICAgIG5vZGUuY2hpbGRyZW5bMF0udHlwZSA9PT0gM1xuICAgICkpIHtcbiAgICAgIG5vZGUuc3RhdGljUm9vdCA9IHRydWU7XG4gICAgICByZXR1cm5cbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zdGF0aWNSb290ID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIG1hcmtTdGF0aWNSb290cyhub2RlLmNoaWxkcmVuW2ldLCBpc0luRm9yIHx8ICEhbm9kZS5mb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5pZkNvbmRpdGlvbnMpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDEsIGwkMSA9IG5vZGUuaWZDb25kaXRpb25zLmxlbmd0aDsgaSQxIDwgbCQxOyBpJDErKykge1xuICAgICAgICBtYXJrU3RhdGljUm9vdHMobm9kZS5pZkNvbmRpdGlvbnNbaSQxXS5ibG9jaywgaXNJbkZvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU3RhdGljIChub2RlKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDIpIHsgLy8gZXhwcmVzc2lvblxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGlmIChub2RlLnR5cGUgPT09IDMpIHsgLy8gdGV4dFxuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuICEhKG5vZGUucHJlIHx8IChcbiAgICAhbm9kZS5oYXNCaW5kaW5ncyAmJiAvLyBubyBkeW5hbWljIGJpbmRpbmdzXG4gICAgIW5vZGUuaWYgJiYgIW5vZGUuZm9yICYmIC8vIG5vdCB2LWlmIG9yIHYtZm9yIG9yIHYtZWxzZVxuICAgICFpc0J1aWx0SW5UYWcobm9kZS50YWcpICYmIC8vIG5vdCBhIGJ1aWx0LWluXG4gICAgaXNQbGF0Zm9ybVJlc2VydmVkVGFnKG5vZGUudGFnKSAmJiAvLyBub3QgYSBjb21wb25lbnRcbiAgICAhaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3Iobm9kZSkgJiZcbiAgICBPYmplY3Qua2V5cyhub2RlKS5ldmVyeShpc1N0YXRpY0tleSlcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3IgKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUucGFyZW50KSB7XG4gICAgbm9kZSA9IG5vZGUucGFyZW50O1xuICAgIGlmIChub2RlLnRhZyAhPT0gJ3RlbXBsYXRlJykge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChub2RlLmZvcikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG52YXIgZm5FeHBSRSA9IC9eKFtcXHckX10rfFxcKFteKV0qP1xcKSlcXHMqPT58XmZ1bmN0aW9uXFxzKig/OltcXHckXSspP1xccypcXCgvO1xudmFyIGZuSW52b2tlUkUgPSAvXFwoW14pXSo/XFwpOyokLztcbnZhciBzaW1wbGVQYXRoUkUgPSAvXltBLVphLXpfJF1bXFx3JF0qKD86XFwuW0EtWmEtel8kXVtcXHckXSp8XFxbJ1teJ10qPyddfFxcW1wiW15cIl0qP1wiXXxcXFtcXGQrXXxcXFtbQS1aYS16XyRdW1xcdyRdKl0pKiQvO1xuXG4vLyBLZXlib2FyZEV2ZW50LmtleUNvZGUgYWxpYXNlc1xudmFyIGtleUNvZGVzID0ge1xuICBlc2M6IDI3LFxuICB0YWI6IDksXG4gIGVudGVyOiAxMyxcbiAgc3BhY2U6IDMyLFxuICB1cDogMzgsXG4gIGxlZnQ6IDM3LFxuICByaWdodDogMzksXG4gIGRvd246IDQwLFxuICAnZGVsZXRlJzogWzgsIDQ2XVxufTtcblxuLy8gS2V5Ym9hcmRFdmVudC5rZXkgYWxpYXNlc1xudmFyIGtleU5hbWVzID0ge1xuICAvLyAjNzg4MDogSUUxMSBhbmQgRWRnZSB1c2UgYEVzY2AgZm9yIEVzY2FwZSBrZXkgbmFtZS5cbiAgZXNjOiBbJ0VzYycsICdFc2NhcGUnXSxcbiAgdGFiOiAnVGFiJyxcbiAgZW50ZXI6ICdFbnRlcicsXG4gIC8vICM5MTEyOiBJRTExIHVzZXMgYFNwYWNlYmFyYCBmb3IgU3BhY2Uga2V5IG5hbWUuXG4gIHNwYWNlOiBbJyAnLCAnU3BhY2ViYXInXSxcbiAgLy8gIzc4MDY6IElFMTEgdXNlcyBrZXkgbmFtZXMgd2l0aG91dCBgQXJyb3dgIHByZWZpeCBmb3IgYXJyb3cga2V5cy5cbiAgdXA6IFsnVXAnLCAnQXJyb3dVcCddLFxuICBsZWZ0OiBbJ0xlZnQnLCAnQXJyb3dMZWZ0J10sXG4gIHJpZ2h0OiBbJ1JpZ2h0JywgJ0Fycm93UmlnaHQnXSxcbiAgZG93bjogWydEb3duJywgJ0Fycm93RG93biddLFxuICAvLyAjOTExMjogSUUxMSB1c2VzIGBEZWxgIGZvciBEZWxldGUga2V5IG5hbWUuXG4gICdkZWxldGUnOiBbJ0JhY2tzcGFjZScsICdEZWxldGUnLCAnRGVsJ11cbn07XG5cbi8vICM0ODY4OiBtb2RpZmllcnMgdGhhdCBwcmV2ZW50IHRoZSBleGVjdXRpb24gb2YgdGhlIGxpc3RlbmVyXG4vLyBuZWVkIHRvIGV4cGxpY2l0bHkgcmV0dXJuIG51bGwgc28gdGhhdCB3ZSBjYW4gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcmVtb3ZlXG4vLyB0aGUgbGlzdGVuZXIgZm9yIC5vbmNlXG52YXIgZ2VuR3VhcmQgPSBmdW5jdGlvbiAoY29uZGl0aW9uKSB7IHJldHVybiAoXCJpZihcIiArIGNvbmRpdGlvbiArIFwiKXJldHVybiBudWxsO1wiKTsgfTtcblxudmFyIG1vZGlmaWVyQ29kZSA9IHtcbiAgc3RvcDogJyRldmVudC5zdG9wUHJvcGFnYXRpb24oKTsnLFxuICBwcmV2ZW50OiAnJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7JyxcbiAgc2VsZjogZ2VuR3VhcmQoXCIkZXZlbnQudGFyZ2V0ICE9PSAkZXZlbnQuY3VycmVudFRhcmdldFwiKSxcbiAgY3RybDogZ2VuR3VhcmQoXCIhJGV2ZW50LmN0cmxLZXlcIiksXG4gIHNoaWZ0OiBnZW5HdWFyZChcIiEkZXZlbnQuc2hpZnRLZXlcIiksXG4gIGFsdDogZ2VuR3VhcmQoXCIhJGV2ZW50LmFsdEtleVwiKSxcbiAgbWV0YTogZ2VuR3VhcmQoXCIhJGV2ZW50Lm1ldGFLZXlcIiksXG4gIGxlZnQ6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDBcIiksXG4gIG1pZGRsZTogZ2VuR3VhcmQoXCInYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMVwiKSxcbiAgcmlnaHQ6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDJcIilcbn07XG5cbmZ1bmN0aW9uIGdlbkhhbmRsZXJzIChcbiAgZXZlbnRzLFxuICBpc05hdGl2ZVxuKSB7XG4gIHZhciBwcmVmaXggPSBpc05hdGl2ZSA/ICduYXRpdmVPbjonIDogJ29uOic7XG4gIHZhciBzdGF0aWNIYW5kbGVycyA9IFwiXCI7XG4gIHZhciBkeW5hbWljSGFuZGxlcnMgPSBcIlwiO1xuICBmb3IgKHZhciBuYW1lIGluIGV2ZW50cykge1xuICAgIHZhciBoYW5kbGVyQ29kZSA9IGdlbkhhbmRsZXIoZXZlbnRzW25hbWVdKTtcbiAgICBpZiAoZXZlbnRzW25hbWVdICYmIGV2ZW50c1tuYW1lXS5keW5hbWljKSB7XG4gICAgICBkeW5hbWljSGFuZGxlcnMgKz0gbmFtZSArIFwiLFwiICsgaGFuZGxlckNvZGUgKyBcIixcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGljSGFuZGxlcnMgKz0gXCJcXFwiXCIgKyBuYW1lICsgXCJcXFwiOlwiICsgaGFuZGxlckNvZGUgKyBcIixcIjtcbiAgICB9XG4gIH1cbiAgc3RhdGljSGFuZGxlcnMgPSBcIntcIiArIChzdGF0aWNIYW5kbGVycy5zbGljZSgwLCAtMSkpICsgXCJ9XCI7XG4gIGlmIChkeW5hbWljSGFuZGxlcnMpIHtcbiAgICByZXR1cm4gcHJlZml4ICsgXCJfZChcIiArIHN0YXRpY0hhbmRsZXJzICsgXCIsW1wiICsgKGR5bmFtaWNIYW5kbGVycy5zbGljZSgwLCAtMSkpICsgXCJdKVwiXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByZWZpeCArIHN0YXRpY0hhbmRsZXJzXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuSGFuZGxlciAoaGFuZGxlcikge1xuICBpZiAoIWhhbmRsZXIpIHtcbiAgICByZXR1cm4gJ2Z1bmN0aW9uKCl7fSdcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgcmV0dXJuIChcIltcIiArIChoYW5kbGVyLm1hcChmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gZ2VuSGFuZGxlcihoYW5kbGVyKTsgfSkuam9pbignLCcpKSArIFwiXVwiKVxuICB9XG5cbiAgdmFyIGlzTWV0aG9kUGF0aCA9IHNpbXBsZVBhdGhSRS50ZXN0KGhhbmRsZXIudmFsdWUpO1xuICB2YXIgaXNGdW5jdGlvbkV4cHJlc3Npb24gPSBmbkV4cFJFLnRlc3QoaGFuZGxlci52YWx1ZSk7XG4gIHZhciBpc0Z1bmN0aW9uSW52b2NhdGlvbiA9IHNpbXBsZVBhdGhSRS50ZXN0KGhhbmRsZXIudmFsdWUucmVwbGFjZShmbkludm9rZVJFLCAnJykpO1xuXG4gIGlmICghaGFuZGxlci5tb2RpZmllcnMpIHtcbiAgICBpZiAoaXNNZXRob2RQYXRoIHx8IGlzRnVuY3Rpb25FeHByZXNzaW9uKSB7XG4gICAgICByZXR1cm4gaGFuZGxlci52YWx1ZVxuICAgIH1cbiAgICByZXR1cm4gKFwiZnVuY3Rpb24oJGV2ZW50KXtcIiArIChpc0Z1bmN0aW9uSW52b2NhdGlvbiA/IChcInJldHVybiBcIiArIChoYW5kbGVyLnZhbHVlKSkgOiBoYW5kbGVyLnZhbHVlKSArIFwifVwiKSAvLyBpbmxpbmUgc3RhdGVtZW50XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNvZGUgPSAnJztcbiAgICB2YXIgZ2VuTW9kaWZpZXJDb2RlID0gJyc7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gaGFuZGxlci5tb2RpZmllcnMpIHtcbiAgICAgIGlmIChtb2RpZmllckNvZGVba2V5XSkge1xuICAgICAgICBnZW5Nb2RpZmllckNvZGUgKz0gbW9kaWZpZXJDb2RlW2tleV07XG4gICAgICAgIC8vIGxlZnQvcmlnaHRcbiAgICAgICAgaWYgKGtleUNvZGVzW2tleV0pIHtcbiAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdleGFjdCcpIHtcbiAgICAgICAgdmFyIG1vZGlmaWVycyA9IChoYW5kbGVyLm1vZGlmaWVycyk7XG4gICAgICAgIGdlbk1vZGlmaWVyQ29kZSArPSBnZW5HdWFyZChcbiAgICAgICAgICBbJ2N0cmwnLCAnc2hpZnQnLCAnYWx0JywgJ21ldGEnXVxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoa2V5TW9kaWZpZXIpIHsgcmV0dXJuICFtb2RpZmllcnNba2V5TW9kaWZpZXJdOyB9KVxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5TW9kaWZpZXIpIHsgcmV0dXJuIChcIiRldmVudC5cIiArIGtleU1vZGlmaWVyICsgXCJLZXlcIik7IH0pXG4gICAgICAgICAgICAuam9pbignfHwnKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChrZXlzLmxlbmd0aCkge1xuICAgICAgY29kZSArPSBnZW5LZXlGaWx0ZXIoa2V5cyk7XG4gICAgfVxuICAgIC8vIE1ha2Ugc3VyZSBtb2RpZmllcnMgbGlrZSBwcmV2ZW50IGFuZCBzdG9wIGdldCBleGVjdXRlZCBhZnRlciBrZXkgZmlsdGVyaW5nXG4gICAgaWYgKGdlbk1vZGlmaWVyQ29kZSkge1xuICAgICAgY29kZSArPSBnZW5Nb2RpZmllckNvZGU7XG4gICAgfVxuICAgIHZhciBoYW5kbGVyQ29kZSA9IGlzTWV0aG9kUGF0aFxuICAgICAgPyAoXCJyZXR1cm4gXCIgKyAoaGFuZGxlci52YWx1ZSkgKyBcIigkZXZlbnQpXCIpXG4gICAgICA6IGlzRnVuY3Rpb25FeHByZXNzaW9uXG4gICAgICAgID8gKFwicmV0dXJuIChcIiArIChoYW5kbGVyLnZhbHVlKSArIFwiKSgkZXZlbnQpXCIpXG4gICAgICAgIDogaXNGdW5jdGlvbkludm9jYXRpb25cbiAgICAgICAgICA/IChcInJldHVybiBcIiArIChoYW5kbGVyLnZhbHVlKSlcbiAgICAgICAgICA6IGhhbmRsZXIudmFsdWU7XG4gICAgcmV0dXJuIChcImZ1bmN0aW9uKCRldmVudCl7XCIgKyBjb2RlICsgaGFuZGxlckNvZGUgKyBcIn1cIilcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5LZXlGaWx0ZXIgKGtleXMpIHtcbiAgcmV0dXJuIChcbiAgICAvLyBtYWtlIHN1cmUgdGhlIGtleSBmaWx0ZXJzIG9ubHkgYXBwbHkgdG8gS2V5Ym9hcmRFdmVudHNcbiAgICAvLyAjOTQ0MTogY2FuJ3QgdXNlICdrZXlDb2RlJyBpbiAkZXZlbnQgYmVjYXVzZSBDaHJvbWUgYXV0b2ZpbGwgZmlyZXMgZmFrZVxuICAgIC8vIGtleSBldmVudHMgdGhhdCBkbyBub3QgaGF2ZSBrZXlDb2RlIHByb3BlcnR5Li4uXG4gICAgXCJpZighJGV2ZW50LnR5cGUuaW5kZXhPZigna2V5JykmJlwiICtcbiAgICAoa2V5cy5tYXAoZ2VuRmlsdGVyQ29kZSkuam9pbignJiYnKSkgKyBcIilyZXR1cm4gbnVsbDtcIlxuICApXG59XG5cbmZ1bmN0aW9uIGdlbkZpbHRlckNvZGUgKGtleSkge1xuICB2YXIga2V5VmFsID0gcGFyc2VJbnQoa2V5LCAxMCk7XG4gIGlmIChrZXlWYWwpIHtcbiAgICByZXR1cm4gKFwiJGV2ZW50LmtleUNvZGUhPT1cIiArIGtleVZhbClcbiAgfVxuICB2YXIga2V5Q29kZSA9IGtleUNvZGVzW2tleV07XG4gIHZhciBrZXlOYW1lID0ga2V5TmFtZXNba2V5XTtcbiAgcmV0dXJuIChcbiAgICBcIl9rKCRldmVudC5rZXlDb2RlLFwiICtcbiAgICAoSlNPTi5zdHJpbmdpZnkoa2V5KSkgKyBcIixcIiArXG4gICAgKEpTT04uc3RyaW5naWZ5KGtleUNvZGUpKSArIFwiLFwiICtcbiAgICBcIiRldmVudC5rZXksXCIgK1xuICAgIFwiXCIgKyAoSlNPTi5zdHJpbmdpZnkoa2V5TmFtZSkpICtcbiAgICBcIilcIlxuICApXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBvbiAoZWwsIGRpcikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkaXIubW9kaWZpZXJzKSB7XG4gICAgd2FybihcInYtb24gd2l0aG91dCBhcmd1bWVudCBkb2VzIG5vdCBzdXBwb3J0IG1vZGlmaWVycy5cIik7XG4gIH1cbiAgZWwud3JhcExpc3RlbmVycyA9IGZ1bmN0aW9uIChjb2RlKSB7IHJldHVybiAoXCJfZyhcIiArIGNvZGUgKyBcIixcIiArIChkaXIudmFsdWUpICsgXCIpXCIpOyB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZCQxIChlbCwgZGlyKSB7XG4gIGVsLndyYXBEYXRhID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICByZXR1cm4gKFwiX2IoXCIgKyBjb2RlICsgXCIsJ1wiICsgKGVsLnRhZykgKyBcIicsXCIgKyAoZGlyLnZhbHVlKSArIFwiLFwiICsgKGRpci5tb2RpZmllcnMgJiYgZGlyLm1vZGlmaWVycy5wcm9wID8gJ3RydWUnIDogJ2ZhbHNlJykgKyAoZGlyLm1vZGlmaWVycyAmJiBkaXIubW9kaWZpZXJzLnN5bmMgPyAnLHRydWUnIDogJycpICsgXCIpXCIpXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYmFzZURpcmVjdGl2ZXMgPSB7XG4gIG9uOiBvbixcbiAgYmluZDogYmluZCQxLFxuICBjbG9hazogbm9vcFxufTtcblxuLyogICovXG5cblxuXG5cblxudmFyIENvZGVnZW5TdGF0ZSA9IGZ1bmN0aW9uIENvZGVnZW5TdGF0ZSAob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLndhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHRoaXMudHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtQ29kZScpO1xuICB0aGlzLmRhdGFHZW5GbnMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ2dlbkRhdGEnKTtcbiAgdGhpcy5kaXJlY3RpdmVzID0gZXh0ZW5kKGV4dGVuZCh7fSwgYmFzZURpcmVjdGl2ZXMpLCBvcHRpb25zLmRpcmVjdGl2ZXMpO1xuICB2YXIgaXNSZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgdGhpcy5tYXliZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gISFlbC5jb21wb25lbnQgfHwgIWlzUmVzZXJ2ZWRUYWcoZWwudGFnKTsgfTtcbiAgdGhpcy5vbmNlSWQgPSAwO1xuICB0aGlzLnN0YXRpY1JlbmRlckZucyA9IFtdO1xuICB0aGlzLnByZSA9IGZhbHNlO1xufTtcblxuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlIChcbiAgYXN0LFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIHN0YXRlID0gbmV3IENvZGVnZW5TdGF0ZShvcHRpb25zKTtcbiAgdmFyIGNvZGUgPSBhc3QgPyBnZW5FbGVtZW50KGFzdCwgc3RhdGUpIDogJ19jKFwiZGl2XCIpJztcbiAgcmV0dXJuIHtcbiAgICByZW5kZXI6IChcIndpdGgodGhpcyl7cmV0dXJuIFwiICsgY29kZSArIFwifVwiKSxcbiAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRlLnN0YXRpY1JlbmRlckZuc1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkVsZW1lbnQgKGVsLCBzdGF0ZSkge1xuICBpZiAoZWwucGFyZW50KSB7XG4gICAgZWwucHJlID0gZWwucHJlIHx8IGVsLnBhcmVudC5wcmU7XG4gIH1cblxuICBpZiAoZWwuc3RhdGljUm9vdCAmJiAhZWwuc3RhdGljUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlblN0YXRpYyhlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwub25jZSAmJiAhZWwub25jZVByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5PbmNlKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC5mb3IgJiYgIWVsLmZvclByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5Gb3IoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5JZihlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnICYmICFlbC5zbG90VGFyZ2V0ICYmICFzdGF0ZS5wcmUpIHtcbiAgICByZXR1cm4gZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKSB8fCAndm9pZCAwJ1xuICB9IGVsc2UgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnKSB7XG4gICAgcmV0dXJuIGdlblNsb3QoZWwsIHN0YXRlKVxuICB9IGVsc2Uge1xuICAgIC8vIGNvbXBvbmVudCBvciBlbGVtZW50XG4gICAgdmFyIGNvZGU7XG4gICAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgICAgY29kZSA9IGdlbkNvbXBvbmVudChlbC5jb21wb25lbnQsIGVsLCBzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBkYXRhO1xuICAgICAgaWYgKCFlbC5wbGFpbiB8fCAoZWwucHJlICYmIHN0YXRlLm1heWJlQ29tcG9uZW50KGVsKSkpIHtcbiAgICAgICAgZGF0YSA9IGdlbkRhdGEoZWwsIHN0YXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoaWxkcmVuID0gZWwuaW5saW5lVGVtcGxhdGUgPyBudWxsIDogZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlLCB0cnVlKTtcbiAgICAgIGNvZGUgPSBcIl9jKCdcIiArIChlbC50YWcpICsgXCInXCIgKyAoZGF0YSA/IChcIixcIiArIGRhdGEpIDogJycpICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpICsgXCIpXCI7XG4gICAgfVxuICAgIC8vIG1vZHVsZSB0cmFuc2Zvcm1zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS50cmFuc2Zvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb2RlID0gc3RhdGUudHJhbnNmb3Jtc1tpXShlbCwgY29kZSk7XG4gICAgfVxuICAgIHJldHVybiBjb2RlXG4gIH1cbn1cblxuLy8gaG9pc3Qgc3RhdGljIHN1Yi10cmVlcyBvdXRcbmZ1bmN0aW9uIGdlblN0YXRpYyAoZWwsIHN0YXRlKSB7XG4gIGVsLnN0YXRpY1Byb2Nlc3NlZCA9IHRydWU7XG4gIC8vIFNvbWUgZWxlbWVudHMgKHRlbXBsYXRlcykgbmVlZCB0byBiZWhhdmUgZGlmZmVyZW50bHkgaW5zaWRlIG9mIGEgdi1wcmVcbiAgLy8gbm9kZS4gIEFsbCBwcmUgbm9kZXMgYXJlIHN0YXRpYyByb290cywgc28gd2UgY2FuIHVzZSB0aGlzIGFzIGEgbG9jYXRpb24gdG9cbiAgLy8gd3JhcCBhIHN0YXRlIGNoYW5nZSBhbmQgcmVzZXQgaXQgdXBvbiBleGl0aW5nIHRoZSBwcmUgbm9kZS5cbiAgdmFyIG9yaWdpbmFsUHJlU3RhdGUgPSBzdGF0ZS5wcmU7XG4gIGlmIChlbC5wcmUpIHtcbiAgICBzdGF0ZS5wcmUgPSBlbC5wcmU7XG4gIH1cbiAgc3RhdGUuc3RhdGljUmVuZGVyRm5zLnB1c2goKFwid2l0aCh0aGlzKXtyZXR1cm4gXCIgKyAoZ2VuRWxlbWVudChlbCwgc3RhdGUpKSArIFwifVwiKSk7XG4gIHN0YXRlLnByZSA9IG9yaWdpbmFsUHJlU3RhdGU7XG4gIHJldHVybiAoXCJfbShcIiArIChzdGF0ZS5zdGF0aWNSZW5kZXJGbnMubGVuZ3RoIC0gMSkgKyAoZWwuc3RhdGljSW5Gb3IgPyAnLHRydWUnIDogJycpICsgXCIpXCIpXG59XG5cbi8vIHYtb25jZVxuZnVuY3Rpb24gZ2VuT25jZSAoZWwsIHN0YXRlKSB7XG4gIGVsLm9uY2VQcm9jZXNzZWQgPSB0cnVlO1xuICBpZiAoZWwuaWYgJiYgIWVsLmlmUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbklmKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC5zdGF0aWNJbkZvcikge1xuICAgIHZhciBrZXkgPSAnJztcbiAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50O1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQuZm9yKSB7XG4gICAgICAgIGtleSA9IHBhcmVudC5rZXk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIH1cbiAgICBpZiAoIWtleSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdGF0ZS53YXJuKFxuICAgICAgICBcInYtb25jZSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSB2LWZvciB0aGF0IGlzIGtleWVkLiBcIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3Ytb25jZSddXG4gICAgICApO1xuICAgICAgcmV0dXJuIGdlbkVsZW1lbnQoZWwsIHN0YXRlKVxuICAgIH1cbiAgICByZXR1cm4gKFwiX28oXCIgKyAoZ2VuRWxlbWVudChlbCwgc3RhdGUpKSArIFwiLFwiICsgKHN0YXRlLm9uY2VJZCsrKSArIFwiLFwiICsga2V5ICsgXCIpXCIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdlblN0YXRpYyhlbCwgc3RhdGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuSWYgKFxuICBlbCxcbiAgc3RhdGUsXG4gIGFsdEdlbixcbiAgYWx0RW1wdHlcbikge1xuICBlbC5pZlByb2Nlc3NlZCA9IHRydWU7IC8vIGF2b2lkIHJlY3Vyc2lvblxuICByZXR1cm4gZ2VuSWZDb25kaXRpb25zKGVsLmlmQ29uZGl0aW9ucy5zbGljZSgpLCBzdGF0ZSwgYWx0R2VuLCBhbHRFbXB0eSlcbn1cblxuZnVuY3Rpb24gZ2VuSWZDb25kaXRpb25zIChcbiAgY29uZGl0aW9ucyxcbiAgc3RhdGUsXG4gIGFsdEdlbixcbiAgYWx0RW1wdHlcbikge1xuICBpZiAoIWNvbmRpdGlvbnMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGFsdEVtcHR5IHx8ICdfZSgpJ1xuICB9XG5cbiAgdmFyIGNvbmRpdGlvbiA9IGNvbmRpdGlvbnMuc2hpZnQoKTtcbiAgaWYgKGNvbmRpdGlvbi5leHApIHtcbiAgICByZXR1cm4gKFwiKFwiICsgKGNvbmRpdGlvbi5leHApICsgXCIpP1wiICsgKGdlblRlcm5hcnlFeHAoY29uZGl0aW9uLmJsb2NrKSkgKyBcIjpcIiArIChnZW5JZkNvbmRpdGlvbnMoY29uZGl0aW9ucywgc3RhdGUsIGFsdEdlbiwgYWx0RW1wdHkpKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiXCIgKyAoZ2VuVGVybmFyeUV4cChjb25kaXRpb24uYmxvY2spKSlcbiAgfVxuXG4gIC8vIHYtaWYgd2l0aCB2LW9uY2Ugc2hvdWxkIGdlbmVyYXRlIGNvZGUgbGlrZSAoYSk/X20oMCk6X20oMSlcbiAgZnVuY3Rpb24gZ2VuVGVybmFyeUV4cCAoZWwpIHtcbiAgICByZXR1cm4gYWx0R2VuXG4gICAgICA/IGFsdEdlbihlbCwgc3RhdGUpXG4gICAgICA6IGVsLm9uY2VcbiAgICAgICAgPyBnZW5PbmNlKGVsLCBzdGF0ZSlcbiAgICAgICAgOiBnZW5FbGVtZW50KGVsLCBzdGF0ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5Gb3IgKFxuICBlbCxcbiAgc3RhdGUsXG4gIGFsdEdlbixcbiAgYWx0SGVscGVyXG4pIHtcbiAgdmFyIGV4cCA9IGVsLmZvcjtcbiAgdmFyIGFsaWFzID0gZWwuYWxpYXM7XG4gIHZhciBpdGVyYXRvcjEgPSBlbC5pdGVyYXRvcjEgPyAoXCIsXCIgKyAoZWwuaXRlcmF0b3IxKSkgOiAnJztcbiAgdmFyIGl0ZXJhdG9yMiA9IGVsLml0ZXJhdG9yMiA/IChcIixcIiArIChlbC5pdGVyYXRvcjIpKSA6ICcnO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgc3RhdGUubWF5YmVDb21wb25lbnQoZWwpICYmXG4gICAgZWwudGFnICE9PSAnc2xvdCcgJiZcbiAgICBlbC50YWcgIT09ICd0ZW1wbGF0ZScgJiZcbiAgICAhZWwua2V5XG4gICkge1xuICAgIHN0YXRlLndhcm4oXG4gICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1mb3I9XFxcIlwiICsgYWxpYXMgKyBcIiBpbiBcIiArIGV4cCArIFwiXFxcIj46IGNvbXBvbmVudCBsaXN0cyByZW5kZXJlZCB3aXRoIFwiICtcbiAgICAgIFwidi1mb3Igc2hvdWxkIGhhdmUgZXhwbGljaXQga2V5cy4gXCIgK1xuICAgICAgXCJTZWUgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvbGlzdC5odG1sI2tleSBmb3IgbW9yZSBpbmZvLlwiLFxuICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtZm9yJ10sXG4gICAgICB0cnVlIC8qIHRpcCAqL1xuICAgICk7XG4gIH1cblxuICBlbC5mb3JQcm9jZXNzZWQgPSB0cnVlOyAvLyBhdm9pZCByZWN1cnNpb25cbiAgcmV0dXJuIChhbHRIZWxwZXIgfHwgJ19sJykgKyBcIigoXCIgKyBleHAgKyBcIiksXCIgK1xuICAgIFwiZnVuY3Rpb24oXCIgKyBhbGlhcyArIGl0ZXJhdG9yMSArIGl0ZXJhdG9yMiArIFwiKXtcIiArXG4gICAgICBcInJldHVybiBcIiArICgoYWx0R2VuIHx8IGdlbkVsZW1lbnQpKGVsLCBzdGF0ZSkpICtcbiAgICAnfSknXG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEgKGVsLCBzdGF0ZSkge1xuICB2YXIgZGF0YSA9ICd7JztcblxuICAvLyBkaXJlY3RpdmVzIGZpcnN0LlxuICAvLyBkaXJlY3RpdmVzIG1heSBtdXRhdGUgdGhlIGVsJ3Mgb3RoZXIgcHJvcGVydGllcyBiZWZvcmUgdGhleSBhcmUgZ2VuZXJhdGVkLlxuICB2YXIgZGlycyA9IGdlbkRpcmVjdGl2ZXMoZWwsIHN0YXRlKTtcbiAgaWYgKGRpcnMpIHsgZGF0YSArPSBkaXJzICsgJywnOyB9XG5cbiAgLy8ga2V5XG4gIGlmIChlbC5rZXkpIHtcbiAgICBkYXRhICs9IFwia2V5OlwiICsgKGVsLmtleSkgKyBcIixcIjtcbiAgfVxuICAvLyByZWZcbiAgaWYgKGVsLnJlZikge1xuICAgIGRhdGEgKz0gXCJyZWY6XCIgKyAoZWwucmVmKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5yZWZJbkZvcikge1xuICAgIGRhdGEgKz0gXCJyZWZJbkZvcjp0cnVlLFwiO1xuICB9XG4gIC8vIHByZVxuICBpZiAoZWwucHJlKSB7XG4gICAgZGF0YSArPSBcInByZTp0cnVlLFwiO1xuICB9XG4gIC8vIHJlY29yZCBvcmlnaW5hbCB0YWcgbmFtZSBmb3IgY29tcG9uZW50cyB1c2luZyBcImlzXCIgYXR0cmlidXRlXG4gIGlmIChlbC5jb21wb25lbnQpIHtcbiAgICBkYXRhICs9IFwidGFnOlxcXCJcIiArIChlbC50YWcpICsgXCJcXFwiLFwiO1xuICB9XG4gIC8vIG1vZHVsZSBkYXRhIGdlbmVyYXRpb24gZnVuY3Rpb25zXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGUuZGF0YUdlbkZucy5sZW5ndGg7IGkrKykge1xuICAgIGRhdGEgKz0gc3RhdGUuZGF0YUdlbkZuc1tpXShlbCk7XG4gIH1cbiAgLy8gYXR0cmlidXRlc1xuICBpZiAoZWwuYXR0cnMpIHtcbiAgICBkYXRhICs9IFwiYXR0cnM6XCIgKyAoZ2VuUHJvcHMoZWwuYXR0cnMpKSArIFwiLFwiO1xuICB9XG4gIC8vIERPTSBwcm9wc1xuICBpZiAoZWwucHJvcHMpIHtcbiAgICBkYXRhICs9IFwiZG9tUHJvcHM6XCIgKyAoZ2VuUHJvcHMoZWwucHJvcHMpKSArIFwiLFwiO1xuICB9XG4gIC8vIGV2ZW50IGhhbmRsZXJzXG4gIGlmIChlbC5ldmVudHMpIHtcbiAgICBkYXRhICs9IChnZW5IYW5kbGVycyhlbC5ldmVudHMsIGZhbHNlKSkgKyBcIixcIjtcbiAgfVxuICBpZiAoZWwubmF0aXZlRXZlbnRzKSB7XG4gICAgZGF0YSArPSAoZ2VuSGFuZGxlcnMoZWwubmF0aXZlRXZlbnRzLCB0cnVlKSkgKyBcIixcIjtcbiAgfVxuICAvLyBzbG90IHRhcmdldFxuICAvLyBvbmx5IGZvciBub24tc2NvcGVkIHNsb3RzXG4gIGlmIChlbC5zbG90VGFyZ2V0ICYmICFlbC5zbG90U2NvcGUpIHtcbiAgICBkYXRhICs9IFwic2xvdDpcIiArIChlbC5zbG90VGFyZ2V0KSArIFwiLFwiO1xuICB9XG4gIC8vIHNjb3BlZCBzbG90c1xuICBpZiAoZWwuc2NvcGVkU2xvdHMpIHtcbiAgICBkYXRhICs9IChnZW5TY29wZWRTbG90cyhlbCwgZWwuc2NvcGVkU2xvdHMsIHN0YXRlKSkgKyBcIixcIjtcbiAgfVxuICAvLyBjb21wb25lbnQgdi1tb2RlbFxuICBpZiAoZWwubW9kZWwpIHtcbiAgICBkYXRhICs9IFwibW9kZWw6e3ZhbHVlOlwiICsgKGVsLm1vZGVsLnZhbHVlKSArIFwiLGNhbGxiYWNrOlwiICsgKGVsLm1vZGVsLmNhbGxiYWNrKSArIFwiLGV4cHJlc3Npb246XCIgKyAoZWwubW9kZWwuZXhwcmVzc2lvbikgKyBcIn0sXCI7XG4gIH1cbiAgLy8gaW5saW5lLXRlbXBsYXRlXG4gIGlmIChlbC5pbmxpbmVUZW1wbGF0ZSkge1xuICAgIHZhciBpbmxpbmVUZW1wbGF0ZSA9IGdlbklubGluZVRlbXBsYXRlKGVsLCBzdGF0ZSk7XG4gICAgaWYgKGlubGluZVRlbXBsYXRlKSB7XG4gICAgICBkYXRhICs9IGlubGluZVRlbXBsYXRlICsgXCIsXCI7XG4gICAgfVxuICB9XG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UoLywkLywgJycpICsgJ30nO1xuICAvLyB2LWJpbmQgZHluYW1pYyBhcmd1bWVudCB3cmFwXG4gIC8vIHYtYmluZCB3aXRoIGR5bmFtaWMgYXJndW1lbnRzIG11c3QgYmUgYXBwbGllZCB1c2luZyB0aGUgc2FtZSB2LWJpbmQgb2JqZWN0XG4gIC8vIG1lcmdlIGhlbHBlciBzbyB0aGF0IGNsYXNzL3N0eWxlL211c3RVc2VQcm9wIGF0dHJzIGFyZSBoYW5kbGVkIGNvcnJlY3RseS5cbiAgaWYgKGVsLmR5bmFtaWNBdHRycykge1xuICAgIGRhdGEgPSBcIl9iKFwiICsgZGF0YSArIFwiLFxcXCJcIiArIChlbC50YWcpICsgXCJcXFwiLFwiICsgKGdlblByb3BzKGVsLmR5bmFtaWNBdHRycykpICsgXCIpXCI7XG4gIH1cbiAgLy8gdi1iaW5kIGRhdGEgd3JhcFxuICBpZiAoZWwud3JhcERhdGEpIHtcbiAgICBkYXRhID0gZWwud3JhcERhdGEoZGF0YSk7XG4gIH1cbiAgLy8gdi1vbiBkYXRhIHdyYXBcbiAgaWYgKGVsLndyYXBMaXN0ZW5lcnMpIHtcbiAgICBkYXRhID0gZWwud3JhcExpc3RlbmVycyhkYXRhKTtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBnZW5EaXJlY3RpdmVzIChlbCwgc3RhdGUpIHtcbiAgdmFyIGRpcnMgPSBlbC5kaXJlY3RpdmVzO1xuICBpZiAoIWRpcnMpIHsgcmV0dXJuIH1cbiAgdmFyIHJlcyA9ICdkaXJlY3RpdmVzOlsnO1xuICB2YXIgaGFzUnVudGltZSA9IGZhbHNlO1xuICB2YXIgaSwgbCwgZGlyLCBuZWVkUnVudGltZTtcbiAgZm9yIChpID0gMCwgbCA9IGRpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZGlyID0gZGlyc1tpXTtcbiAgICBuZWVkUnVudGltZSA9IHRydWU7XG4gICAgdmFyIGdlbiA9IHN0YXRlLmRpcmVjdGl2ZXNbZGlyLm5hbWVdO1xuICAgIGlmIChnZW4pIHtcbiAgICAgIC8vIGNvbXBpbGUtdGltZSBkaXJlY3RpdmUgdGhhdCBtYW5pcHVsYXRlcyBBU1QuXG4gICAgICAvLyByZXR1cm5zIHRydWUgaWYgaXQgYWxzbyBuZWVkcyBhIHJ1bnRpbWUgY291bnRlcnBhcnQuXG4gICAgICBuZWVkUnVudGltZSA9ICEhZ2VuKGVsLCBkaXIsIHN0YXRlLndhcm4pO1xuICAgIH1cbiAgICBpZiAobmVlZFJ1bnRpbWUpIHtcbiAgICAgIGhhc1J1bnRpbWUgPSB0cnVlO1xuICAgICAgcmVzICs9IFwie25hbWU6XFxcIlwiICsgKGRpci5uYW1lKSArIFwiXFxcIixyYXdOYW1lOlxcXCJcIiArIChkaXIucmF3TmFtZSkgKyBcIlxcXCJcIiArIChkaXIudmFsdWUgPyAoXCIsdmFsdWU6KFwiICsgKGRpci52YWx1ZSkgKyBcIiksZXhwcmVzc2lvbjpcIiArIChKU09OLnN0cmluZ2lmeShkaXIudmFsdWUpKSkgOiAnJykgKyAoZGlyLmFyZyA/IChcIixhcmc6XCIgKyAoZGlyLmlzRHluYW1pY0FyZyA/IGRpci5hcmcgOiAoXCJcXFwiXCIgKyAoZGlyLmFyZykgKyBcIlxcXCJcIikpKSA6ICcnKSArIChkaXIubW9kaWZpZXJzID8gKFwiLG1vZGlmaWVyczpcIiArIChKU09OLnN0cmluZ2lmeShkaXIubW9kaWZpZXJzKSkpIDogJycpICsgXCJ9LFwiO1xuICAgIH1cbiAgfVxuICBpZiAoaGFzUnVudGltZSkge1xuICAgIHJldHVybiByZXMuc2xpY2UoMCwgLTEpICsgJ10nXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuSW5saW5lVGVtcGxhdGUgKGVsLCBzdGF0ZSkge1xuICB2YXIgYXN0ID0gZWwuY2hpbGRyZW5bMF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIChcbiAgICBlbC5jaGlsZHJlbi5sZW5ndGggIT09IDEgfHwgYXN0LnR5cGUgIT09IDFcbiAgKSkge1xuICAgIHN0YXRlLndhcm4oXG4gICAgICAnSW5saW5lLXRlbXBsYXRlIGNvbXBvbmVudHMgbXVzdCBoYXZlIGV4YWN0bHkgb25lIGNoaWxkIGVsZW1lbnQuJyxcbiAgICAgIHsgc3RhcnQ6IGVsLnN0YXJ0IH1cbiAgICApO1xuICB9XG4gIGlmIChhc3QgJiYgYXN0LnR5cGUgPT09IDEpIHtcbiAgICB2YXIgaW5saW5lUmVuZGVyRm5zID0gZ2VuZXJhdGUoYXN0LCBzdGF0ZS5vcHRpb25zKTtcbiAgICByZXR1cm4gKFwiaW5saW5lVGVtcGxhdGU6e3JlbmRlcjpmdW5jdGlvbigpe1wiICsgKGlubGluZVJlbmRlckZucy5yZW5kZXIpICsgXCJ9LHN0YXRpY1JlbmRlckZuczpbXCIgKyAoaW5saW5lUmVuZGVyRm5zLnN0YXRpY1JlbmRlckZucy5tYXAoZnVuY3Rpb24gKGNvZGUpIHsgcmV0dXJuIChcImZ1bmN0aW9uKCl7XCIgKyBjb2RlICsgXCJ9XCIpOyB9KS5qb2luKCcsJykpICsgXCJdfVwiKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlblNjb3BlZFNsb3RzIChcbiAgZWwsXG4gIHNsb3RzLFxuICBzdGF0ZVxuKSB7XG4gIC8vIGJ5IGRlZmF1bHQgc2NvcGVkIHNsb3RzIGFyZSBjb25zaWRlcmVkIFwic3RhYmxlXCIsIHRoaXMgYWxsb3dzIGNoaWxkXG4gIC8vIGNvbXBvbmVudHMgd2l0aCBvbmx5IHNjb3BlZCBzbG90cyB0byBza2lwIGZvcmNlZCB1cGRhdGVzIGZyb20gcGFyZW50LlxuICAvLyBidXQgaW4gc29tZSBjYXNlcyB3ZSBoYXZlIHRvIGJhaWwtb3V0IG9mIHRoaXMgb3B0aW1pemF0aW9uXG4gIC8vIGZvciBleGFtcGxlIGlmIHRoZSBzbG90IGNvbnRhaW5zIGR5bmFtaWMgbmFtZXMsIGhhcyB2LWlmIG9yIHYtZm9yIG9uIHRoZW0uLi5cbiAgdmFyIG5lZWRzRm9yY2VVcGRhdGUgPSBlbC5mb3IgfHwgT2JqZWN0LmtleXMoc2xvdHMpLnNvbWUoZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBzbG90ID0gc2xvdHNba2V5XTtcbiAgICByZXR1cm4gKFxuICAgICAgc2xvdC5zbG90VGFyZ2V0RHluYW1pYyB8fFxuICAgICAgc2xvdC5pZiB8fFxuICAgICAgc2xvdC5mb3IgfHxcbiAgICAgIGNvbnRhaW5zU2xvdENoaWxkKHNsb3QpIC8vIGlzIHBhc3NpbmcgZG93biBzbG90IGZyb20gcGFyZW50IHdoaWNoIG1heSBiZSBkeW5hbWljXG4gICAgKVxuICB9KTtcblxuICAvLyAjOTUzNDogaWYgYSBjb21wb25lbnQgd2l0aCBzY29wZWQgc2xvdHMgaXMgaW5zaWRlIGEgY29uZGl0aW9uYWwgYnJhbmNoLFxuICAvLyBpdCdzIHBvc3NpYmxlIGZvciB0aGUgc2FtZSBjb21wb25lbnQgdG8gYmUgcmV1c2VkIGJ1dCB3aXRoIGRpZmZlcmVudFxuICAvLyBjb21waWxlZCBzbG90IGNvbnRlbnQuIFRvIGF2b2lkIHRoYXQsIHdlIGdlbmVyYXRlIGEgdW5pcXVlIGtleSBiYXNlZCBvblxuICAvLyB0aGUgZ2VuZXJhdGVkIGNvZGUgb2YgYWxsIHRoZSBzbG90IGNvbnRlbnRzLlxuICB2YXIgbmVlZHNLZXkgPSAhIWVsLmlmO1xuXG4gIC8vIE9SIHdoZW4gaXQgaXMgaW5zaWRlIGFub3RoZXIgc2NvcGVkIHNsb3Qgb3Igdi1mb3IgKHRoZSByZWFjdGl2aXR5IG1heSBiZVxuICAvLyBkaXNjb25uZWN0ZWQgZHVlIHRvIHRoZSBpbnRlcm1lZGlhdGUgc2NvcGUgdmFyaWFibGUpXG4gIC8vICM5NDM4LCAjOTUwNlxuICAvLyBUT0RPOiB0aGlzIGNhbiBiZSBmdXJ0aGVyIG9wdGltaXplZCBieSBwcm9wZXJseSBhbmFseXppbmcgaW4tc2NvcGUgYmluZGluZ3NcbiAgLy8gYW5kIHNraXAgZm9yY2UgdXBkYXRpbmcgb25lcyB0aGF0IGRvIG5vdCBhY3R1YWxseSB1c2Ugc2NvcGUgdmFyaWFibGVzLlxuICBpZiAoIW5lZWRzRm9yY2VVcGRhdGUpIHtcbiAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50O1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGlmIChcbiAgICAgICAgKHBhcmVudC5zbG90U2NvcGUgJiYgcGFyZW50LnNsb3RTY29wZSAhPT0gZW1wdHlTbG90U2NvcGVUb2tlbikgfHxcbiAgICAgICAgcGFyZW50LmZvclxuICAgICAgKSB7XG4gICAgICAgIG5lZWRzRm9yY2VVcGRhdGUgPSB0cnVlO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgaWYgKHBhcmVudC5pZikge1xuICAgICAgICBuZWVkc0tleSA9IHRydWU7XG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIH1cbiAgfVxuXG4gIHZhciBnZW5lcmF0ZWRTbG90cyA9IE9iamVjdC5rZXlzKHNsb3RzKVxuICAgIC5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZ2VuU2NvcGVkU2xvdChzbG90c1trZXldLCBzdGF0ZSk7IH0pXG4gICAgLmpvaW4oJywnKTtcblxuICByZXR1cm4gKFwic2NvcGVkU2xvdHM6X3UoW1wiICsgZ2VuZXJhdGVkU2xvdHMgKyBcIl1cIiArIChuZWVkc0ZvcmNlVXBkYXRlID8gXCIsbnVsbCx0cnVlXCIgOiBcIlwiKSArICghbmVlZHNGb3JjZVVwZGF0ZSAmJiBuZWVkc0tleSA/IChcIixudWxsLGZhbHNlLFwiICsgKGhhc2goZ2VuZXJhdGVkU2xvdHMpKSkgOiBcIlwiKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBoYXNoKHN0cikge1xuICB2YXIgaGFzaCA9IDUzODE7XG4gIHZhciBpID0gc3RyLmxlbmd0aDtcbiAgd2hpbGUoaSkge1xuICAgIGhhc2ggPSAoaGFzaCAqIDMzKSBeIHN0ci5jaGFyQ29kZUF0KC0taSk7XG4gIH1cbiAgcmV0dXJuIGhhc2ggPj4+IDBcbn1cblxuZnVuY3Rpb24gY29udGFpbnNTbG90Q2hpbGQgKGVsKSB7XG4gIGlmIChlbC50eXBlID09PSAxKSB7XG4gICAgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZWwuY2hpbGRyZW4uc29tZShjb250YWluc1Nsb3RDaGlsZClcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gZ2VuU2NvcGVkU2xvdCAoXG4gIGVsLFxuICBzdGF0ZVxuKSB7XG4gIHZhciBpc0xlZ2FjeVN5bnRheCA9IGVsLmF0dHJzTWFwWydzbG90LXNjb3BlJ107XG4gIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQgJiYgIWlzTGVnYWN5U3ludGF4KSB7XG4gICAgcmV0dXJuIGdlbklmKGVsLCBzdGF0ZSwgZ2VuU2NvcGVkU2xvdCwgXCJudWxsXCIpXG4gIH1cbiAgaWYgKGVsLmZvciAmJiAhZWwuZm9yUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbkZvcihlbCwgc3RhdGUsIGdlblNjb3BlZFNsb3QpXG4gIH1cbiAgdmFyIHNsb3RTY29wZSA9IGVsLnNsb3RTY29wZSA9PT0gZW1wdHlTbG90U2NvcGVUb2tlblxuICAgID8gXCJcIlxuICAgIDogU3RyaW5nKGVsLnNsb3RTY29wZSk7XG4gIHZhciBmbiA9IFwiZnVuY3Rpb24oXCIgKyBzbG90U2NvcGUgKyBcIil7XCIgK1xuICAgIFwicmV0dXJuIFwiICsgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJ1xuICAgICAgPyBlbC5pZiAmJiBpc0xlZ2FjeVN5bnRheFxuICAgICAgICA/IChcIihcIiArIChlbC5pZikgKyBcIik/XCIgKyAoZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKSB8fCAndW5kZWZpbmVkJykgKyBcIjp1bmRlZmluZWRcIilcbiAgICAgICAgOiBnZW5DaGlsZHJlbihlbCwgc3RhdGUpIHx8ICd1bmRlZmluZWQnXG4gICAgICA6IGdlbkVsZW1lbnQoZWwsIHN0YXRlKSkgKyBcIn1cIjtcbiAgLy8gcmV2ZXJzZSBwcm94eSB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90c1xuICB2YXIgcmV2ZXJzZVByb3h5ID0gc2xvdFNjb3BlID8gXCJcIiA6IFwiLHByb3h5OnRydWVcIjtcbiAgcmV0dXJuIChcIntrZXk6XCIgKyAoZWwuc2xvdFRhcmdldCB8fCBcIlxcXCJkZWZhdWx0XFxcIlwiKSArIFwiLGZuOlwiICsgZm4gKyByZXZlcnNlUHJveHkgKyBcIn1cIilcbn1cblxuZnVuY3Rpb24gZ2VuQ2hpbGRyZW4gKFxuICBlbCxcbiAgc3RhdGUsXG4gIGNoZWNrU2tpcCxcbiAgYWx0R2VuRWxlbWVudCxcbiAgYWx0R2VuTm9kZVxuKSB7XG4gIHZhciBjaGlsZHJlbiA9IGVsLmNoaWxkcmVuO1xuICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgdmFyIGVsJDEgPSBjaGlsZHJlblswXTtcbiAgICAvLyBvcHRpbWl6ZSBzaW5nbGUgdi1mb3JcbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmXG4gICAgICBlbCQxLmZvciAmJlxuICAgICAgZWwkMS50YWcgIT09ICd0ZW1wbGF0ZScgJiZcbiAgICAgIGVsJDEudGFnICE9PSAnc2xvdCdcbiAgICApIHtcbiAgICAgIHZhciBub3JtYWxpemF0aW9uVHlwZSA9IGNoZWNrU2tpcFxuICAgICAgICA/IHN0YXRlLm1heWJlQ29tcG9uZW50KGVsJDEpID8gXCIsMVwiIDogXCIsMFwiXG4gICAgICAgIDogXCJcIjtcbiAgICAgIHJldHVybiAoXCJcIiArICgoYWx0R2VuRWxlbWVudCB8fCBnZW5FbGVtZW50KShlbCQxLCBzdGF0ZSkpICsgbm9ybWFsaXphdGlvblR5cGUpXG4gICAgfVxuICAgIHZhciBub3JtYWxpemF0aW9uVHlwZSQxID0gY2hlY2tTa2lwXG4gICAgICA/IGdldE5vcm1hbGl6YXRpb25UeXBlKGNoaWxkcmVuLCBzdGF0ZS5tYXliZUNvbXBvbmVudClcbiAgICAgIDogMDtcbiAgICB2YXIgZ2VuID0gYWx0R2VuTm9kZSB8fCBnZW5Ob2RlO1xuICAgIHJldHVybiAoXCJbXCIgKyAoY2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBnZW4oYywgc3RhdGUpOyB9KS5qb2luKCcsJykpICsgXCJdXCIgKyAobm9ybWFsaXphdGlvblR5cGUkMSA/IChcIixcIiArIG5vcm1hbGl6YXRpb25UeXBlJDEpIDogJycpKVxuICB9XG59XG5cbi8vIGRldGVybWluZSB0aGUgbm9ybWFsaXphdGlvbiBuZWVkZWQgZm9yIHRoZSBjaGlsZHJlbiBhcnJheS5cbi8vIDA6IG5vIG5vcm1hbGl6YXRpb24gbmVlZGVkXG4vLyAxOiBzaW1wbGUgbm9ybWFsaXphdGlvbiBuZWVkZWQgKHBvc3NpYmxlIDEtbGV2ZWwgZGVlcCBuZXN0ZWQgYXJyYXkpXG4vLyAyOiBmdWxsIG5vcm1hbGl6YXRpb24gbmVlZGVkXG5mdW5jdGlvbiBnZXROb3JtYWxpemF0aW9uVHlwZSAoXG4gIGNoaWxkcmVuLFxuICBtYXliZUNvbXBvbmVudFxuKSB7XG4gIHZhciByZXMgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGVsID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGVsLnR5cGUgIT09IDEpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGlmIChuZWVkc05vcm1hbGl6YXRpb24oZWwpIHx8XG4gICAgICAgIChlbC5pZkNvbmRpdGlvbnMgJiYgZWwuaWZDb25kaXRpb25zLnNvbWUoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIG5lZWRzTm9ybWFsaXphdGlvbihjLmJsb2NrKTsgfSkpKSB7XG4gICAgICByZXMgPSAyO1xuICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKG1heWJlQ29tcG9uZW50KGVsKSB8fFxuICAgICAgICAoZWwuaWZDb25kaXRpb25zICYmIGVsLmlmQ29uZGl0aW9ucy5zb21lKGZ1bmN0aW9uIChjKSB7IHJldHVybiBtYXliZUNvbXBvbmVudChjLmJsb2NrKTsgfSkpKSB7XG4gICAgICByZXMgPSAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIG5lZWRzTm9ybWFsaXphdGlvbiAoZWwpIHtcbiAgcmV0dXJuIGVsLmZvciAhPT0gdW5kZWZpbmVkIHx8IGVsLnRhZyA9PT0gJ3RlbXBsYXRlJyB8fCBlbC50YWcgPT09ICdzbG90J1xufVxuXG5mdW5jdGlvbiBnZW5Ob2RlIChub2RlLCBzdGF0ZSkge1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgcmV0dXJuIGdlbkVsZW1lbnQobm9kZSwgc3RhdGUpXG4gIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAzICYmIG5vZGUuaXNDb21tZW50KSB7XG4gICAgcmV0dXJuIGdlbkNvbW1lbnQobm9kZSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2VuVGV4dChub2RlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlblRleHQgKHRleHQpIHtcbiAgcmV0dXJuIChcIl92KFwiICsgKHRleHQudHlwZSA9PT0gMlxuICAgID8gdGV4dC5leHByZXNzaW9uIC8vIG5vIG5lZWQgZm9yICgpIGJlY2F1c2UgYWxyZWFkeSB3cmFwcGVkIGluIF9zKClcbiAgICA6IHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyhKU09OLnN0cmluZ2lmeSh0ZXh0LnRleHQpKSkgKyBcIilcIilcbn1cblxuZnVuY3Rpb24gZ2VuQ29tbWVudCAoY29tbWVudCkge1xuICByZXR1cm4gKFwiX2UoXCIgKyAoSlNPTi5zdHJpbmdpZnkoY29tbWVudC50ZXh0KSkgKyBcIilcIilcbn1cblxuZnVuY3Rpb24gZ2VuU2xvdCAoZWwsIHN0YXRlKSB7XG4gIHZhciBzbG90TmFtZSA9IGVsLnNsb3ROYW1lIHx8ICdcImRlZmF1bHRcIic7XG4gIHZhciBjaGlsZHJlbiA9IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSk7XG4gIHZhciByZXMgPSBcIl90KFwiICsgc2xvdE5hbWUgKyAoY2hpbGRyZW4gPyAoXCIsXCIgKyBjaGlsZHJlbikgOiAnJyk7XG4gIHZhciBhdHRycyA9IGVsLmF0dHJzIHx8IGVsLmR5bmFtaWNBdHRyc1xuICAgID8gZ2VuUHJvcHMoKGVsLmF0dHJzIHx8IFtdKS5jb25jYXQoZWwuZHluYW1pY0F0dHJzIHx8IFtdKS5tYXAoZnVuY3Rpb24gKGF0dHIpIHsgcmV0dXJuICh7XG4gICAgICAgIC8vIHNsb3QgcHJvcHMgYXJlIGNhbWVsaXplZFxuICAgICAgICBuYW1lOiBjYW1lbGl6ZShhdHRyLm5hbWUpLFxuICAgICAgICB2YWx1ZTogYXR0ci52YWx1ZSxcbiAgICAgICAgZHluYW1pYzogYXR0ci5keW5hbWljXG4gICAgICB9KTsgfSkpXG4gICAgOiBudWxsO1xuICB2YXIgYmluZCA9IGVsLmF0dHJzTWFwWyd2LWJpbmQnXTtcbiAgaWYgKChhdHRycyB8fCBiaW5kKSAmJiAhY2hpbGRyZW4pIHtcbiAgICByZXMgKz0gXCIsbnVsbFwiO1xuICB9XG4gIGlmIChhdHRycykge1xuICAgIHJlcyArPSBcIixcIiArIGF0dHJzO1xuICB9XG4gIGlmIChiaW5kKSB7XG4gICAgcmVzICs9IChhdHRycyA/ICcnIDogJyxudWxsJykgKyBcIixcIiArIGJpbmQ7XG4gIH1cbiAgcmV0dXJuIHJlcyArICcpJ1xufVxuXG4vLyBjb21wb25lbnROYW1lIGlzIGVsLmNvbXBvbmVudCwgdGFrZSBpdCBhcyBhcmd1bWVudCB0byBzaHVuIGZsb3cncyBwZXNzaW1pc3RpYyByZWZpbmVtZW50XG5mdW5jdGlvbiBnZW5Db21wb25lbnQgKFxuICBjb21wb25lbnROYW1lLFxuICBlbCxcbiAgc3RhdGVcbikge1xuICB2YXIgY2hpbGRyZW4gPSBlbC5pbmxpbmVUZW1wbGF0ZSA/IG51bGwgOiBnZW5DaGlsZHJlbihlbCwgc3RhdGUsIHRydWUpO1xuICByZXR1cm4gKFwiX2MoXCIgKyBjb21wb25lbnROYW1lICsgXCIsXCIgKyAoZ2VuRGF0YShlbCwgc3RhdGUpKSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKSArIFwiKVwiKVxufVxuXG5mdW5jdGlvbiBnZW5Qcm9wcyAocHJvcHMpIHtcbiAgdmFyIHN0YXRpY1Byb3BzID0gXCJcIjtcbiAgdmFyIGR5bmFtaWNQcm9wcyA9IFwiXCI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJvcCA9IHByb3BzW2ldO1xuICAgIHZhciB2YWx1ZSA9IHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyhwcm9wLnZhbHVlKTtcbiAgICBpZiAocHJvcC5keW5hbWljKSB7XG4gICAgICBkeW5hbWljUHJvcHMgKz0gKHByb3AubmFtZSkgKyBcIixcIiArIHZhbHVlICsgXCIsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRpY1Byb3BzICs9IFwiXFxcIlwiICsgKHByb3AubmFtZSkgKyBcIlxcXCI6XCIgKyB2YWx1ZSArIFwiLFwiO1xuICAgIH1cbiAgfVxuICBzdGF0aWNQcm9wcyA9IFwie1wiICsgKHN0YXRpY1Byb3BzLnNsaWNlKDAsIC0xKSkgKyBcIn1cIjtcbiAgaWYgKGR5bmFtaWNQcm9wcykge1xuICAgIHJldHVybiAoXCJfZChcIiArIHN0YXRpY1Byb3BzICsgXCIsW1wiICsgKGR5bmFtaWNQcm9wcy5zbGljZSgwLCAtMSkpICsgXCJdKVwiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdGF0aWNQcm9wc1xuICB9XG59XG5cbi8vICMzODk1LCAjNDI2OFxuZnVuY3Rpb24gdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzICh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0XG4gICAgLnJlcGxhY2UoL1xcdTIwMjgvZywgJ1xcXFx1MjAyOCcpXG4gICAgLnJlcGxhY2UoL1xcdTIwMjkvZywgJ1xcXFx1MjAyOScpXG59XG5cbi8qICAqL1xuXG5cblxuLy8gdGhlc2Uga2V5d29yZHMgc2hvdWxkIG5vdCBhcHBlYXIgaW5zaWRlIGV4cHJlc3Npb25zLCBidXQgb3BlcmF0b3JzIGxpa2Vcbi8vIHR5cGVvZiwgaW5zdGFuY2VvZiBhbmQgaW4gYXJlIGFsbG93ZWRcbnZhciBwcm9oaWJpdGVkS2V5d29yZFJFID0gbmV3IFJlZ0V4cCgnXFxcXGInICsgKFxuICAnZG8saWYsZm9yLGxldCxuZXcsdHJ5LHZhcixjYXNlLGVsc2Usd2l0aCxhd2FpdCxicmVhayxjYXRjaCxjbGFzcyxjb25zdCwnICtcbiAgJ3N1cGVyLHRocm93LHdoaWxlLHlpZWxkLGRlbGV0ZSxleHBvcnQsaW1wb3J0LHJldHVybixzd2l0Y2gsZGVmYXVsdCwnICtcbiAgJ2V4dGVuZHMsZmluYWxseSxjb250aW51ZSxkZWJ1Z2dlcixmdW5jdGlvbixhcmd1bWVudHMnXG4pLnNwbGl0KCcsJykuam9pbignXFxcXGJ8XFxcXGInKSArICdcXFxcYicpO1xuXG4vLyB0aGVzZSB1bmFyeSBvcGVyYXRvcnMgc2hvdWxkIG5vdCBiZSB1c2VkIGFzIHByb3BlcnR5L21ldGhvZCBuYW1lc1xudmFyIHVuYXJ5T3BlcmF0b3JzUkUgPSBuZXcgUmVnRXhwKCdcXFxcYicgKyAoXG4gICdkZWxldGUsdHlwZW9mLHZvaWQnXG4pLnNwbGl0KCcsJykuam9pbignXFxcXHMqXFxcXChbXlxcXFwpXSpcXFxcKXxcXFxcYicpICsgJ1xcXFxzKlxcXFwoW15cXFxcKV0qXFxcXCknKTtcblxuLy8gc3RyaXAgc3RyaW5ncyBpbiBleHByZXNzaW9uc1xudmFyIHN0cmlwU3RyaW5nUkUgPSAvJyg/OlteJ1xcXFxdfFxcXFwuKSonfFwiKD86W15cIlxcXFxdfFxcXFwuKSpcInxgKD86W15gXFxcXF18XFxcXC4pKlxcJFxce3xcXH0oPzpbXmBcXFxcXXxcXFxcLikqYHxgKD86W15gXFxcXF18XFxcXC4pKmAvZztcblxuLy8gZGV0ZWN0IHByb2JsZW1hdGljIGV4cHJlc3Npb25zIGluIGEgdGVtcGxhdGVcbmZ1bmN0aW9uIGRldGVjdEVycm9ycyAoYXN0LCB3YXJuKSB7XG4gIGlmIChhc3QpIHtcbiAgICBjaGVja05vZGUoYXN0LCB3YXJuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja05vZGUgKG5vZGUsIHdhcm4pIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIGZvciAodmFyIG5hbWUgaW4gbm9kZS5hdHRyc01hcCkge1xuICAgICAgaWYgKGRpclJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gbm9kZS5hdHRyc01hcFtuYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJhbmdlID0gbm9kZS5yYXdBdHRyc01hcFtuYW1lXTtcbiAgICAgICAgICBpZiAobmFtZSA9PT0gJ3YtZm9yJykge1xuICAgICAgICAgICAgY2hlY2tGb3Iobm9kZSwgKFwidi1mb3I9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9uUkUudGVzdChuYW1lKSkge1xuICAgICAgICAgICAgY2hlY2tFdmVudCh2YWx1ZSwgKG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgd2FybiwgcmFuZ2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGVja0V4cHJlc3Npb24odmFsdWUsIChuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjaGVja05vZGUobm9kZS5jaGlsZHJlbltpXSwgd2Fybik7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gMikge1xuICAgIGNoZWNrRXhwcmVzc2lvbihub2RlLmV4cHJlc3Npb24sIG5vZGUudGV4dCwgd2Fybiwgbm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tFdmVudCAoZXhwLCB0ZXh0LCB3YXJuLCByYW5nZSkge1xuICB2YXIgc3RpcHBlZCA9IGV4cC5yZXBsYWNlKHN0cmlwU3RyaW5nUkUsICcnKTtcbiAgdmFyIGtleXdvcmRNYXRjaCA9IHN0aXBwZWQubWF0Y2godW5hcnlPcGVyYXRvcnNSRSk7XG4gIGlmIChrZXl3b3JkTWF0Y2ggJiYgc3RpcHBlZC5jaGFyQXQoa2V5d29yZE1hdGNoLmluZGV4IC0gMSkgIT09ICckJykge1xuICAgIHdhcm4oXG4gICAgICBcImF2b2lkIHVzaW5nIEphdmFTY3JpcHQgdW5hcnkgb3BlcmF0b3IgYXMgcHJvcGVydHkgbmFtZTogXCIgK1xuICAgICAgXCJcXFwiXCIgKyAoa2V5d29yZE1hdGNoWzBdKSArIFwiXFxcIiBpbiBleHByZXNzaW9uIFwiICsgKHRleHQudHJpbSgpKSxcbiAgICAgIHJhbmdlXG4gICAgKTtcbiAgfVxuICBjaGVja0V4cHJlc3Npb24oZXhwLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrRm9yIChub2RlLCB0ZXh0LCB3YXJuLCByYW5nZSkge1xuICBjaGVja0V4cHJlc3Npb24obm9kZS5mb3IgfHwgJycsIHRleHQsIHdhcm4sIHJhbmdlKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuYWxpYXMsICd2LWZvciBhbGlhcycsIHRleHQsIHdhcm4sIHJhbmdlKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuaXRlcmF0b3IxLCAndi1mb3IgaXRlcmF0b3InLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG4gIGNoZWNrSWRlbnRpZmllcihub2RlLml0ZXJhdG9yMiwgJ3YtZm9yIGl0ZXJhdG9yJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xufVxuXG5mdW5jdGlvbiBjaGVja0lkZW50aWZpZXIgKFxuICBpZGVudCxcbiAgdHlwZSxcbiAgdGV4dCxcbiAgd2FybixcbiAgcmFuZ2Vcbikge1xuICBpZiAodHlwZW9mIGlkZW50ID09PSAnc3RyaW5nJykge1xuICAgIHRyeSB7XG4gICAgICBuZXcgRnVuY3Rpb24oKFwidmFyIFwiICsgaWRlbnQgKyBcIj1fXCIpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB3YXJuKChcImludmFsaWQgXCIgKyB0eXBlICsgXCIgXFxcIlwiICsgaWRlbnQgKyBcIlxcXCIgaW4gZXhwcmVzc2lvbjogXCIgKyAodGV4dC50cmltKCkpKSwgcmFuZ2UpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0V4cHJlc3Npb24gKGV4cCwgdGV4dCwgd2FybiwgcmFuZ2UpIHtcbiAgdHJ5IHtcbiAgICBuZXcgRnVuY3Rpb24oKFwicmV0dXJuIFwiICsgZXhwKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIga2V5d29yZE1hdGNoID0gZXhwLnJlcGxhY2Uoc3RyaXBTdHJpbmdSRSwgJycpLm1hdGNoKHByb2hpYml0ZWRLZXl3b3JkUkUpO1xuICAgIGlmIChrZXl3b3JkTWF0Y2gpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiYXZvaWQgdXNpbmcgSmF2YVNjcmlwdCBrZXl3b3JkIGFzIHByb3BlcnR5IG5hbWU6IFwiICtcbiAgICAgICAgXCJcXFwiXCIgKyAoa2V5d29yZE1hdGNoWzBdKSArIFwiXFxcIlxcbiAgUmF3IGV4cHJlc3Npb246IFwiICsgKHRleHQudHJpbSgpKSxcbiAgICAgICAgcmFuZ2VcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiaW52YWxpZCBleHByZXNzaW9uOiBcIiArIChlLm1lc3NhZ2UpICsgXCIgaW5cXG5cXG5cIiArXG4gICAgICAgIFwiICAgIFwiICsgZXhwICsgXCJcXG5cXG5cIiArXG4gICAgICAgIFwiICBSYXcgZXhwcmVzc2lvbjogXCIgKyAodGV4dC50cmltKCkpICsgXCJcXG5cIixcbiAgICAgICAgcmFuZ2VcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgcmFuZ2UgPSAyO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUNvZGVGcmFtZSAoXG4gIHNvdXJjZSxcbiAgc3RhcnQsXG4gIGVuZFxuKSB7XG4gIGlmICggc3RhcnQgPT09IHZvaWQgMCApIHN0YXJ0ID0gMDtcbiAgaWYgKCBlbmQgPT09IHZvaWQgMCApIGVuZCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgdmFyIGxpbmVzID0gc291cmNlLnNwbGl0KC9cXHI/XFxuLyk7XG4gIHZhciBjb3VudCA9IDA7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIGNvdW50ICs9IGxpbmVzW2ldLmxlbmd0aCArIDE7XG4gICAgaWYgKGNvdW50ID49IHN0YXJ0KSB7XG4gICAgICBmb3IgKHZhciBqID0gaSAtIHJhbmdlOyBqIDw9IGkgKyByYW5nZSB8fCBlbmQgPiBjb3VudDsgaisrKSB7XG4gICAgICAgIGlmIChqIDwgMCB8fCBqID49IGxpbmVzLmxlbmd0aCkgeyBjb250aW51ZSB9XG4gICAgICAgIHJlcy5wdXNoKChcIlwiICsgKGogKyAxKSArIChyZXBlYXQkMShcIiBcIiwgMyAtIFN0cmluZyhqICsgMSkubGVuZ3RoKSkgKyBcInwgIFwiICsgKGxpbmVzW2pdKSkpO1xuICAgICAgICB2YXIgbGluZUxlbmd0aCA9IGxpbmVzW2pdLmxlbmd0aDtcbiAgICAgICAgaWYgKGogPT09IGkpIHtcbiAgICAgICAgICAvLyBwdXNoIHVuZGVybGluZVxuICAgICAgICAgIHZhciBwYWQgPSBzdGFydCAtIChjb3VudCAtIGxpbmVMZW5ndGgpICsgMTtcbiAgICAgICAgICB2YXIgbGVuZ3RoID0gZW5kID4gY291bnQgPyBsaW5lTGVuZ3RoIC0gcGFkIDogZW5kIC0gc3RhcnQ7XG4gICAgICAgICAgcmVzLnB1c2goXCIgICB8ICBcIiArIHJlcGVhdCQxKFwiIFwiLCBwYWQpICsgcmVwZWF0JDEoXCJeXCIsIGxlbmd0aCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGogPiBpKSB7XG4gICAgICAgICAgaWYgKGVuZCA+IGNvdW50KSB7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoJDEgPSBNYXRoLm1pbihlbmQgLSBjb3VudCwgbGluZUxlbmd0aCk7XG4gICAgICAgICAgICByZXMucHVzaChcIiAgIHwgIFwiICsgcmVwZWF0JDEoXCJeXCIsIGxlbmd0aCQxKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvdW50ICs9IGxpbmVMZW5ndGggKyAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzLmpvaW4oJ1xcbicpXG59XG5cbmZ1bmN0aW9uIHJlcGVhdCQxIChzdHIsIG4pIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAobiA+IDApIHtcbiAgICB3aGlsZSAodHJ1ZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICBpZiAobiAmIDEpIHsgcmVzdWx0ICs9IHN0cjsgfVxuICAgICAgbiA+Pj49IDE7XG4gICAgICBpZiAobiA8PSAwKSB7IGJyZWFrIH1cbiAgICAgIHN0ciArPSBzdHI7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbiAoY29kZSwgZXJyb3JzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBGdW5jdGlvbihjb2RlKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnJvcnMucHVzaCh7IGVycjogZXJyLCBjb2RlOiBjb2RlIH0pO1xuICAgIHJldHVybiBub29wXG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcGlsZVRvRnVuY3Rpb25GbiAoY29tcGlsZSkge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHJldHVybiBmdW5jdGlvbiBjb21waWxlVG9GdW5jdGlvbnMgKFxuICAgIHRlbXBsYXRlLFxuICAgIG9wdGlvbnMsXG4gICAgdm1cbiAgKSB7XG4gICAgb3B0aW9ucyA9IGV4dGVuZCh7fSwgb3B0aW9ucyk7XG4gICAgdmFyIHdhcm4kMSA9IG9wdGlvbnMud2FybiB8fCB3YXJuO1xuICAgIGRlbGV0ZSBvcHRpb25zLndhcm47XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gZGV0ZWN0IHBvc3NpYmxlIENTUCByZXN0cmljdGlvblxuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gMScpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZS50b1N0cmluZygpLm1hdGNoKC91bnNhZmUtZXZhbHxDU1AvKSkge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICdJdCBzZWVtcyB5b3UgYXJlIHVzaW5nIHRoZSBzdGFuZGFsb25lIGJ1aWxkIG9mIFZ1ZS5qcyBpbiBhbiAnICtcbiAgICAgICAgICAgICdlbnZpcm9ubWVudCB3aXRoIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IHRoYXQgcHJvaGliaXRzIHVuc2FmZS1ldmFsLiAnICtcbiAgICAgICAgICAgICdUaGUgdGVtcGxhdGUgY29tcGlsZXIgY2Fubm90IHdvcmsgaW4gdGhpcyBlbnZpcm9ubWVudC4gQ29uc2lkZXIgJyArXG4gICAgICAgICAgICAncmVsYXhpbmcgdGhlIHBvbGljeSB0byBhbGxvdyB1bnNhZmUtZXZhbCBvciBwcmUtY29tcGlsaW5nIHlvdXIgJyArXG4gICAgICAgICAgICAndGVtcGxhdGVzIGludG8gcmVuZGVyIGZ1bmN0aW9ucy4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNoZWNrIGNhY2hlXG4gICAgdmFyIGtleSA9IG9wdGlvbnMuZGVsaW1pdGVyc1xuICAgICAgPyBTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXJzKSArIHRlbXBsYXRlXG4gICAgICA6IHRlbXBsYXRlO1xuICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICByZXR1cm4gY2FjaGVba2V5XVxuICAgIH1cblxuICAgIC8vIGNvbXBpbGVcbiAgICB2YXIgY29tcGlsZWQgPSBjb21waWxlKHRlbXBsYXRlLCBvcHRpb25zKTtcblxuICAgIC8vIGNoZWNrIGNvbXBpbGF0aW9uIGVycm9ycy90aXBzXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChjb21waWxlZC5lcnJvcnMgJiYgY29tcGlsZWQuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGNvbXBpbGVkLmVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgIFwiRXJyb3IgY29tcGlsaW5nIHRlbXBsYXRlOlxcblxcblwiICsgKGUubXNnKSArIFwiXFxuXFxuXCIgK1xuICAgICAgICAgICAgICBnZW5lcmF0ZUNvZGVGcmFtZSh0ZW1wbGF0ZSwgZS5zdGFydCwgZS5lbmQpLFxuICAgICAgICAgICAgICB2bVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBcIkVycm9yIGNvbXBpbGluZyB0ZW1wbGF0ZTpcXG5cXG5cIiArIHRlbXBsYXRlICsgXCJcXG5cXG5cIiArXG4gICAgICAgICAgICBjb21waWxlZC5lcnJvcnMubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiAoXCItIFwiICsgZSk7IH0pLmpvaW4oJ1xcbicpICsgJ1xcbicsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjb21waWxlZC50aXBzICYmIGNvbXBpbGVkLnRpcHMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgY29tcGlsZWQudGlwcy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiB0aXAoZS5tc2csIHZtKTsgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29tcGlsZWQudGlwcy5mb3JFYWNoKGZ1bmN0aW9uIChtc2cpIHsgcmV0dXJuIHRpcChtc2csIHZtKTsgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB0dXJuIGNvZGUgaW50byBmdW5jdGlvbnNcbiAgICB2YXIgcmVzID0ge307XG4gICAgdmFyIGZuR2VuRXJyb3JzID0gW107XG4gICAgcmVzLnJlbmRlciA9IGNyZWF0ZUZ1bmN0aW9uKGNvbXBpbGVkLnJlbmRlciwgZm5HZW5FcnJvcnMpO1xuICAgIHJlcy5zdGF0aWNSZW5kZXJGbnMgPSBjb21waWxlZC5zdGF0aWNSZW5kZXJGbnMubWFwKGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb24oY29kZSwgZm5HZW5FcnJvcnMpXG4gICAgfSk7XG5cbiAgICAvLyBjaGVjayBmdW5jdGlvbiBnZW5lcmF0aW9uIGVycm9ycy5cbiAgICAvLyB0aGlzIHNob3VsZCBvbmx5IGhhcHBlbiBpZiB0aGVyZSBpcyBhIGJ1ZyBpbiB0aGUgY29tcGlsZXIgaXRzZWxmLlxuICAgIC8vIG1vc3RseSBmb3IgY29kZWdlbiBkZXZlbG9wbWVudCB1c2VcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCghY29tcGlsZWQuZXJyb3JzIHx8ICFjb21waWxlZC5lcnJvcnMubGVuZ3RoKSAmJiBmbkdlbkVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgd2FybiQxKFxuICAgICAgICAgIFwiRmFpbGVkIHRvIGdlbmVyYXRlIHJlbmRlciBmdW5jdGlvbjpcXG5cXG5cIiArXG4gICAgICAgICAgZm5HZW5FcnJvcnMubWFwKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgICAgIHZhciBlcnIgPSByZWYuZXJyO1xuICAgICAgICAgICAgdmFyIGNvZGUgPSByZWYuY29kZTtcblxuICAgICAgICAgICAgcmV0dXJuICgoZXJyLnRvU3RyaW5nKCkpICsgXCIgaW5cXG5cXG5cIiArIGNvZGUgKyBcIlxcblwiKTtcbiAgICAgICAgfSkuam9pbignXFxuJyksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKGNhY2hlW2tleV0gPSByZXMpXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVyQ3JlYXRvciAoYmFzZUNvbXBpbGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVyIChiYXNlT3B0aW9ucykge1xuICAgIGZ1bmN0aW9uIGNvbXBpbGUgKFxuICAgICAgdGVtcGxhdGUsXG4gICAgICBvcHRpb25zXG4gICAgKSB7XG4gICAgICB2YXIgZmluYWxPcHRpb25zID0gT2JqZWN0LmNyZWF0ZShiYXNlT3B0aW9ucyk7XG4gICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICB2YXIgdGlwcyA9IFtdO1xuXG4gICAgICB2YXIgd2FybiA9IGZ1bmN0aW9uIChtc2csIHJhbmdlLCB0aXApIHtcbiAgICAgICAgKHRpcCA/IHRpcHMgOiBlcnJvcnMpLnB1c2gobXNnKTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgICB2YXIgbGVhZGluZ1NwYWNlTGVuZ3RoID0gdGVtcGxhdGUubWF0Y2goL15cXHMqLylbMF0ubGVuZ3RoO1xuXG4gICAgICAgICAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHJhbmdlLCB0aXApIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0geyBtc2c6IG1zZyB9O1xuICAgICAgICAgICAgaWYgKHJhbmdlKSB7XG4gICAgICAgICAgICAgIGlmIChyYW5nZS5zdGFydCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5zdGFydCA9IHJhbmdlLnN0YXJ0ICsgbGVhZGluZ1NwYWNlTGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChyYW5nZS5lbmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRhdGEuZW5kID0gcmFuZ2UuZW5kICsgbGVhZGluZ1NwYWNlTGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAodGlwID8gdGlwcyA6IGVycm9ycykucHVzaChkYXRhKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIG1lcmdlIGN1c3RvbSBtb2R1bGVzXG4gICAgICAgIGlmIChvcHRpb25zLm1vZHVsZXMpIHtcbiAgICAgICAgICBmaW5hbE9wdGlvbnMubW9kdWxlcyA9XG4gICAgICAgICAgICAoYmFzZU9wdGlvbnMubW9kdWxlcyB8fCBbXSkuY29uY2F0KG9wdGlvbnMubW9kdWxlcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWVyZ2UgY3VzdG9tIGRpcmVjdGl2ZXNcbiAgICAgICAgaWYgKG9wdGlvbnMuZGlyZWN0aXZlcykge1xuICAgICAgICAgIGZpbmFsT3B0aW9ucy5kaXJlY3RpdmVzID0gZXh0ZW5kKFxuICAgICAgICAgICAgT2JqZWN0LmNyZWF0ZShiYXNlT3B0aW9ucy5kaXJlY3RpdmVzIHx8IG51bGwpLFxuICAgICAgICAgICAgb3B0aW9ucy5kaXJlY3RpdmVzXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb3B5IG90aGVyIG9wdGlvbnNcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAoa2V5ICE9PSAnbW9kdWxlcycgJiYga2V5ICE9PSAnZGlyZWN0aXZlcycpIHtcbiAgICAgICAgICAgIGZpbmFsT3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmaW5hbE9wdGlvbnMud2FybiA9IHdhcm47XG5cbiAgICAgIHZhciBjb21waWxlZCA9IGJhc2VDb21waWxlKHRlbXBsYXRlLnRyaW0oKSwgZmluYWxPcHRpb25zKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRldGVjdEVycm9ycyhjb21waWxlZC5hc3QsIHdhcm4pO1xuICAgICAgfVxuICAgICAgY29tcGlsZWQuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgY29tcGlsZWQudGlwcyA9IHRpcHM7XG4gICAgICByZXR1cm4gY29tcGlsZWRcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgY29tcGlsZTogY29tcGlsZSxcbiAgICAgIGNvbXBpbGVUb0Z1bmN0aW9uczogY3JlYXRlQ29tcGlsZVRvRnVuY3Rpb25Gbihjb21waWxlKVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gYGNyZWF0ZUNvbXBpbGVyQ3JlYXRvcmAgYWxsb3dzIGNyZWF0aW5nIGNvbXBpbGVycyB0aGF0IHVzZSBhbHRlcm5hdGl2ZVxuLy8gcGFyc2VyL29wdGltaXplci9jb2RlZ2VuLCBlLmcgdGhlIFNTUiBvcHRpbWl6aW5nIGNvbXBpbGVyLlxuLy8gSGVyZSB3ZSBqdXN0IGV4cG9ydCBhIGRlZmF1bHQgY29tcGlsZXIgdXNpbmcgdGhlIGRlZmF1bHQgcGFydHMuXG52YXIgY3JlYXRlQ29tcGlsZXIgPSBjcmVhdGVDb21waWxlckNyZWF0b3IoZnVuY3Rpb24gYmFzZUNvbXBpbGUgKFxuICB0ZW1wbGF0ZSxcbiAgb3B0aW9uc1xuKSB7XG4gIHZhciBhc3QgPSBwYXJzZSh0ZW1wbGF0ZS50cmltKCksIG9wdGlvbnMpO1xuICBpZiAob3B0aW9ucy5vcHRpbWl6ZSAhPT0gZmFsc2UpIHtcbiAgICBvcHRpbWl6ZShhc3QsIG9wdGlvbnMpO1xuICB9XG4gIHZhciBjb2RlID0gZ2VuZXJhdGUoYXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICBhc3Q6IGFzdCxcbiAgICByZW5kZXI6IGNvZGUucmVuZGVyLFxuICAgIHN0YXRpY1JlbmRlckZuczogY29kZS5zdGF0aWNSZW5kZXJGbnNcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybU5vZGUoZWwsIG9wdGlvbnMpIHtcbiAgdmFyIHdhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIHZhciBzdGF0aWNDbGFzcyA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdjbGFzcycpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdGF0aWNDbGFzcykge1xuICAgIHZhciBleHByZXNzaW9uID0gcGFyc2VUZXh0KHN0YXRpY0NsYXNzLCBvcHRpb25zLmRlbGltaXRlcnMpO1xuICAgIGlmIChleHByZXNzaW9uKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcImNsYXNzPVxcXCJcIiArIHN0YXRpY0NsYXNzICsgXCJcXFwiOiBcIiArXG4gICAgICAgICAgJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gcmVtb3ZlZC4gJyArXG4gICAgICAgICAgJ1VzZSB2LWJpbmQgb3IgdGhlIGNvbG9uIHNob3J0aGFuZCBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgJyArXG4gICAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBjbGFzcz1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOmNsYXNzPVwidmFsXCI+LidcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGlmIChzdGF0aWNDbGFzcykge1xuICAgIGVsLnN0YXRpY0NsYXNzID0gSlNPTi5zdHJpbmdpZnkoc3RhdGljQ2xhc3MpO1xuICB9XG4gIHZhciBjbGFzc0JpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2NsYXNzJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgaWYgKGNsYXNzQmluZGluZykge1xuICAgIGVsLmNsYXNzQmluZGluZyA9IGNsYXNzQmluZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5EYXRhJDEoZWwpIHtcbiAgdmFyIGRhdGEgPSAnJztcbiAgaWYgKGVsLnN0YXRpY0NsYXNzKSB7XG4gICAgZGF0YSArPSBcInN0YXRpY0NsYXNzOlwiICsgKGVsLnN0YXRpY0NsYXNzKSArIFwiLFwiO1xuICB9XG4gIGlmIChlbC5jbGFzc0JpbmRpbmcpIHtcbiAgICBkYXRhICs9IFwiY2xhc3M6XCIgKyAoZWwuY2xhc3NCaW5kaW5nKSArIFwiLFwiO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbnZhciBjbGFzc18kMSA9IHtcbiAgc3RhdGljS2V5czogWydzdGF0aWNDbGFzcyddLFxuICB0cmFuc2Zvcm1Ob2RlOiB0cmFuc2Zvcm1Ob2RlLFxuICBnZW5EYXRhOiBnZW5EYXRhJDFcbn07XG5cbnZhciBub3JtYWxpemUkMSA9IGNhY2hlZChjYW1lbGl6ZSk7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybU5vZGUkMShlbCwgb3B0aW9ucykge1xuICB2YXIgd2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgdmFyIHN0YXRpY1N0eWxlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3N0eWxlJyk7XG4gIHZhciByZWYgPSBwYXJzZVN0YXRpY1N0eWxlKHN0YXRpY1N0eWxlLCBvcHRpb25zKTtcbiAgdmFyIGR5bmFtaWMgPSByZWYuZHluYW1pYztcbiAgdmFyIHN0eWxlUmVzdWx0ID0gcmVmLnN0eWxlUmVzdWx0O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkeW5hbWljKSB7XG4gICAgd2FybihcbiAgICAgIFwic3R5bGU9XFxcIlwiICsgKFN0cmluZyhzdGF0aWNTdHlsZSkpICsgXCJcXFwiOiBcIiArXG4gICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIGRlcHJlY2F0ZWQuICcgK1xuICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuJ1xuICAgICk7XG4gIH1cbiAgaWYgKCFkeW5hbWljICYmIHN0eWxlUmVzdWx0KSB7XG4gICAgZWwuc3RhdGljU3R5bGUgPSBzdHlsZVJlc3VsdDtcbiAgfVxuICB2YXIgc3R5bGVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdzdHlsZScsIGZhbHNlIC8qIGdldFN0YXRpYyAqLyk7XG4gIGlmIChzdHlsZUJpbmRpbmcpIHtcbiAgICBlbC5zdHlsZUJpbmRpbmcgPSBzdHlsZUJpbmRpbmc7XG4gIH0gZWxzZSBpZiAoZHluYW1pYykge1xuICAgIGVsLnN0eWxlQmluZGluZyA9IHN0eWxlUmVzdWx0O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEkMihlbCkge1xuICB2YXIgZGF0YSA9ICcnO1xuICBpZiAoZWwuc3RhdGljU3R5bGUpIHtcbiAgICBkYXRhICs9IFwic3RhdGljU3R5bGU6XCIgKyAoZWwuc3RhdGljU3R5bGUpICsgXCIsXCI7XG4gIH1cbiAgaWYgKGVsLnN0eWxlQmluZGluZykge1xuICAgIGRhdGEgKz0gXCJzdHlsZTpcIiArIChlbC5zdHlsZUJpbmRpbmcpICsgXCIsXCI7XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gcGFyc2VTdGF0aWNTdHlsZShzdGF0aWNTdHlsZSwgb3B0aW9ucykge1xuICAvLyBcIndpZHRoOiAyMDBweDsgaGVpZ2h0OiAyMDBweDtcIiAtPiB7d2lkdGg6IDIwMCwgaGVpZ2h0OiAyMDB9XG4gIC8vIFwid2lkdGg6IDIwMHB4OyBoZWlnaHQ6IHt7eX19XCIgLT4ge3dpZHRoOiAyMDAsIGhlaWdodDogeX1cbiAgdmFyIGR5bmFtaWMgPSBmYWxzZTtcbiAgdmFyIHN0eWxlUmVzdWx0ID0gJyc7XG4gIGlmIChzdGF0aWNTdHlsZSkge1xuICAgIHZhciBzdHlsZUxpc3QgPSBzdGF0aWNTdHlsZVxuICAgICAgLnRyaW0oKVxuICAgICAgLnNwbGl0KCc7JylcbiAgICAgIC5tYXAoZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBzdHlsZS50cmltKCkuc3BsaXQoJzonKTtcbiAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICB2YXIga2V5ID0gbm9ybWFsaXplJDEocmVzdWx0WzBdLnRyaW0oKSk7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdFsxXS50cmltKCk7XG4gICAgICAgIHZhciBkeW5hbWljVmFsdWUgPSBwYXJzZVRleHQodmFsdWUsIG9wdGlvbnMuZGVsaW1pdGVycyk7XG4gICAgICAgIGlmIChkeW5hbWljVmFsdWUpIHtcbiAgICAgICAgICBkeW5hbWljID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4ga2V5ICsgJzonICsgZHluYW1pY1ZhbHVlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleSArICc6JyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKVxuICAgICAgfSlcbiAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHJlc3VsdCkgeyByZXR1cm4gcmVzdWx0OyB9KTtcbiAgICBpZiAoc3R5bGVMaXN0Lmxlbmd0aCkge1xuICAgICAgc3R5bGVSZXN1bHQgPSAneycgKyBzdHlsZUxpc3Quam9pbignLCcpICsgJ30nO1xuICAgIH1cbiAgfVxuICByZXR1cm4geyBkeW5hbWljOiBkeW5hbWljLCBzdHlsZVJlc3VsdDogc3R5bGVSZXN1bHQgfVxufVxuXG52YXIgc3R5bGUkMSA9IHtcbiAgc3RhdGljS2V5czogWydzdGF0aWNTdHlsZSddLFxuICB0cmFuc2Zvcm1Ob2RlOiB0cmFuc2Zvcm1Ob2RlJDEsXG4gIGdlbkRhdGE6IGdlbkRhdGEkMlxufTtcblxuZnVuY3Rpb24gcHJlVHJhbnNmb3JtTm9kZShlbCkge1xuICB2YXIgdmZvcjtcblxuICBpZiAobm9ybWFsaXplRWxlbWVudE5hbWUoZWwudGFnKSA9PT0gJ25hdGl2ZWxpc3R2aWV3Jykge1xuICAgIHZmb3IgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1mb3InKTtcbiAgICBkZWxldGUgZWwuYXR0cnNNYXBbJ3YtZm9yJ107XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdmZvcikge1xuICAgICAgd2FybihcbiAgICAgICAgXCJUaGUgdi1mb3IgZGlyZWN0aXZlIGlzIG5vdCBzdXBwb3J0ZWQgb24gYSBcIiArIChlbC50YWcpICsgXCIsIFwiICtcbiAgICAgICAgICAnVXNlIHRoZSBcImZvclwiIGF0dHJpYnV0ZSBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZiAnICtcbiAgICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1mb3I9XFxcIlwiICsgdmZvciArIFwiXFxcIj4gdXNlIDxcIiArIChlbC50YWcpICsgXCIgZm9yPVxcXCJcIiArIHZmb3IgKyBcIlxcXCI+LlwiXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHZhciBleHAgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnZm9yJykgfHwgdmZvcjtcbiAgaWYgKCFleHApIHsgcmV0dXJuIH1cblxuICB2YXIgcmVzID0gcGFyc2VGb3IoZXhwKTtcbiAgaWYgKCFyZXMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybigoXCJJbnZhbGlkIGZvciBleHByZXNzaW9uOiBcIiArIGV4cCkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIGFkZFJhd0F0dHIoZWwsICc6aXRlbXMnLCByZXMuZm9yKTtcbiAgYWRkUmF3QXR0cihlbCwgJythbGlhcycsIHJlcy5hbGlhcyk7XG5cbiAgaWYgKHJlcy5pdGVyYXRvcjEpIHtcbiAgICBhZGRSYXdBdHRyKGVsLCAnK2luZGV4JywgcmVzLml0ZXJhdG9yMSk7XG4gIH1cbn1cblxudmFyIGZvcl8gPSB7XG4gIHByZVRyYW5zZm9ybU5vZGU6IHByZVRyYW5zZm9ybU5vZGVcbn07XG5cbmZ1bmN0aW9uIHByZVRyYW5zZm9ybU5vZGUkMShlbCkge1xuICBpZiAoZWwudGFnICE9PSAncm91dGVyLXZpZXcnKSB7IHJldHVybiB9XG4gIGlmIChub3JtYWxpemVFbGVtZW50TmFtZShlbC5wYXJlbnQudGFnKSA9PT0gJ25hdGl2ZWZyYW1lJykge1xuICAgIGFkZEF0dHIoZWwucGFyZW50LCAnaGFzUm91dGVyVmlldycsICd0cnVlJyk7XG4gIH1cbn1cblxudmFyIHJvdXRlciA9IHtcbiAgcHJlVHJhbnNmb3JtTm9kZTogcHJlVHJhbnNmb3JtTm9kZSQxXG59O1xuXG5mdW5jdGlvbiBwcmVUcmFuc2Zvcm1Ob2RlJDIoZWwpIHtcbiAgaWYgKGVsLnBhcmVudCAmJiBlbC5wYXJlbnQudGFnID09PSAndi10ZW1wbGF0ZScpIHtcbiAgICB2YXIgYWxpYXMgPSBlbC5wYXJlbnQucGFyZW50LmF0dHJzTWFwWycrYWxpYXMnXSB8fCAnaXRlbSc7XG4gICAgdmFyIGluZGV4ID0gZWwucGFyZW50LnBhcmVudC5hdHRyc01hcFsnK2luZGV4J10gfHwgJyRpbmRleCc7XG4gICAgZWwuc2xvdFNjb3BlID0gYnVpbGRTY29wZVN0cmluZyhhbGlhcywgaW5kZXgpO1xuICB9XG59XG5cbnZhciB2VGVtcGxhdGUkMSA9IHtcbiAgcHJlVHJhbnNmb3JtTm9kZTogcHJlVHJhbnNmb3JtTm9kZSQyXG59O1xuXG5mdW5jdGlvbiBidWlsZFNjb3BlU3RyaW5nKGFsaWFzLCBpbmRleCkge1xuICByZXR1cm4gKFwieyBcIiArIGFsaWFzICsgXCIsIFwiICsgaW5kZXggKyBcIiwgJGV2ZW4sICRvZGQgfVwiKVxufVxuXG4vLyB0cmFuc2Zvcm1zIH50ZXN0IC0+IHYtdmlldzp0ZXN0XG5mdW5jdGlvbiB0cmFuc2Zvcm1Ob2RlJDIoZWwpIHtcbiAgdmFyIGF0dHIgPSBPYmplY3Qua2V5cyhlbC5hdHRyc01hcCkuZmluZChmdW5jdGlvbiAoYXR0cikgeyByZXR1cm4gYXR0ci5zdGFydHNXaXRoKCd+Jyk7IH0pO1xuXG4gIGlmIChhdHRyKSB7XG4gICAgdmFyIGF0dHJOYW1lID0gYXR0ci5zdWJzdHIoMSk7XG4gICAgdmFyIHJlZiA9IGF0dHJOYW1lLnNwbGl0KCcuJyk7XG4gICAgdmFyIGFyZyA9IHJlZlswXTtcbiAgICB2YXIgbW9kaWZpZXJzID0gcmVmLnNsaWNlKDEpO1xuICAgIG1vZGlmaWVycyA9IG1vZGlmaWVycy5yZWR1Y2UoZnVuY3Rpb24gKG1vZHMsIG1vZCkge1xuICAgICAgbW9kc1ttb2RdID0gdHJ1ZTtcbiAgICAgIHJldHVybiBtb2RzXG4gICAgfSwge30pO1xuICAgIGdldEFuZFJlbW92ZUF0dHIoZWwsIGF0dHIsIHRydWUpO1xuICAgIGFkZERpcmVjdGl2ZShlbCwgJ3ZpZXcnLCAoXCJ2LXZpZXc6XCIgKyBhdHRyTmFtZSksICcnLCBhcmcsIGZhbHNlLCBtb2RpZmllcnMpO1xuICB9XG59XG5cbnZhciB2aWV3ID0ge1xuICB0cmFuc2Zvcm1Ob2RlOiB0cmFuc2Zvcm1Ob2RlJDJcbn07XG5cbnZhciBtb2R1bGVzJDEgPSBbY2xhc3NfJDEsIHN0eWxlJDEsIHZUZW1wbGF0ZSQxLCBmb3JfLCByb3V0ZXIsIHZpZXddO1xuXG5mdW5jdGlvbiBtb2RlbChlbCwgZGlyKSB7XG4gIGlmIChlbC50eXBlID09PSAxICYmIGlzS25vd25WaWV3KGVsLnRhZykpIHtcbiAgICBnZW5EZWZhdWx0TW9kZWwoZWwsIGRpci52YWx1ZSwgZGlyLm1vZGlmaWVycyk7XG4gIH0gZWxzZSB7XG4gICAgZ2VuQ29tcG9uZW50TW9kZWwoZWwsIGRpci52YWx1ZSwgZGlyLm1vZGlmaWVycyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRGVmYXVsdE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKSB7XG4gIHZhciByZWYgPSBtb2RpZmllcnMgfHwge307XG4gIHZhciB0cmltID0gcmVmLnRyaW07XG4gIHZhciBudW1iZXIgPSByZWYubnVtYmVyO1xuICB2YXIgcmVmJDEgPSBnZXRWaWV3TWV0YShlbC50YWcpLm1vZGVsO1xuICB2YXIgcHJvcCA9IHJlZiQxLnByb3A7XG4gIHZhciBldmVudCA9IHJlZiQxLmV2ZW50O1xuXG4gIHZhciB2YWx1ZUV4cHJlc3Npb24gPSBcIiRldmVudC52YWx1ZVwiICsgKHRyaW0gPyAnLnRyaW0oKScgOiAnJyk7XG5cbiAgaWYgKG51bWJlcikge1xuICAgIHZhbHVlRXhwcmVzc2lvbiA9IFwiX24oXCIgKyB2YWx1ZUV4cHJlc3Npb24gKyBcIilcIjtcbiAgfVxuXG4gIHZhciBjb2RlID0gZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlRXhwcmVzc2lvbik7XG5cbiAgYWRkQXR0cihlbCwgcHJvcCwgKFwiKFwiICsgdmFsdWUgKyBcIilcIikpO1xuICBhZGRIYW5kbGVyKGVsLCBldmVudCwgY29kZSwgbnVsbCwgdHJ1ZSk7XG59XG5cbnZhciBkaXJlY3RpdmVzJDEgPSB7XG4gIG1vZGVsOiBtb2RlbFxufTtcblxudmFyIGJhc2VPcHRpb25zID0ge1xuICBtb2R1bGVzOiBtb2R1bGVzJDEsXG4gIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMkMSxcbiAgaXNVbmFyeVRhZzogaXNVbmFyeVRhZyxcbiAgbXVzdFVzZVByb3A6IG11c3RVc2VQcm9wLFxuICBjYW5CZUxlZnRPcGVuVGFnOiBjYW5CZUxlZnRPcGVuVGFnLFxuICBpc1Jlc2VydmVkVGFnOiBpc1Jlc2VydmVkVGFnLFxuICBnZXRUYWdOYW1lc3BhY2U6IGdldFRhZ05hbWVzcGFjZSxcbiAgcHJlc2VydmVXaGl0ZXNwYWNlOiBmYWxzZSxcbiAgc3RhdGljS2V5czogZ2VuU3RhdGljS2V5cyhtb2R1bGVzJDEpXG59O1xuXG52YXIgcmVmJDEgPSBjcmVhdGVDb21waWxlcihiYXNlT3B0aW9ucyk7XG52YXIgY29tcGlsZVRvRnVuY3Rpb25zID0gcmVmJDEuY29tcGlsZVRvRnVuY3Rpb25zO1xuXG5mdW5jdGlvbiBWdWUgKG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAhKHRoaXMgaW5zdGFuY2VvZiBWdWUpXG4gICkge1xuICAgIHdhcm4oJ1Z1ZSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGBuZXdgIGtleXdvcmQnKTtcbiAgfVxuICB0aGlzLl9pbml0KG9wdGlvbnMpO1xufVxuXG5pbml0TWl4aW4oVnVlKTtcbnN0YXRlTWl4aW4oVnVlKTtcbmV2ZW50c01peGluKFZ1ZSk7XG5saWZlY3ljbGVNaXhpbihWdWUpO1xucmVuZGVyTWl4aW4oVnVlKTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRVc2UgKFZ1ZSkge1xuICBWdWUudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHZhciBpbnN0YWxsZWRQbHVnaW5zID0gKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgfHwgKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgPSBbXSkpO1xuICAgIGlmIChpbnN0YWxsZWRQbHVnaW5zLmluZGV4T2YocGx1Z2luKSA+IC0xKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8vIGFkZGl0aW9uYWwgcGFyYW1ldGVyc1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICBpZiAodHlwZW9mIHBsdWdpbi5pbnN0YWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgICBpbnN0YWxsZWRQbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdE1peGluJDEgKFZ1ZSkge1xuICBWdWUubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zLCBtaXhpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFeHRlbmQgKFZ1ZSkge1xuICAvKipcbiAgICogRWFjaCBpbnN0YW5jZSBjb25zdHJ1Y3RvciwgaW5jbHVkaW5nIFZ1ZSwgaGFzIGEgdW5pcXVlXG4gICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkIFwiY2hpbGRcbiAgICogY29uc3RydWN0b3JzXCIgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UgYW5kIGNhY2hlIHRoZW0uXG4gICAqL1xuICBWdWUuY2lkID0gMDtcbiAgdmFyIGNpZCA9IDE7XG5cbiAgLyoqXG4gICAqIENsYXNzIGluaGVyaXRhbmNlXG4gICAqL1xuICBWdWUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuZE9wdGlvbnMpIHtcbiAgICBleHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgU3VwZXIgPSB0aGlzO1xuICAgIHZhciBTdXBlcklkID0gU3VwZXIuY2lkO1xuICAgIHZhciBjYWNoZWRDdG9ycyA9IGV4dGVuZE9wdGlvbnMuX0N0b3IgfHwgKGV4dGVuZE9wdGlvbnMuX0N0b3IgPSB7fSk7XG4gICAgaWYgKGNhY2hlZEN0b3JzW1N1cGVySWRdKSB7XG4gICAgICByZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF1cbiAgICB9XG5cbiAgICB2YXIgbmFtZSA9IGV4dGVuZE9wdGlvbnMubmFtZSB8fCBTdXBlci5vcHRpb25zLm5hbWU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgbmFtZSkge1xuICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBTdWIgPSBmdW5jdGlvbiBWdWVDb21wb25lbnQgKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XG4gICAgfTtcbiAgICBTdWIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpO1xuICAgIFN1Yi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdWI7XG4gICAgU3ViLmNpZCA9IGNpZCsrO1xuICAgIFN1Yi5vcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgU3VwZXIub3B0aW9ucyxcbiAgICAgIGV4dGVuZE9wdGlvbnNcbiAgICApO1xuICAgIFN1Ylsnc3VwZXInXSA9IFN1cGVyO1xuXG4gICAgLy8gRm9yIHByb3BzIGFuZCBjb21wdXRlZCBwcm9wZXJ0aWVzLCB3ZSBkZWZpbmUgdGhlIHByb3h5IGdldHRlcnMgb25cbiAgICAvLyB0aGUgVnVlIGluc3RhbmNlcyBhdCBleHRlbnNpb24gdGltZSwgb24gdGhlIGV4dGVuZGVkIHByb3RvdHlwZS4gVGhpc1xuICAgIC8vIGF2b2lkcyBPYmplY3QuZGVmaW5lUHJvcGVydHkgY2FsbHMgZm9yIGVhY2ggaW5zdGFuY2UgY3JlYXRlZC5cbiAgICBpZiAoU3ViLm9wdGlvbnMucHJvcHMpIHtcbiAgICAgIGluaXRQcm9wcyQxKFN1Yik7XG4gICAgfVxuICAgIGlmIChTdWIub3B0aW9ucy5jb21wdXRlZCkge1xuICAgICAgaW5pdENvbXB1dGVkJDEoU3ViKTtcbiAgICB9XG5cbiAgICAvLyBhbGxvdyBmdXJ0aGVyIGV4dGVuc2lvbi9taXhpbi9wbHVnaW4gdXNhZ2VcbiAgICBTdWIuZXh0ZW5kID0gU3VwZXIuZXh0ZW5kO1xuICAgIFN1Yi5taXhpbiA9IFN1cGVyLm1peGluO1xuICAgIFN1Yi51c2UgPSBTdXBlci51c2U7XG5cbiAgICAvLyBjcmVhdGUgYXNzZXQgcmVnaXN0ZXJzLCBzbyBleHRlbmRlZCBjbGFzc2VzXG4gICAgLy8gY2FuIGhhdmUgdGhlaXIgcHJpdmF0ZSBhc3NldHMgdG9vLlxuICAgIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIFN1Ylt0eXBlXSA9IFN1cGVyW3R5cGVdO1xuICAgIH0pO1xuICAgIC8vIGVuYWJsZSByZWN1cnNpdmUgc2VsZi1sb29rdXBcbiAgICBpZiAobmFtZSkge1xuICAgICAgU3ViLm9wdGlvbnMuY29tcG9uZW50c1tuYW1lXSA9IFN1YjtcbiAgICB9XG5cbiAgICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBzdXBlciBvcHRpb25zIGF0IGV4dGVuc2lvbiB0aW1lLlxuICAgIC8vIGxhdGVyIGF0IGluc3RhbnRpYXRpb24gd2UgY2FuIGNoZWNrIGlmIFN1cGVyJ3Mgb3B0aW9ucyBoYXZlXG4gICAgLy8gYmVlbiB1cGRhdGVkLlxuICAgIFN1Yi5zdXBlck9wdGlvbnMgPSBTdXBlci5vcHRpb25zO1xuICAgIFN1Yi5leHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucztcbiAgICBTdWIuc2VhbGVkT3B0aW9ucyA9IGV4dGVuZCh7fSwgU3ViLm9wdGlvbnMpO1xuXG4gICAgLy8gY2FjaGUgY29uc3RydWN0b3JcbiAgICBjYWNoZWRDdG9yc1tTdXBlcklkXSA9IFN1YjtcbiAgICByZXR1cm4gU3ViXG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyQxIChDb21wKSB7XG4gIHZhciBwcm9wcyA9IENvbXAub3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgcHJveHkoQ29tcC5wcm90b3R5cGUsIFwiX3Byb3BzXCIsIGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkJDEgKENvbXApIHtcbiAgdmFyIGNvbXB1dGVkID0gQ29tcC5vcHRpb25zLmNvbXB1dGVkO1xuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICBkZWZpbmVDb21wdXRlZChDb21wLnByb3RvdHlwZSwga2V5LCBjb21wdXRlZFtrZXldKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEFzc2V0UmVnaXN0ZXJzIChWdWUpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhc3NldCByZWdpc3RyYXRpb24gbWV0aG9kcy5cbiAgICovXG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWVbdHlwZV0gPSBmdW5jdGlvbiAoXG4gICAgICBpZCxcbiAgICAgIGRlZmluaXRpb25cbiAgICApIHtcbiAgICAgIGlmICghZGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGUgPT09ICdjb21wb25lbnQnKSB7XG4gICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbXBvbmVudCcgJiYgaXNQbGFpbk9iamVjdChkZWZpbml0aW9uKSkge1xuICAgICAgICAgIGRlZmluaXRpb24ubmFtZSA9IGRlZmluaXRpb24ubmFtZSB8fCBpZDtcbiAgICAgICAgICBkZWZpbml0aW9uID0gdGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2RpcmVjdGl2ZScgJiYgdHlwZW9mIGRlZmluaXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBkZWZpbml0aW9uID0geyBiaW5kOiBkZWZpbml0aW9uLCB1cGRhdGU6IGRlZmluaXRpb24gfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lIChvcHRzKSB7XG4gIHJldHVybiBvcHRzICYmIChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnKVxufVxuXG5mdW5jdGlvbiBtYXRjaGVzIChwYXR0ZXJuLCBuYW1lKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQoJywnKS5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmIChpc1JlZ0V4cCQxKHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4udGVzdChuYW1lKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBwcnVuZUNhY2hlIChrZWVwQWxpdmVJbnN0YW5jZSwgZmlsdGVyKSB7XG4gIHZhciBjYWNoZSA9IGtlZXBBbGl2ZUluc3RhbmNlLmNhY2hlO1xuICB2YXIga2V5cyA9IGtlZXBBbGl2ZUluc3RhbmNlLmtleXM7XG4gIHZhciBfdm5vZGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5fdm5vZGU7XG4gIGZvciAodmFyIGtleSBpbiBjYWNoZSkge1xuICAgIHZhciBjYWNoZWROb2RlID0gY2FjaGVba2V5XTtcbiAgICBpZiAoY2FjaGVkTm9kZSkge1xuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNhY2hlZE5vZGUuY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICBpZiAobmFtZSAmJiAhZmlsdGVyKG5hbWUpKSB7XG4gICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5LCBrZXlzLCBfdm5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcnVuZUNhY2hlRW50cnkgKFxuICBjYWNoZSxcbiAga2V5LFxuICBrZXlzLFxuICBjdXJyZW50XG4pIHtcbiAgdmFyIGNhY2hlZCA9IGNhY2hlW2tleV07XG4gIGlmIChjYWNoZWQgJiYgKCFjdXJyZW50IHx8IGNhY2hlZC50YWcgIT09IGN1cnJlbnQudGFnKSkge1xuICAgIGNhY2hlZC5jb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICB9XG4gIGNhY2hlW2tleV0gPSBudWxsO1xuICByZW1vdmUoa2V5cywga2V5KTtcbn1cblxudmFyIHBhdHRlcm5UeXBlcyA9IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldO1xuXG52YXIgS2VlcEFsaXZlID0ge1xuICBuYW1lOiAna2VlcC1hbGl2ZScsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHByb3BzOiB7XG4gICAgaW5jbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIGV4Y2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBtYXg6IFtTdHJpbmcsIE51bWJlcl1cbiAgfSxcblxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkICgpIHtcbiAgICB0aGlzLmNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLmtleXMgPSBbXTtcbiAgfSxcblxuICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCAoKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuY2FjaGUpIHtcbiAgICAgIHBydW5lQ2FjaGVFbnRyeSh0aGlzLmNhY2hlLCBrZXksIHRoaXMua2V5cyk7XG4gICAgfVxuICB9LFxuXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdGhpcy4kd2F0Y2goJ2luY2x1ZGUnLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBwcnVuZUNhY2hlKHRoaXMkMSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIG1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gICAgdGhpcy4kd2F0Y2goJ2V4Y2x1ZGUnLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBwcnVuZUNhY2hlKHRoaXMkMSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuICFtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyICgpIHtcbiAgICB2YXIgc2xvdCA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgdmFyIHZub2RlID0gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChzbG90KTtcbiAgICB2YXIgY29tcG9uZW50T3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgaWYgKGNvbXBvbmVudE9wdGlvbnMpIHtcbiAgICAgIC8vIGNoZWNrIHBhdHRlcm5cbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnRPcHRpb25zKTtcbiAgICAgIHZhciByZWYgPSB0aGlzO1xuICAgICAgdmFyIGluY2x1ZGUgPSByZWYuaW5jbHVkZTtcbiAgICAgIHZhciBleGNsdWRlID0gcmVmLmV4Y2x1ZGU7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vdCBpbmNsdWRlZFxuICAgICAgICAoaW5jbHVkZSAmJiAoIW5hbWUgfHwgIW1hdGNoZXMoaW5jbHVkZSwgbmFtZSkpKSB8fFxuICAgICAgICAvLyBleGNsdWRlZFxuICAgICAgICAoZXhjbHVkZSAmJiBuYW1lICYmIG1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHZub2RlXG4gICAgICB9XG5cbiAgICAgIHZhciByZWYkMSA9IHRoaXM7XG4gICAgICB2YXIgY2FjaGUgPSByZWYkMS5jYWNoZTtcbiAgICAgIHZhciBrZXlzID0gcmVmJDEua2V5cztcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbFxuICAgICAgICAvLyBzYW1lIGNvbnN0cnVjdG9yIG1heSBnZXQgcmVnaXN0ZXJlZCBhcyBkaWZmZXJlbnQgbG9jYWwgY29tcG9uZW50c1xuICAgICAgICAvLyBzbyBjaWQgYWxvbmUgaXMgbm90IGVub3VnaCAoIzMyNjkpXG4gICAgICAgID8gY29tcG9uZW50T3B0aW9ucy5DdG9yLmNpZCArIChjb21wb25lbnRPcHRpb25zLnRhZyA/IChcIjo6XCIgKyAoY29tcG9uZW50T3B0aW9ucy50YWcpKSA6ICcnKVxuICAgICAgICA6IHZub2RlLmtleTtcbiAgICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY2FjaGVba2V5XS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgICAgLy8gbWFrZSBjdXJyZW50IGtleSBmcmVzaGVzdFxuICAgICAgICByZW1vdmUoa2V5cywga2V5KTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWNoZVtrZXldID0gdm5vZGU7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICAvLyBwcnVuZSBvbGRlc3QgZW50cnlcbiAgICAgICAgaWYgKHRoaXMubWF4ICYmIGtleXMubGVuZ3RoID4gcGFyc2VJbnQodGhpcy5tYXgpKSB7XG4gICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXlzWzBdLCBrZXlzLCB0aGlzLl92bm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmUgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGUgfHwgKHNsb3QgJiYgc2xvdFswXSlcbiAgfVxufTtcblxudmFyIGJ1aWx0SW5Db21wb25lbnRzID0ge1xuICBLZWVwQWxpdmU6IEtlZXBBbGl2ZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRHbG9iYWxBUEkgKFZ1ZSkge1xuICAvLyBjb25maWdcbiAgdmFyIGNvbmZpZ0RlZiA9IHt9O1xuICBjb25maWdEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uZmlnOyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbmZpZ0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnRG8gbm90IHJlcGxhY2UgdGhlIFZ1ZS5jb25maWcgb2JqZWN0LCBzZXQgaW5kaXZpZHVhbCBmaWVsZHMgaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ2NvbmZpZycsIGNvbmZpZ0RlZik7XG5cbiAgLy8gZXhwb3NlZCB1dGlsIG1ldGhvZHMuXG4gIC8vIE5PVEU6IHRoZXNlIGFyZSBub3QgY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJIC0gYXZvaWQgcmVseWluZyBvblxuICAvLyB0aGVtIHVubGVzcyB5b3UgYXJlIGF3YXJlIG9mIHRoZSByaXNrLlxuICBWdWUudXRpbCA9IHtcbiAgICB3YXJuOiB3YXJuLFxuICAgIGV4dGVuZDogZXh0ZW5kLFxuICAgIG1lcmdlT3B0aW9uczogbWVyZ2VPcHRpb25zLFxuICAgIGRlZmluZVJlYWN0aXZlOiBkZWZpbmVSZWFjdGl2ZVxuICB9O1xuXG4gIFZ1ZS5zZXQgPSBzZXQ7XG4gIFZ1ZS5kZWxldGUgPSBkZWw7XG4gIFZ1ZS5uZXh0VGljayA9IG5leHRUaWNrO1xuXG4gIC8vIDIuNiBleHBsaWNpdCBvYnNlcnZhYmxlIEFQSVxuICBWdWUub2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICBvYnNlcnZlKG9iaik7XG4gICAgcmV0dXJuIG9ialxuICB9O1xuXG4gIFZ1ZS5vcHRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZS5vcHRpb25zW3R5cGUgKyAncyddID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfSk7XG5cbiAgLy8gdGhpcyBpcyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBcImJhc2VcIiBjb25zdHJ1Y3RvciB0byBleHRlbmQgYWxsIHBsYWluLW9iamVjdFxuICAvLyBjb21wb25lbnRzIHdpdGggaW4gV2VleCdzIG11bHRpLWluc3RhbmNlIHNjZW5hcmlvcy5cbiAgVnVlLm9wdGlvbnMuX2Jhc2UgPSBWdWU7XG5cbiAgZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIGJ1aWx0SW5Db21wb25lbnRzKTtcblxuICBpbml0VXNlKFZ1ZSk7XG4gIGluaXRNaXhpbiQxKFZ1ZSk7XG4gIGluaXRFeHRlbmQoVnVlKTtcbiAgaW5pdEFzc2V0UmVnaXN0ZXJzKFZ1ZSk7XG59XG5cbmluaXRHbG9iYWxBUEkoVnVlKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckaXNTZXJ2ZXInLCB7XG4gIGdldDogaXNTZXJ2ZXJSZW5kZXJpbmdcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRzc3JDb250ZXh0Jywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gdGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dFxuICB9XG59KTtcblxuLy8gZXhwb3NlIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IGZvciBzc3IgcnVudGltZSBoZWxwZXIgaW5zdGFsbGF0aW9uXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnRnVuY3Rpb25hbFJlbmRlckNvbnRleHQnLCB7XG4gIHZhbHVlOiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dFxufSk7XG5cblZ1ZS52ZXJzaW9uID0gJzIuNi4xMCc7XG5cbi8vIHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgcG9zc2libGUgdHJhbnNpdGlvbiBkZWZpbmVkIGluc2lkZSB0aGUgY29tcG9uZW50IHJvb3RcbmZ1bmN0aW9uIGxvY2F0ZU5vZGUodm5vZGUpIHtcbiAgcmV0dXJuIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmICghdm5vZGUuZGF0YSB8fCAhdm5vZGUuZGF0YS50cmFuc2l0aW9uKVxuICAgID8gbG9jYXRlTm9kZSh2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpXG4gICAgOiB2bm9kZVxufVxuXG52YXIgc2hvdyA9IHtcbiAgYmluZDogZnVuY3Rpb24gYmluZChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcblxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24gPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICB2YXIgb3JpZ2luYWxWaXNpYmlsaXR5ID0gKGVsLl9fdk9yaWdpbmFsVmlzaWJpbGl0eSA9XG4gICAgICBlbC5nZXRBdHRyaWJ1dGUoJ3Zpc2liaWxpdHknKSA9PT0gJ25vbmUnXG4gICAgICAgID8gJydcbiAgICAgICAgOiBlbC5nZXRBdHRyaWJ1dGUoJ3Zpc2liaWxpdHknKSk7XG4gICAgaWYgKHZhbHVlICYmIHRyYW5zaXRpb24pIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3Zpc2liaWxpdHknLCBvcmlnaW5hbFZpc2liaWxpdHkpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgndmlzaWJpbGl0eScsIHZhbHVlID8gb3JpZ2luYWxWaXNpYmlsaXR5IDogJ2NvbGxhcHNlZCcpO1xuICAgIH1cbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICB2YXIgb2xkVmFsdWUgPSByZWYub2xkVmFsdWU7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3Zpc2liaWxpdHknLCBlbC5fX3ZPcmlnaW5hbFZpc2liaWxpdHkpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCd2aXNpYmlsaXR5JywgJ2NvbGxhcHNlZCcpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKFxuICAgICAgICAndmlzaWJpbGl0eScsXG4gICAgICAgIHZhbHVlID8gZWwuX192T3JpZ2luYWxWaXNpYmlsaXR5IDogJ2NvbGxhcHNlZCdcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kKGVsLCBiaW5kaW5nLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSkge1xuICAgIGlmICghaXNEZXN0cm95KSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3Zpc2liaWxpdHknLCBlbC5fX3ZPcmlnaW5hbFZpc2liaWxpdHkpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHZpZXckMSA9IHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkKGVsLCByZWYpIHtcbiAgICB2YXIgYXJnID0gcmVmLmFyZztcbiAgICB2YXIgbW9kaWZpZXJzID0gcmVmLm1vZGlmaWVycztcblxuICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlLm5hdGl2ZVZpZXc7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAobW9kaWZpZXJzLmFycmF5KSB7XG4gICAgICAgIHBhcmVudFthcmddID0gKHBhcmVudFthcmddIHx8IFtdKS5wdXNoKGVsLm5hdGl2ZVZpZXcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50W2FyZ10gPSBlbC5uYXRpdmVWaWV3O1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIHBsYXRmb3JtRGlyZWN0aXZlcyA9IHtcbiAgc2hvdzogc2hvdyxcbiAgdmlldzogdmlldyQxXG59O1xuXG4vLyBFbnN1cmUgYGFwcGxpY2F0aW9uYCBhbmQgYGZyYW1lYCBtb2R1bGVzIGFyZSBsb2FkZWRcblxuVnVlLmNvbmZpZy5tdXN0VXNlUHJvcCA9IG11c3RVc2VQcm9wO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkVGFnID0gaXNSZXNlcnZlZFRhZztcblZ1ZS5jb25maWcuaXNVbmtub3duRWxlbWVudCA9IGlzVW5rbm93bkVsZW1lbnQ7XG5cblZ1ZS4kZG9jdW1lbnQgPSBWdWUucHJvdG90eXBlLiRkb2N1bWVudCA9IG5ldyBEb2N1bWVudE5vZGUoKTtcblxuVnVlLmNvbXBpbGUgPSBjb21waWxlVG9GdW5jdGlvbnM7XG5WdWUucmVnaXN0ZXJFbGVtZW50ID0gcmVnaXN0ZXJFbGVtZW50O1xuXG5PYmplY3QuYXNzaWduKFZ1ZS5vcHRpb25zLmRpcmVjdGl2ZXMsIHBsYXRmb3JtRGlyZWN0aXZlcyk7XG5cblZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fID0gcGF0Y2g7XG5cblZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24oZWwsIGh5ZHJhdGluZykge1xuICB2YXIgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnM7XG4gIC8vIHJlc29sdmUgdGVtcGxhdGUvZWwgYW5kIGNvbnZlcnQgdG8gcmVuZGVyIGZ1bmN0aW9uXG4gIGlmICghb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2YXIgdGVtcGxhdGUgPSBvcHRpb25zLnRlbXBsYXRlO1xuICAgIGlmICh0ZW1wbGF0ZSAmJiB0eXBlb2YgdGVtcGxhdGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB3YXJuKCdpbnZhbGlkIHRlbXBsYXRlIG9wdGlvbjogJyArIHRlbXBsYXRlLCB0aGlzKTtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICB2YXIgcmVmID0gY29tcGlsZVRvRnVuY3Rpb25zKFxuICAgICAgICB0ZW1wbGF0ZSxcbiAgICAgICAge1xuICAgICAgICAgIGRlbGltaXRlcnM6IG9wdGlvbnMuZGVsaW1pdGVycyxcbiAgICAgICAgICBjb21tZW50czogb3B0aW9ucy5jb21tZW50c1xuICAgICAgICB9LFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgICB2YXIgc3RhdGljUmVuZGVyRm5zID0gcmVmLnN0YXRpY1JlbmRlckZucztcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyO1xuICAgICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnM7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1vdW50Q29tcG9uZW50KHRoaXMsIGVsLCBoeWRyYXRpbmcpXG59O1xuXG5WdWUucHJvdG90eXBlLiRzdGFydCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBBcHBDb25zdHJ1Y3RvciA9IFZ1ZS5leHRlbmQodGhpcy4kb3B0aW9ucyk7XG5cbiAgLy8gcmVnaXN0ZXIgTlMgY29tcG9uZW50cyBpbnRvIFZ1ZVxuICBPYmplY3QudmFsdWVzKGdldEVsZW1lbnRNYXAoKSkuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICBWdWUuY29tcG9uZW50KGVudHJ5Lm1ldGEuY29tcG9uZW50Lm5hbWUsIGVudHJ5Lm1ldGEuY29tcG9uZW50KTtcbiAgfSk7XG5cbiAgYXBwbGljYXRpb24ub24oYXBwbGljYXRpb24ubGF1bmNoRXZlbnQsIGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgaWYgKHNlbGYuJGVsKSB7XG4gICAgICBzZWxmLiRkZXN0cm95KCk7XG4gICAgICBzZWxmID0gbmV3IEFwcENvbnN0cnVjdG9yKCk7XG4gICAgfVxuXG4gICAgc2VsZi4kbW91bnQoKTtcbiAgICBhcmdzLnJvb3QgPSBzZWxmLiRlbC5uYXRpdmVWaWV3O1xuICB9KTtcblxuICBhcHBsaWNhdGlvbi5ydW4oKTtcbn07XG5cbi8vIERlZmluZSBhIGBuYXRpdmVWaWV3YCBnZXR0ZXIgaW4gZXZlcnkgTlMgdnVlIGluc3RhbmNlXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJ25hdGl2ZVZpZXcnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLiRlbC5uYXRpdmVWaWV3XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBfZmluZFBhcmVudE1vZGFsRW50cnkodm0pIHtcbiAgaWYgKCF2bSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgdmFyIGVudHJ5ID0gdm0uJHBhcmVudDtcbiAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LiRvcHRpb25zLm5hbWUgIT09ICdNb2RhbEVudHJ5Jykge1xuICAgIGVudHJ5ID0gZW50cnkuJHBhcmVudDtcbiAgfVxuXG4gIHJldHVybiBlbnRyeVxufVxuXG52YXIgTW9kYWxQbHVnaW4gPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgVnVlLm1peGluKHtcbiAgICAgIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy4kbW9kYWwgPSB7XG4gICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKGRhdGEpIHtcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IF9maW5kUGFyZW50TW9kYWxFbnRyeShzZWxmKTtcblxuICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgIGVudHJ5LmNsb3NlQ2IoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgVnVlLnByb3RvdHlwZS4kc2hvd01vZGFsID0gZnVuY3Rpb24oY29tcG9uZW50LCBvcHRpb25zKSB7XG4gICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIHZhciByZXNvbHZlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgY2xvc2VDYiA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgaWYgKHJlc29sdmVkKSB7IHJldHVybiB9XG5cbiAgICAgICAgICByZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICBtb2RhbFBhZ2UuY2xvc2VNb2RhbCgpO1xuXG4gICAgICAgICAgLy8gZW1pdHRlZCB0byBzaG93IHVwIGluIGRldnRvb2xzXG4gICAgICAgICAgLy8gZm9yIGRlYnVnZ2luZyBwdXJwb3Nlc1xuICAgICAgICAgIG5hdkVudHJ5SW5zdGFuY2UuJGVtaXQoJ21vZGFsOmNsb3NlJywgZGF0YSk7XG4gICAgICAgICAgbmF2RW50cnlJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGJ1aWxkIG9wdGlvbnMgb2JqZWN0IHdpdGggZGVmYXVsdHNcbiAgICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICAgIGNsb3NlQ2FsbGJhY2s6IGNsb3NlQ2JcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIG5hdkVudHJ5SW5zdGFuY2UgPSBuZXcgVnVlKHtcbiAgICAgICAgICBuYW1lOiAnTW9kYWxFbnRyeScsXG4gICAgICAgICAgcGFyZW50OiB0aGlzJDEuJHJvb3QsXG4gICAgICAgICAgbWV0aG9kczoge1xuICAgICAgICAgICAgY2xvc2VDYjogY2xvc2VDYlxuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoaCkgeyByZXR1cm4gaChjb21wb25lbnQsIHtcbiAgICAgICAgICAgICAgcHJvcHM6IG9wdGlvbnMucHJvcHNcbiAgICAgICAgICAgIH0pOyB9XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbW9kYWxQYWdlID0gbmF2RW50cnlJbnN0YW5jZS4kbW91bnQoKS4kZWwubmF0aXZlVmlldztcblxuICAgICAgICB0aGlzJDEuJGVsLm5hdGl2ZVZpZXcuc2hvd01vZGFsKG1vZGFsUGFnZSwgb3B0aW9ucyk7XG4gICAgICB9KVxuICAgIH07XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldEZyYW1lSW5zdGFuY2UoZnJhbWUpIHtcbiAgLy8gZ2V0IHRoZSBmcmFtZSB0aGF0IHdlIG5lZWQgdG8gbmF2aWdhdGVcbiAgLy8gdGhpcyBjYW4gYmUgYSBmcmFtZSBpZCAoU3RyaW5nKVxuICAvLyBhIFZ1ZSByZWYgdG8gYSBmcmFtZVxuICAvLyBhIEZyYW1lIFZpZXdOb2RlXG4gIC8vIG9yIGEgRnJhbWUgaW5zdGFuY2VcbiAgaWYgKGlzT2JqZWN0JDEoZnJhbWUpICYmIGlzRGVmKGZyYW1lLiRlbCkpIHtcbiAgICBmcmFtZSA9IGZyYW1lLiRlbC5uYXRpdmVWaWV3O1xuICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKGZyYW1lKSkge1xuICAgIGZyYW1lID0gcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy91aS9mcmFtZScpLmdldEZyYW1lQnlJZChmcmFtZSk7XG4gIH0gZWxzZSBpZiAoaXNEZWYoZnJhbWUubmF0aXZlVmlldykpIHtcbiAgICBmcmFtZSA9IGZyYW1lLm5hdGl2ZVZpZXc7XG4gIH1cbiAgLy8gZmluYWxseSBnZXQgdGhlIGNvbXBvbmVudCBpbnN0YW5jZSBmb3IgdGhpcyBmcmFtZVxuICByZXR1cm4gZ2V0RnJhbWUoZnJhbWUuaWQpXG59XG5cbmZ1bmN0aW9uIGZpbmRQYXJlbnROYXZpZ2F0aW9uRW50cnkodm0pIHtcbiAgaWYgKCF2bSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgdmFyIGVudHJ5ID0gdm0uJHBhcmVudDtcbiAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LiRvcHRpb25zLm5hbWUgIT09ICdOYXZpZ2F0aW9uRW50cnknKSB7XG4gICAgZW50cnkgPSBlbnRyeS4kcGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIGVudHJ5XG59XG5cbnZhciBOYXZpZ2F0b3JQbHVnaW4gPSB7XG4gIGluc3RhbGw6IGZ1bmN0aW9uIGluc3RhbGwoVnVlKSB7XG4gICAgVnVlLnByb3RvdHlwZS4kbmF2aWdhdGVCYWNrID0gZnVuY3Rpb24ob3B0aW9ucywgYmFja3N0YWNrRW50cnkpIHtcbiAgICAgIGlmICggYmFja3N0YWNrRW50cnkgPT09IHZvaWQgMCApIGJhY2tzdGFja0VudHJ5ID0gbnVsbDtcblxuICAgICAgdmFyIG5hdkVudHJ5ID0gZmluZFBhcmVudE5hdmlnYXRpb25FbnRyeSh0aGlzKTtcbiAgICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgICAgZnJhbWU6IG5hdkVudHJ5ID8gbmF2RW50cnkuJG9wdGlvbnMuZnJhbWUgOiAnZGVmYXVsdCdcbiAgICAgIH07XG4gICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgdmFyIGZyYW1lID0gZ2V0RnJhbWVJbnN0YW5jZShvcHRpb25zLmZyYW1lKTtcblxuICAgICAgZnJhbWUuYmFjayhiYWNrc3RhY2tFbnRyeSk7XG4gICAgfTtcblxuICAgIFZ1ZS5wcm90b3R5cGUuJG5hdmlnYXRlVG8gPSBmdW5jdGlvbihjb21wb25lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICB2YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAgIGZyYW1lOiAnZGVmYXVsdCdcbiAgICAgIH07XG4gICAgICAvLyBidWlsZCBvcHRpb25zIG9iamVjdCB3aXRoIGRlZmF1bHRzXG4gICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgdmFyIGZyYW1lID0gZ2V0RnJhbWVJbnN0YW5jZShvcHRpb25zLmZyYW1lKTtcbiAgICAgICAgdmFyIG5hdkVudHJ5SW5zdGFuY2UgPSBuZXcgVnVlKHtcbiAgICAgICAgICBuYW1lOiAnTmF2aWdhdGlvbkVudHJ5JyxcbiAgICAgICAgICBwYXJlbnQ6IHRoaXMkMS4kcm9vdCxcbiAgICAgICAgICBmcmFtZTogZnJhbWUsXG4gICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGZyYW1lOiB7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6IGZyYW1lLmlkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIChoKSB7IHJldHVybiBoKGNvbXBvbmVudCwgeyBwcm9wczogb3B0aW9ucy5wcm9wcyB9KTsgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHBhZ2UgPSBuYXZFbnRyeUluc3RhbmNlLiRtb3VudCgpLiRlbC5uYXRpdmVWaWV3O1xuXG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgICBpZiAoYXJncy5pc0JhY2tOYXZpZ2F0aW9uKSB7XG4gICAgICAgICAgICBwYWdlLm9mZignbmF2aWdhdGVkRnJvbScsIGhhbmRsZXIpO1xuICAgICAgICAgICAgbmF2RW50cnlJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcGFnZS5vbignbmF2aWdhdGVkRnJvbScsIGhhbmRsZXIpO1xuXG4gICAgICAgIC8vIGVuc3VyZSB0aGF0IHRoZSBuYXZFbnRyeUluc3RhbmNlIHZ1ZSBpbnN0YW5jZSBpcyBkZXN0cm95ZWQgd2hlbiB0aGVcbiAgICAgICAgLy8gcGFnZSBpcyBkaXNwb3NlZCAoY2xlYXJIaXN0b3J5OiB0cnVlIGZvciBleGFtcGxlKVxuICAgICAgICB2YXIgZGlzcG9zZSA9IHBhZ2UuZGlzcG9zZU5hdGl2ZVZpZXc7XG4gICAgICAgIHBhZ2UuZGlzcG9zZU5hdGl2ZVZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgICAgICAgbmF2RW50cnlJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgICAgIGRpc3Bvc2UuY2FsbChwYWdlLCBhcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICBmcmFtZS5uYXZpZ2F0ZShPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IGNyZWF0ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFnZTsgfSB9KSk7XG4gICAgICAgIHJlc29sdmUocGFnZSk7XG4gICAgICB9KVxuICAgIH07XG4gIH1cbn07XG5cblZ1ZS5jb25maWcuc2lsZW50ID0gdHJ1ZTtcblxuc2V0VnVlKFZ1ZSk7XG5cblZ1ZS51c2UoTW9kYWxQbHVnaW4pO1xuVnVlLnVzZShOYXZpZ2F0b3JQbHVnaW4pO1xuXG52YXIgbmV3TGluZVJlZ0V4cCA9IC9cXFxcbi9nO1xuXG5jb25zb2xlLmxvZyA9IChmdW5jdGlvbihsb2csIGluc3BlY3QsIFZ1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgcmV0dXJuIGxvZy5jYWxsLmFwcGx5KFxuICAgICAgbG9nLCBbIHRoaXMgXS5jb25jYXQoIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChhcmdzLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIGluc3BlY3QoYXJnLCB7XG4gICAgICAgICAgZGVwdGg6IDIsXG4gICAgICAgICAgY29sb3JzOiBWdWUuY29uZmlnLmRlYnVnLFxuICAgICAgICAgIHNob3dIaWRkZW46IHRydWVcbiAgICAgICAgfSkucmVwbGFjZShuZXdMaW5lUmVnRXhwLCAnXFxuJylcbiAgICAgIH0pIClcbiAgICApXG4gIH1cbn0pKGNvbnNvbGUubG9nLCB1dGlsSW5zcGVjdCwgVnVlKTtcblxuZ2xvYmFsLl9fb25MaXZlU3luY0NvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBmcmFtZSA9IHJlcXVpcmUoJ3Rucy1jb3JlLW1vZHVsZXMvdWkvZnJhbWUnKS50b3Btb3N0KCk7XG4gIGlmIChmcmFtZSkge1xuICAgIGlmIChmcmFtZS5jdXJyZW50UGFnZSAmJiBmcmFtZS5jdXJyZW50UGFnZS5tb2RhbCkge1xuICAgICAgZnJhbWUuY3VycmVudFBhZ2UubW9kYWwuY2xvc2VNb2RhbCgpO1xuICAgIH1cblxuICAgIGlmIChmcmFtZS5jdXJyZW50UGFnZSkge1xuICAgICAgZnJhbWUuY3VycmVudFBhZ2UuYWRkQ3NzRmlsZShcbiAgICAgICAgcmVxdWlyZSgndG5zLWNvcmUtbW9kdWxlcy9hcHBsaWNhdGlvbicpLmdldENzc0ZpbGVOYW1lKClcbiAgICAgICk7XG4gICAgfVxuICB9XG59O1xuXG4vLyBGaXggYSByb2xsdXAgcHJvYmxlbSB3aGljaCBkb2VzIG5vdCBkZWZpbmVcbi8vIG1vZHVsZS5leHBvcnQuZGVmYXVsdCA9IFZ1ZVxuLy8gc28gYSBgaW1wb3J0IFZ1ZSBmcm9tICduYXRpdmVzY3JpcHQtdnVlJ2Agd2lsbFxuLy8gZmFpbCBmcm9tIGEgVHlwZXNjcmlwdCBmaWxlXG5WdWUuZGVmYXVsdCA9IFZ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBWdWU7XG4iLCJ2YXIgVnVlIC8vIGxhdGUgYmluZFxudmFyIHZlcnNpb25cbnZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd2luZG93Ll9fVlVFX0hPVF9NQVBfXyA9IG1hcFxufVxudmFyIGluc3RhbGxlZCA9IGZhbHNlXG52YXIgaXNCcm93c2VyaWZ5ID0gZmFsc2VcbnZhciBpbml0SG9va05hbWUgPSAnYmVmb3JlQ3JlYXRlJ1xuXG5leHBvcnRzLmluc3RhbGwgPSBmdW5jdGlvbiAodnVlLCBicm93c2VyaWZ5KSB7XG4gIGlmIChpbnN0YWxsZWQpIHsgcmV0dXJuIH1cbiAgaW5zdGFsbGVkID0gdHJ1ZVxuXG4gIFZ1ZSA9IHZ1ZS5fX2VzTW9kdWxlID8gdnVlLmRlZmF1bHQgOiB2dWVcbiAgdmVyc2lvbiA9IFZ1ZS52ZXJzaW9uLnNwbGl0KCcuJykubWFwKE51bWJlcilcbiAgaXNCcm93c2VyaWZ5ID0gYnJvd3NlcmlmeVxuXG4gIC8vIGNvbXBhdCB3aXRoIDwgMi4wLjAtYWxwaGEuN1xuICBpZiAoVnVlLmNvbmZpZy5fbGlmZWN5Y2xlSG9va3MuaW5kZXhPZignaW5pdCcpID4gLTEpIHtcbiAgICBpbml0SG9va05hbWUgPSAnaW5pdCdcbiAgfVxuXG4gIGV4cG9ydHMuY29tcGF0aWJsZSA9IHZlcnNpb25bMF0gPj0gMlxuICBpZiAoIWV4cG9ydHMuY29tcGF0aWJsZSkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdbSE1SXSBZb3UgYXJlIHVzaW5nIGEgdmVyc2lvbiBvZiB2dWUtaG90LXJlbG9hZC1hcGkgdGhhdCBpcyAnICtcbiAgICAgICAgJ29ubHkgY29tcGF0aWJsZSB3aXRoIFZ1ZS5qcyBjb3JlIF4yLjAuMC4nXG4gICAgKVxuICAgIHJldHVyblxuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcmVjb3JkIGZvciBhIGhvdCBtb2R1bGUsIHdoaWNoIGtlZXBzIHRyYWNrIG9mIGl0cyBjb25zdHJ1Y3RvclxuICogYW5kIGluc3RhbmNlc1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuXG5leHBvcnRzLmNyZWF0ZVJlY29yZCA9IGZ1bmN0aW9uIChpZCwgb3B0aW9ucykge1xuICBpZihtYXBbaWRdKSB7IHJldHVybiB9XG5cbiAgdmFyIEN0b3IgPSBudWxsXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIEN0b3IgPSBvcHRpb25zXG4gICAgb3B0aW9ucyA9IEN0b3Iub3B0aW9uc1xuICB9XG4gIG1ha2VPcHRpb25zSG90KGlkLCBvcHRpb25zKVxuICBtYXBbaWRdID0ge1xuICAgIEN0b3I6IEN0b3IsXG4gICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICBpbnN0YW5jZXM6IFtdXG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBtb2R1bGUgaXMgcmVjb3JkZWRcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAqL1xuXG5leHBvcnRzLmlzUmVjb3JkZWQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBbaWRdICE9PSAndW5kZWZpbmVkJ1xufVxuXG4vKipcbiAqIE1ha2UgYSBDb21wb25lbnQgb3B0aW9ucyBvYmplY3QgaG90LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuXG5mdW5jdGlvbiBtYWtlT3B0aW9uc0hvdChpZCwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgdmFyIHJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiAoaCwgY3R4KSB7XG4gICAgICB2YXIgaW5zdGFuY2VzID0gbWFwW2lkXS5pbnN0YW5jZXNcbiAgICAgIGlmIChjdHggJiYgaW5zdGFuY2VzLmluZGV4T2YoY3R4LnBhcmVudCkgPCAwKSB7XG4gICAgICAgIGluc3RhbmNlcy5wdXNoKGN0eC5wYXJlbnQpXG4gICAgICB9XG4gICAgICByZXR1cm4gcmVuZGVyKGgsIGN0eClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaW5qZWN0SG9vayhvcHRpb25zLCBpbml0SG9va05hbWUsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlY29yZCA9IG1hcFtpZF1cbiAgICAgIGlmICghcmVjb3JkLkN0b3IpIHtcbiAgICAgICAgcmVjb3JkLkN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yXG4gICAgICB9XG4gICAgICByZWNvcmQuaW5zdGFuY2VzLnB1c2godGhpcylcbiAgICB9KVxuICAgIGluamVjdEhvb2sob3B0aW9ucywgJ2JlZm9yZURlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpbnN0YW5jZXMgPSBtYXBbaWRdLmluc3RhbmNlc1xuICAgICAgaW5zdGFuY2VzLnNwbGljZShpbnN0YW5jZXMuaW5kZXhPZih0aGlzKSwgMSlcbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogSW5qZWN0IGEgaG9vayB0byBhIGhvdCByZWxvYWRhYmxlIGNvbXBvbmVudCBzbyB0aGF0XG4gKiB3ZSBjYW4ga2VlcCB0cmFjayBvZiBpdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhvb2tcbiAqL1xuXG5mdW5jdGlvbiBpbmplY3RIb29rKG9wdGlvbnMsIG5hbWUsIGhvb2spIHtcbiAgdmFyIGV4aXN0aW5nID0gb3B0aW9uc1tuYW1lXVxuICBvcHRpb25zW25hbWVdID0gZXhpc3RpbmdcbiAgICA/IEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpID8gZXhpc3RpbmcuY29uY2F0KGhvb2spIDogW2V4aXN0aW5nLCBob29rXVxuICAgIDogW2hvb2tdXG59XG5cbmZ1bmN0aW9uIHRyeVdyYXAoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpZCwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKGlkLCBhcmcpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIFZ1ZSBjb21wb25lbnQgaG90LXJlbG9hZC4gRnVsbCByZWxvYWQgcmVxdWlyZWQuJ1xuICAgICAgKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVPcHRpb25zIChvbGRPcHRpb25zLCBuZXdPcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBvbGRPcHRpb25zKSB7XG4gICAgaWYgKCEoa2V5IGluIG5ld09wdGlvbnMpKSB7XG4gICAgICBkZWxldGUgb2xkT3B0aW9uc1trZXldXG4gICAgfVxuICB9XG4gIGZvciAodmFyIGtleSQxIGluIG5ld09wdGlvbnMpIHtcbiAgICBvbGRPcHRpb25zW2tleSQxXSA9IG5ld09wdGlvbnNba2V5JDFdXG4gIH1cbn1cblxuZXhwb3J0cy5yZXJlbmRlciA9IHRyeVdyYXAoZnVuY3Rpb24gKGlkLCBvcHRpb25zKSB7XG4gIHZhciByZWNvcmQgPSBtYXBbaWRdXG4gIGlmICghb3B0aW9ucykge1xuICAgIHJlY29yZC5pbnN0YW5jZXMuc2xpY2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgaW5zdGFuY2UuJGZvcmNlVXBkYXRlKClcbiAgICB9KVxuICAgIHJldHVyblxuICB9XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zLm9wdGlvbnNcbiAgfVxuICBpZiAocmVjb3JkLkN0b3IpIHtcbiAgICByZWNvcmQuQ3Rvci5vcHRpb25zLnJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgcmVjb3JkLkN0b3Iub3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZuc1xuICAgIHJlY29yZC5pbnN0YW5jZXMuc2xpY2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgaW5zdGFuY2UuJG9wdGlvbnMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICAgIGluc3RhbmNlLiRvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zXG4gICAgICAvLyByZXNldCBzdGF0aWMgdHJlZXNcbiAgICAgIC8vIHByZSAyLjUsIGFsbCBzdGF0aWMgdHJlZXMgYXJlIGNhY2hlZCB0b2dldGhlciBvbiB0aGUgaW5zdGFuY2VcbiAgICAgIGlmIChpbnN0YW5jZS5fc3RhdGljVHJlZXMpIHtcbiAgICAgICAgaW5zdGFuY2UuX3N0YXRpY1RyZWVzID0gW11cbiAgICAgIH1cbiAgICAgIC8vIDIuNS4wXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWNvcmQuQ3Rvci5vcHRpb25zLmNhY2hlZCkpIHtcbiAgICAgICAgcmVjb3JkLkN0b3Iub3B0aW9ucy5jYWNoZWQgPSBbXVxuICAgICAgfVxuICAgICAgLy8gMi41LjNcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGluc3RhbmNlLiRvcHRpb25zLmNhY2hlZCkpIHtcbiAgICAgICAgaW5zdGFuY2UuJG9wdGlvbnMuY2FjaGVkID0gW11cbiAgICAgIH1cblxuICAgICAgLy8gcG9zdCAyLjUuNDogdi1vbmNlIHRyZWVzIGFyZSBjYWNoZWQgb24gaW5zdGFuY2UuX3N0YXRpY1RyZWVzLlxuICAgICAgLy8gUHVyZSBzdGF0aWMgdHJlZXMgYXJlIGNhY2hlZCBvbiB0aGUgc3RhdGljUmVuZGVyRm5zIGFycmF5XG4gICAgICAvLyAoYm90aCBhbHJlYWR5IHJlc2V0IGFib3ZlKVxuXG4gICAgICAvLyAyLjY6IHRlbXBvcmFyaWx5IG1hcmsgcmVuZGVyZWQgc2NvcGVkIHNsb3RzIGFzIHVuc3RhYmxlIHNvIHRoYXRcbiAgICAgIC8vIGNoaWxkIGNvbXBvbmVudHMgY2FuIGJlIGZvcmNlZCB0byB1cGRhdGVcbiAgICAgIHZhciByZXN0b3JlID0gcGF0Y2hTY29wZWRTbG90cyhpbnN0YW5jZSlcbiAgICAgIGluc3RhbmNlLiRmb3JjZVVwZGF0ZSgpXG4gICAgICBpbnN0YW5jZS4kbmV4dFRpY2socmVzdG9yZSlcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIC8vIGZ1bmN0aW9uYWwgb3Igbm8gaW5zdGFuY2UgY3JlYXRlZCB5ZXRcbiAgICByZWNvcmQub3B0aW9ucy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgIHJlY29yZC5vcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zXG5cbiAgICAvLyBoYW5kbGUgZnVuY3Rpb25hbCBjb21wb25lbnQgcmUtcmVuZGVyXG4gICAgaWYgKHJlY29yZC5vcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIHJlcmVuZGVyIHdpdGggZnVsbCBvcHRpb25zXG4gICAgICBpZiAoT2JqZWN0LmtleXMob3B0aW9ucykubGVuZ3RoID4gMikge1xuICAgICAgICB1cGRhdGVPcHRpb25zKHJlY29yZC5vcHRpb25zLCBvcHRpb25zKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdGVtcGxhdGUtb25seSByZXJlbmRlci5cbiAgICAgICAgLy8gbmVlZCB0byBpbmplY3QgdGhlIHN0eWxlIGluamVjdGlvbiBjb2RlIGZvciBDU1MgbW9kdWxlc1xuICAgICAgICAvLyB0byB3b3JrIHByb3Blcmx5LlxuICAgICAgICB2YXIgaW5qZWN0U3R5bGVzID0gcmVjb3JkLm9wdGlvbnMuX2luamVjdFN0eWxlc1xuICAgICAgICBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgICAgICAgdmFyIHJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICAgICAgcmVjb3JkLm9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gKGgsIGN0eCkge1xuICAgICAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwoY3R4KVxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcihoLCBjdHgpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZWNvcmQub3B0aW9ucy5fQ3RvciA9IG51bGxcbiAgICAgIC8vIDIuNS4zXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWNvcmQub3B0aW9ucy5jYWNoZWQpKSB7XG4gICAgICAgIHJlY29yZC5vcHRpb25zLmNhY2hlZCA9IFtdXG4gICAgICB9XG4gICAgICByZWNvcmQuaW5zdGFuY2VzLnNsaWNlKCkuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgaW5zdGFuY2UuJGZvcmNlVXBkYXRlKClcbiAgICAgIH0pXG4gICAgfVxuICB9XG59KVxuXG5leHBvcnRzLnJlbG9hZCA9IHRyeVdyYXAoZnVuY3Rpb24gKGlkLCBvcHRpb25zKSB7XG4gIHZhciByZWNvcmQgPSBtYXBbaWRdXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucy5vcHRpb25zXG4gICAgfVxuICAgIG1ha2VPcHRpb25zSG90KGlkLCBvcHRpb25zKVxuICAgIGlmIChyZWNvcmQuQ3Rvcikge1xuICAgICAgaWYgKHZlcnNpb25bMV0gPCAyKSB7XG4gICAgICAgIC8vIHByZXNlcnZlIHByZSAyLjIgYmVoYXZpb3IgZm9yIGdsb2JhbCBtaXhpbiBoYW5kbGluZ1xuICAgICAgICByZWNvcmQuQ3Rvci5leHRlbmRPcHRpb25zID0gb3B0aW9uc1xuICAgICAgfVxuICAgICAgdmFyIG5ld0N0b3IgPSByZWNvcmQuQ3Rvci5zdXBlci5leHRlbmQob3B0aW9ucylcbiAgICAgIC8vIHByZXZlbnQgcmVjb3JkLm9wdGlvbnMuX0N0b3IgZnJvbSBiZWluZyBvdmVyd3JpdHRlbiBhY2NpZGVudGFsbHlcbiAgICAgIG5ld0N0b3Iub3B0aW9ucy5fQ3RvciA9IHJlY29yZC5vcHRpb25zLl9DdG9yXG4gICAgICByZWNvcmQuQ3Rvci5vcHRpb25zID0gbmV3Q3Rvci5vcHRpb25zXG4gICAgICByZWNvcmQuQ3Rvci5jaWQgPSBuZXdDdG9yLmNpZFxuICAgICAgcmVjb3JkLkN0b3IucHJvdG90eXBlID0gbmV3Q3Rvci5wcm90b3R5cGVcbiAgICAgIGlmIChuZXdDdG9yLnJlbGVhc2UpIHtcbiAgICAgICAgLy8gdGVtcG9yYXJ5IGdsb2JhbCBtaXhpbiBzdHJhdGVneSB1c2VkIGluIDwgMi4wLjAtYWxwaGEuNlxuICAgICAgICBuZXdDdG9yLnJlbGVhc2UoKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB1cGRhdGVPcHRpb25zKHJlY29yZC5vcHRpb25zLCBvcHRpb25zKVxuICAgIH1cbiAgfVxuICByZWNvcmQuaW5zdGFuY2VzLnNsaWNlKCkuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBpZiAoaW5zdGFuY2UuJHZub2RlICYmIGluc3RhbmNlLiR2bm9kZS5jb250ZXh0KSB7XG4gICAgICBpbnN0YW5jZS4kdm5vZGUuY29udGV4dC4kZm9yY2VVcGRhdGUoKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdSb290IG9yIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UgbW9kaWZpZWQuIEZ1bGwgcmVsb2FkIHJlcXVpcmVkLidcbiAgICAgIClcbiAgICB9XG4gIH0pXG59KVxuXG4vLyAyLjYgb3B0aW1pemVzIHRlbXBsYXRlLWNvbXBpbGVkIHNjb3BlZCBzbG90cyBhbmQgc2tpcHMgdXBkYXRlcyBpZiBjaGlsZFxuLy8gb25seSB1c2VzIHNjb3BlZCBzbG90cy4gV2UgbmVlZCB0byBwYXRjaCB0aGUgc2NvcGVkIHNsb3RzIHJlc29sdmluZyBoZWxwZXJcbi8vIHRvIHRlbXBvcmFyaWx5IG1hcmsgYWxsIHNjb3BlZCBzbG90cyBhcyB1bnN0YWJsZSBpbiBvcmRlciB0byBmb3JjZSBjaGlsZFxuLy8gdXBkYXRlcy5cbmZ1bmN0aW9uIHBhdGNoU2NvcGVkU2xvdHMgKGluc3RhbmNlKSB7XG4gIGlmICghaW5zdGFuY2UuX3UpIHsgcmV0dXJuIH1cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS9ibG9iL2Rldi9zcmMvY29yZS9pbnN0YW5jZS9yZW5kZXItaGVscGVycy9yZXNvbHZlLXNjb3BlZC1zbG90cy5qc1xuICB2YXIgb3JpZ2luYWwgPSBpbnN0YW5jZS5fdVxuICBpbnN0YW5jZS5fdSA9IGZ1bmN0aW9uIChzbG90cykge1xuICAgIHRyeSB7XG4gICAgICAvLyAyLjYuNCB+IDIuNi42XG4gICAgICByZXR1cm4gb3JpZ2luYWwoc2xvdHMsIHRydWUpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gMi41IC8gPj0gMi42LjdcbiAgICAgIHJldHVybiBvcmlnaW5hbChzbG90cywgbnVsbCwgdHJ1ZSlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpbnN0YW5jZS5fdSA9IG9yaWdpbmFsXG4gIH1cbn1cbiIsIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZSAoZXhjZXB0IGZvciBtb2R1bGVzKS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyLCAvKiBzZXJ2ZXIgb25seSAqL1xuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHsgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9